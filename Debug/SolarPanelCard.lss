
SolarPanelCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000410  00800060  00003370  00003404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  00800470  00800470  00003814  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051c4  00000000  00000000  00003b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000102f  00000000  00000000  00008ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022b0  00000000  00000000  00009d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000900  00000000  00000000  0000bfc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ece  00000000  00000000  0000c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b6a  00000000  00000000  0000d796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__vector_7>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_13>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	70 04       	cpc	r7, r0
      56:	54 04       	cpc	r5, r4
      58:	56 04       	cpc	r5, r6
      5a:	58 04       	cpc	r5, r8
      5c:	5a 04       	cpc	r5, r10
      5e:	5c 04       	cpc	r5, r12
      60:	5e 04       	cpc	r5, r14
      62:	60 04       	cpc	r6, r0
      64:	62 04       	cpc	r6, r2
      66:	52 04       	cpc	r5, r2
      68:	52 04       	cpc	r5, r2
      6a:	52 04       	cpc	r5, r2
      6c:	52 04       	cpc	r5, r2
      6e:	52 04       	cpc	r5, r2
      70:	52 04       	cpc	r5, r2
      72:	52 04       	cpc	r5, r2
      74:	64 04       	cpc	r6, r4
      76:	66 04       	cpc	r6, r6
      78:	68 04       	cpc	r6, r8
      7a:	6a 04       	cpc	r6, r10
      7c:	6c 04       	cpc	r6, r12
      7e:	6e 04       	cpc	r6, r14

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf e5       	ldi	r28, 0x5F	; 95
      86:	d8 e0       	ldi	r29, 0x08	; 8
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	14 e0       	ldi	r17, 0x04	; 4
      8e:	a0 e6       	ldi	r26, 0x60	; 96
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	e0 e7       	ldi	r30, 0x70	; 112
      94:	f3 e3       	ldi	r31, 0x33	; 51
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	a0 37       	cpi	r26, 0x70	; 112
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	26 e0       	ldi	r18, 0x06	; 6
      a4:	a0 e7       	ldi	r26, 0x70	; 112
      a6:	b4 e0       	ldi	r27, 0x04	; 4
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a0 38       	cpi	r26, 0x80	; 128
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <main>
      b6:	0c 94 b6 19 	jmp	0x336c	; 0x336c <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <DHT_Setup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	2f e7       	ldi	r18, 0x7F	; 127
      c0:	8a e1       	ldi	r24, 0x1A	; 26
      c2:	96 e0       	ldi	r25, 0x06	; 6
      c4:	21 50       	subi	r18, 0x01	; 1
      c6:	80 40       	sbci	r24, 0x00	; 0
      c8:	90 40       	sbci	r25, 0x00	; 0
      ca:	e1 f7       	brne	.-8      	; 0xc4 <DHT_Setup+0x6>
      cc:	00 c0       	rjmp	.+0      	; 0xce <DHT_Setup+0x10>
      ce:	00 00       	nop
//----- Functions -----------------------------//
//Setup sensor.
void DHT_Setup()
{
	_delay_ms(__DHT_Delay_Setup);
	__DHT_STATUS = DHT_Ok;
      d0:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <__DHT_STATUS>
      d4:	08 95       	ret

000000d6 <Read_Response>:
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
}
      d6:	2f 92       	push	r2
      d8:	3f 92       	push	r3
      da:	4f 92       	push	r4
      dc:	5f 92       	push	r5
      de:	6f 92       	push	r6
      e0:	7f 92       	push	r7
      e2:	8f 92       	push	r8
      e4:	9f 92       	push	r9
      e6:	af 92       	push	r10
      e8:	bf 92       	push	r11
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	00 d0       	rcall	.+0      	; 0xfc <Read_Response+0x26>
      fc:	00 d0       	rcall	.+0      	; 0xfe <Read_Response+0x28>
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
     106:	8d b7       	in	r24, 0x3d	; 61
     108:	9e b7       	in	r25, 0x3e	; 62
     10a:	9c 83       	std	Y+4, r25	; 0x04
     10c:	8b 83       	std	Y+3, r24	; 0x03
     10e:	e9 81       	ldd	r30, Y+1	; 0x01
     110:	fa 81       	ldd	r31, Y+2	; 0x02
     112:	01 90       	ld	r0, Z+
     114:	00 20       	and	r0, r0
     116:	e9 f7       	brne	.-6      	; 0x112 <Read_Response+0x3c>
     118:	31 97       	sbiw	r30, 0x01	; 1
     11a:	4f 01       	movw	r8, r30
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	9a 81       	ldd	r25, Y+2	; 0x02
     120:	88 1a       	sub	r8, r24
     122:	99 0a       	sbc	r9, r25
     124:	99 24       	eor	r9, r9
     126:	14 01       	movw	r2, r8
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	29 1a       	sub	r2, r25
     12c:	31 08       	sbc	r3, r1
     12e:	8d b7       	in	r24, 0x3d	; 61
     130:	9e b7       	in	r25, 0x3e	; 62
     132:	88 19       	sub	r24, r8
     134:	99 09       	sbc	r25, r9
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	9e bf       	out	0x3e, r25	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	8d bf       	out	0x3d, r24	; 61
     140:	0d b7       	in	r16, 0x3d	; 61
     142:	1e b7       	in	r17, 0x3e	; 62
     144:	0f 5f       	subi	r16, 0xFF	; 255
     146:	1f 4f       	sbci	r17, 0xFF	; 255
     148:	41 2c       	mov	r4, r1
     14a:	51 2c       	mov	r5, r1
     14c:	32 01       	movw	r6, r4
     14e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
     152:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__data_end+0x1>
     156:	a0 91 72 04 	lds	r26, 0x0472	; 0x800472 <__data_end+0x2>
     15a:	b0 91 73 04 	lds	r27, 0x0473	; 0x800473 <__data_end+0x3>
     15e:	80 5f       	subi	r24, 0xF0	; 240
     160:	98 4d       	sbci	r25, 0xD8	; 216
     162:	af 4f       	sbci	r26, 0xFF	; 255
     164:	bf 4f       	sbci	r27, 0xFF	; 255
     166:	48 16       	cp	r4, r24
     168:	59 06       	cpc	r5, r25
     16a:	6a 06       	cpc	r6, r26
     16c:	7b 06       	cpc	r7, r27
     16e:	60 f0       	brcs	.+24     	; 0x188 <Read_Response+0xb2>
     170:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__data_end>
     174:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <__data_end+0x1>
     178:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <__data_end+0x2>
     17c:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <__data_end+0x3>
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Response_Status>
     186:	71 c0       	rjmp	.+226    	; 0x26a <Read_Response+0x194>
     188:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Response_Status>
     18c:	84 30       	cpi	r24, 0x04	; 4
     18e:	11 f4       	brne	.+4      	; 0x194 <Read_Response+0xbe>
     190:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <Response_Status>
     194:	eb ec       	ldi	r30, 0xCB	; 203
     196:	f4 e0       	ldi	r31, 0x04	; 4
     198:	01 90       	ld	r0, Z+
     19a:	00 20       	and	r0, r0
     19c:	e9 f7       	brne	.-6      	; 0x198 <Read_Response+0xc2>
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	cf 01       	movw	r24, r30
     1a2:	8b 5c       	subi	r24, 0xCB	; 203
     1a4:	94 40       	sbci	r25, 0x04	; 4
     1a6:	6c 01       	movw	r12, r24
     1a8:	e1 2c       	mov	r14, r1
     1aa:	f1 2c       	mov	r15, r1
     1ac:	c1 14       	cp	r12, r1
     1ae:	d1 04       	cpc	r13, r1
     1b0:	e1 04       	cpc	r14, r1
     1b2:	f1 04       	cpc	r15, r1
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <Read_Response+0xe2>
     1b6:	4d c0       	rjmp	.+154    	; 0x252 <Read_Response+0x17c>
     1b8:	8f e9       	ldi	r24, 0x9F	; 159
     1ba:	9f e0       	ldi	r25, 0x0F	; 15
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <Read_Response+0xe6>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <Read_Response+0xec>
     1c2:	00 00       	nop
     1c4:	9f ef       	ldi	r25, 0xFF	; 255
     1c6:	49 1a       	sub	r4, r25
     1c8:	59 0a       	sbc	r5, r25
     1ca:	69 0a       	sbc	r6, r25
     1cc:	79 0a       	sbc	r7, r25
     1ce:	eb ec       	ldi	r30, 0xCB	; 203
     1d0:	f4 e0       	ldi	r31, 0x04	; 4
     1d2:	01 90       	ld	r0, Z+
     1d4:	00 20       	and	r0, r0
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <Read_Response+0xfc>
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	cf 01       	movw	r24, r30
     1dc:	8b 5c       	subi	r24, 0xCB	; 203
     1de:	94 40       	sbci	r25, 0x04	; 4
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b0 e0       	ldi	r27, 0x00	; 0
     1e4:	c8 16       	cp	r12, r24
     1e6:	d9 06       	cpc	r13, r25
     1e8:	ea 06       	cpc	r14, r26
     1ea:	fb 06       	cpc	r15, r27
     1ec:	91 f5       	brne	.+100    	; 0x252 <Read_Response+0x17c>
     1ee:	27 c0       	rjmp	.+78     	; 0x23e <Read_Response+0x168>
     1f0:	a1 01       	movw	r20, r2
     1f2:	b8 01       	movw	r22, r16
     1f4:	6f 5f       	subi	r22, 0xFF	; 255
     1f6:	7f 4f       	sbci	r23, 0xFF	; 255
     1f8:	c8 01       	movw	r24, r16
     1fa:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <memmove>
     1fe:	f5 01       	movw	r30, r10
     200:	e5 53       	subi	r30, 0x35	; 53
     202:	fb 4f       	sbci	r31, 0xFB	; 251
     204:	80 81       	ld	r24, Z
     206:	f8 01       	movw	r30, r16
     208:	e2 0d       	add	r30, r2
     20a:	f3 1d       	adc	r31, r3
     20c:	80 83       	st	Z, r24
     20e:	a4 01       	movw	r20, r8
     210:	69 81       	ldd	r22, Y+1	; 0x01
     212:	7a 81       	ldd	r23, Y+2	; 0x02
     214:	c8 01       	movw	r24, r16
     216:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <strncmp>
     21a:	89 2b       	or	r24, r25
     21c:	61 f4       	brne	.+24     	; 0x236 <Read_Response+0x160>
     21e:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__data_end>
     222:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <__data_end+0x1>
     226:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <__data_end+0x2>
     22a:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <__data_end+0x3>
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Response_Status>
     234:	1a c0       	rjmp	.+52     	; 0x26a <Read_Response+0x194>
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	a8 1a       	sub	r10, r24
     23a:	b8 0a       	sbc	r11, r24
     23c:	02 c0       	rjmp	.+4      	; 0x242 <Read_Response+0x16c>
     23e:	a1 2c       	mov	r10, r1
     240:	b1 2c       	mov	r11, r1
     242:	c5 01       	movw	r24, r10
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	8c 15       	cp	r24, r12
     24a:	9d 05       	cpc	r25, r13
     24c:	ae 05       	cpc	r26, r14
     24e:	bf 05       	cpc	r27, r15
     250:	78 f2       	brcs	.-98     	; 0x1f0 <Read_Response+0x11a>
     252:	8f e9       	ldi	r24, 0x9F	; 159
     254:	9f e0       	ldi	r25, 0x0F	; 15
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <Read_Response+0x180>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <Read_Response+0x186>
     25c:	00 00       	nop
     25e:	9f ef       	ldi	r25, 0xFF	; 255
     260:	49 1a       	sub	r4, r25
     262:	59 0a       	sbc	r5, r25
     264:	69 0a       	sbc	r6, r25
     266:	79 0a       	sbc	r7, r25
     268:	72 cf       	rjmp	.-284    	; 0x14e <Read_Response+0x78>
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	9c 81       	ldd	r25, Y+4	; 0x04
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	9e bf       	out	0x3e, r25	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	8d bf       	out	0x3d, r24	; 61
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	bf 90       	pop	r11
     292:	af 90       	pop	r10
     294:	9f 90       	pop	r9
     296:	8f 90       	pop	r8
     298:	7f 90       	pop	r7
     29a:	6f 90       	pop	r6
     29c:	5f 90       	pop	r5
     29e:	4f 90       	pop	r4
     2a0:	3f 90       	pop	r3
     2a2:	2f 90       	pop	r2
     2a4:	08 95       	ret

000002a6 <ESP8266_Clear>:
     2a6:	80 ea       	ldi	r24, 0xA0	; 160
     2a8:	eb ec       	ldi	r30, 0xCB	; 203
     2aa:	f4 e0       	ldi	r31, 0x04	; 4
     2ac:	df 01       	movw	r26, r30
     2ae:	1d 92       	st	X+, r1
     2b0:	8a 95       	dec	r24
     2b2:	e9 f7       	brne	.-6      	; 0x2ae <ESP8266_Clear+0x8>
     2b4:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <Counter+0x1>
     2b8:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <Counter>
     2bc:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <pointer+0x1>
     2c0:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <pointer>
     2c4:	08 95       	ret

000002c6 <Start_Read_Response>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	ec 01       	movw	r28, r24
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Response_Status>
     2d2:	ce 01       	movw	r24, r28
     2d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <Read_Response>
     2d8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Response_Status>
     2dc:	88 23       	and	r24, r24
     2de:	c9 f3       	breq	.-14     	; 0x2d2 <Start_Read_Response+0xc>
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <WaitForExpectedResponse>:
     2e6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Start_Read_Response>
     2ea:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Response_Status>
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	11 f0       	breq	.+4      	; 0x2f6 <WaitForExpectedResponse+0x10>
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	08 95       	ret
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <SendATandExpectResponse>:
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8c 01       	movw	r16, r24
     304:	eb 01       	movw	r28, r22
     306:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
     30a:	c8 01       	movw	r24, r16
     30c:	0e 94 87 13 	call	0x270e	; 0x270e <USART_SendString>
     310:	85 e9       	ldi	r24, 0x95	; 149
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 87 13 	call	0x270e	; 0x270e <USART_SendString>
     318:	ce 01       	movw	r24, r28
     31a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <WaitForExpectedResponse>
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <SendDataExpectResponse>:
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	8c 01       	movw	r16, r24
     336:	eb 01       	movw	r28, r22
     338:	7a 01       	movw	r14, r20
     33a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
     33e:	b7 01       	movw	r22, r14
     340:	c8 01       	movw	r24, r16
     342:	0e 94 9d 13 	call	0x273a	; 0x273a <USART_SendString_len>
     346:	85 e9       	ldi	r24, 0x95	; 149
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 87 13 	call	0x270e	; 0x270e <USART_SendString>
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 73 01 	call	0x2e6	; 0x2e6 <WaitForExpectedResponse>
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <ESP8266_ApplicationMode>:
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	64 97       	sbiw	r28, 0x14	; 20
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	8e 01       	movw	r16, r28
     37c:	0f 5f       	subi	r16, 0xFF	; 255
     37e:	1f 4f       	sbci	r17, 0xFF	; 255
     380:	94 e1       	ldi	r25, 0x14	; 20
     382:	f8 01       	movw	r30, r16
     384:	11 92       	st	Z+, r1
     386:	9a 95       	dec	r25
     388:	e9 f7       	brne	.-6      	; 0x384 <ESP8266_ApplicationMode+0x22>
     38a:	1f 92       	push	r1
     38c:	8f 93       	push	r24
     38e:	84 e3       	ldi	r24, 0x34	; 52
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	1f 93       	push	r17
     398:	0f 93       	push	r16
     39a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     39e:	1c 8a       	std	Y+20, r1	; 0x14
     3a0:	6d e2       	ldi	r22, 0x2D	; 45
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	c8 01       	movw	r24, r16
     3a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	64 96       	adiw	r28, 0x14	; 20
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	08 95       	ret

000003cc <ESP8266_ConnectionMode>:
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	64 97       	sbiw	r28, 0x14	; 20
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	8e 01       	movw	r16, r28
     3e6:	0f 5f       	subi	r16, 0xFF	; 255
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	94 e1       	ldi	r25, 0x14	; 20
     3ec:	f8 01       	movw	r30, r16
     3ee:	11 92       	st	Z+, r1
     3f0:	9a 95       	dec	r25
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <ESP8266_ConnectionMode+0x22>
     3f4:	1f 92       	push	r1
     3f6:	8f 93       	push	r24
     3f8:	82 e4       	ldi	r24, 0x42	; 66
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	1f 93       	push	r17
     402:	0f 93       	push	r16
     404:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     408:	1c 8a       	std	Y+20, r1	; 0x14
     40a:	6d e2       	ldi	r22, 0x2D	; 45
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	c8 01       	movw	r24, r16
     410:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	64 96       	adiw	r28, 0x14	; 20
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <ESP8266_Begin>:
     436:	cf 93       	push	r28
     438:	c0 e0       	ldi	r28, 0x00	; 0
     43a:	11 c0       	rjmp	.+34     	; 0x45e <ESP8266_Begin+0x28>
     43c:	6d e2       	ldi	r22, 0x2D	; 45
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	8f e4       	ldi	r24, 0x4F	; 79
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     448:	81 11       	cpse	r24, r1
     44a:	0c c0       	rjmp	.+24     	; 0x464 <ESP8266_Begin+0x2e>
     44c:	6d e2       	ldi	r22, 0x2D	; 45
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	84 e5       	ldi	r24, 0x54	; 84
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     458:	81 11       	cpse	r24, r1
     45a:	04 c0       	rjmp	.+8      	; 0x464 <ESP8266_Begin+0x2e>
     45c:	cf 5f       	subi	r28, 0xFF	; 255
     45e:	c5 30       	cpi	r28, 0x05	; 5
     460:	68 f3       	brcs	.-38     	; 0x43c <ESP8266_Begin+0x6>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <ESP8266_Close>:
     468:	6d e2       	ldi	r22, 0x2D	; 45
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	87 e5       	ldi	r24, 0x57	; 87
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     474:	08 95       	ret

00000476 <ESP8266_WIFIMode>:
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	64 97       	sbiw	r28, 0x14	; 20
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8e 01       	movw	r16, r28
     490:	0f 5f       	subi	r16, 0xFF	; 255
     492:	1f 4f       	sbci	r17, 0xFF	; 255
     494:	94 e1       	ldi	r25, 0x14	; 20
     496:	f8 01       	movw	r30, r16
     498:	11 92       	st	Z+, r1
     49a:	9a 95       	dec	r25
     49c:	e9 f7       	brne	.-6      	; 0x498 <ESP8266_WIFIMode+0x22>
     49e:	1f 92       	push	r1
     4a0:	8f 93       	push	r24
     4a2:	85 e6       	ldi	r24, 0x65	; 101
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	1f 93       	push	r17
     4ac:	0f 93       	push	r16
     4ae:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     4b2:	1c 8a       	std	Y+20, r1	; 0x14
     4b4:	6d e2       	ldi	r22, 0x2D	; 45
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	c8 01       	movw	r24, r16
     4ba:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	64 96       	adiw	r28, 0x14	; 20
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <ESP8266_JoinAccessPoint>:
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	ec 97       	sbiw	r28, 0x3c	; 60
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	8e 01       	movw	r16, r28
     4fa:	0f 5f       	subi	r16, 0xFF	; 255
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
     4fe:	2c e3       	ldi	r18, 0x3C	; 60
     500:	f8 01       	movw	r30, r16
     502:	11 92       	st	Z+, r1
     504:	2a 95       	dec	r18
     506:	e9 f7       	brne	.-6      	; 0x502 <ESP8266_JoinAccessPoint+0x22>
     508:	7f 93       	push	r23
     50a:	6f 93       	push	r22
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	82 e7       	ldi	r24, 0x72	; 114
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	1f 93       	push	r17
     51a:	0f 93       	push	r16
     51c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     520:	1c ae       	std	Y+60, r1	; 0x3c
     522:	65 e8       	ldi	r22, 0x85	; 133
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	c8 01       	movw	r24, r16
     528:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	81 11       	cpse	r24, r1
     538:	22 c0       	rjmp	.+68     	; 0x57e <ESP8266_JoinAccessPoint+0x9e>
     53a:	68 e9       	ldi	r22, 0x98	; 152
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	8b ec       	ldi	r24, 0xCB	; 203
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     546:	89 2b       	or	r24, r25
     548:	e1 f4       	brne	.+56     	; 0x582 <ESP8266_JoinAccessPoint+0xa2>
     54a:	61 ea       	ldi	r22, 0xA1	; 161
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	8b ec       	ldi	r24, 0xCB	; 203
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     556:	89 2b       	or	r24, r25
     558:	b1 f4       	brne	.+44     	; 0x586 <ESP8266_JoinAccessPoint+0xa6>
     55a:	6a ea       	ldi	r22, 0xAA	; 170
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	8b ec       	ldi	r24, 0xCB	; 203
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     566:	89 2b       	or	r24, r25
     568:	81 f4       	brne	.+32     	; 0x58a <ESP8266_JoinAccessPoint+0xaa>
     56a:	63 eb       	ldi	r22, 0xB3	; 179
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	8b ec       	ldi	r24, 0xCB	; 203
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     576:	89 2b       	or	r24, r25
     578:	51 f0       	breq	.+20     	; 0x58e <ESP8266_JoinAccessPoint+0xae>
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	09 c0       	rjmp	.+18     	; 0x590 <ESP8266_JoinAccessPoint+0xb0>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	07 c0       	rjmp	.+14     	; 0x590 <ESP8266_JoinAccessPoint+0xb0>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	05 c0       	rjmp	.+10     	; 0x590 <ESP8266_JoinAccessPoint+0xb0>
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	03 c0       	rjmp	.+6      	; 0x590 <ESP8266_JoinAccessPoint+0xb0>
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	01 c0       	rjmp	.+2      	; 0x590 <ESP8266_JoinAccessPoint+0xb0>
     58e:	85 e0       	ldi	r24, 0x05	; 5
     590:	ec 96       	adiw	r28, 0x3c	; 60
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	08 95       	ret

000005a6 <ESP8266_connected>:
     5a6:	6d e2       	ldi	r22, 0x2D	; 45
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	8c eb       	ldi	r24, 0xBC	; 188
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     5b2:	69 ec       	ldi	r22, 0xC9	; 201
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	8b ec       	ldi	r24, 0xCB	; 203
     5b8:	94 e0       	ldi	r25, 0x04	; 4
     5ba:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     5be:	89 2b       	or	r24, r25
     5c0:	d1 f4       	brne	.+52     	; 0x5f6 <ESP8266_connected+0x50>
     5c2:	62 ed       	ldi	r22, 0xD2	; 210
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	8b ec       	ldi	r24, 0xCB	; 203
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     5ce:	89 2b       	or	r24, r25
     5d0:	a1 f4       	brne	.+40     	; 0x5fa <ESP8266_connected+0x54>
     5d2:	6b ed       	ldi	r22, 0xDB	; 219
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	8b ec       	ldi	r24, 0xCB	; 203
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     5de:	89 2b       	or	r24, r25
     5e0:	71 f4       	brne	.+28     	; 0x5fe <ESP8266_connected+0x58>
     5e2:	64 ee       	ldi	r22, 0xE4	; 228
     5e4:	71 e0       	ldi	r23, 0x01	; 1
     5e6:	8b ec       	ldi	r24, 0xCB	; 203
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <strstr>
     5ee:	89 2b       	or	r24, r25
     5f0:	41 f0       	breq	.+16     	; 0x602 <ESP8266_connected+0x5c>
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	08 95       	ret
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	08 95       	ret
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	08 95       	ret
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	08 95       	ret
     602:	84 e0       	ldi	r24, 0x04	; 4
     604:	08 95       	ret

00000606 <ESP8266_Start>:
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	ec 97       	sbiw	r28, 0x3c	; 60
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	d8 2e       	mov	r13, r24
     626:	16 2f       	mov	r17, r22
     628:	07 2f       	mov	r16, r23
     62a:	f4 2e       	mov	r15, r20
     62c:	e5 2e       	mov	r14, r21
     62e:	fe 01       	movw	r30, r28
     630:	31 96       	adiw	r30, 0x01	; 1
     632:	8c e3       	ldi	r24, 0x3C	; 60
     634:	df 01       	movw	r26, r30
     636:	1d 92       	st	X+, r1
     638:	8a 95       	dec	r24
     63a:	e9 f7       	brne	.-6      	; 0x636 <ESP8266_Start+0x30>
     63c:	6d ee       	ldi	r22, 0xED	; 237
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	86 ef       	ldi	r24, 0xF6	; 246
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     648:	88 23       	and	r24, r24
     64a:	a1 f0       	breq	.+40     	; 0x674 <ESP8266_Start+0x6e>
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	15 c0       	rjmp	.+42     	; 0x69e <ESP8266_Start+0x98>
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	1f 92       	push	r1
     67e:	df 92       	push	r13
     680:	8b e1       	ldi	r24, 0x1B	; 27
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	ce 01       	movw	r24, r28
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	6a e3       	ldi	r22, 0x3A	; 58
     6a0:	72 e0       	ldi	r23, 0x02	; 2
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
     6aa:	81 11       	cpse	r24, r1
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <ESP8266_Start+0xb2>
     6ae:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Response_Status>
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	19 f4       	brne	.+6      	; 0x6bc <ESP8266_Start+0xb6>
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <ESP8266_Start+0xb8>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <ESP8266_Start+0xb8>
     6bc:	85 e0       	ldi	r24, 0x05	; 5
     6be:	ec 96       	adiw	r28, 0x3c	; 60
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	08 95       	ret

000006da <ESP8266_Send_with_len>:

uint8_t ESP8266_Send_with_len(char* Data, uint16_t len)
{
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	64 97       	sbiw	r28, 0x14	; 20
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	6c 01       	movw	r12, r24
     6fc:	e6 2e       	mov	r14, r22
     6fe:	f7 2e       	mov	r15, r23
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     700:	8e 01       	movw	r16, r28
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
     706:	84 e1       	ldi	r24, 0x14	; 20
     708:	f8 01       	movw	r30, r16
     70a:	11 92       	st	Z+, r1
     70c:	8a 95       	dec	r24
     70e:	e9 f7       	brne	.-6      	; 0x70a <ESP8266_Send_with_len+0x30>
	sprintf(_atCommand, "AT+CIPSEND=%d", len);
     710:	7f 93       	push	r23
     712:	6f 93       	push	r22
     714:	84 e4       	ldi	r24, 0x44	; 68
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
     71c:	1f 93       	push	r17
     71e:	0f 93       	push	r16
     720:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
	_atCommand[19] = 0;
     724:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
     726:	62 e5       	ldi	r22, 0x52	; 82
     728:	72 e0       	ldi	r23, 0x02	; 2
     72a:	c8 01       	movw	r24, r16
     72c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SendATandExpectResponse>
	if(!SendDataExpectResponse(Data, "\r\nSEND OK\r\n", len))
     730:	4e 2d       	mov	r20, r14
     732:	5f 2d       	mov	r21, r15
     734:	6a e5       	ldi	r22, 0x5A	; 90
     736:	72 e0       	ldi	r23, 0x02	; 2
     738:	c6 01       	movw	r24, r12
     73a:	0e 94 94 01 	call	0x328	; 0x328 <SendDataExpectResponse>
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	81 11       	cpse	r24, r1
     74c:	05 c0       	rjmp	.+10     	; 0x758 <ESP8266_Send_with_len+0x7e>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     74e:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Response_Status>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	19 f4       	brne	.+6      	; 0x75c <ESP8266_Send_with_len+0x82>
     756:	03 c0       	rjmp	.+6      	; 0x75e <ESP8266_Send_with_len+0x84>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	01 c0       	rjmp	.+2      	; 0x75e <ESP8266_Send_with_len+0x84>
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
	if(!SendDataExpectResponse(Data, "\r\nSEND OK\r\n", len))
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     75c:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ESP8266_RESPONSE_FINISHED;
}
     75e:	64 96       	adiw	r28, 0x14	; 20
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	08 95       	ret

0000077c <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
	return (Counter - pointer);
     77c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Counter>
     780:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <Counter+0x1>
     784:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <pointer>
     788:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <pointer+0x1>
}
     78c:	82 1b       	sub	r24, r18
     78e:	93 0b       	sbc	r25, r19
     790:	08 95       	ret

00000792 <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
	if(pointer < Counter)
     792:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <pointer>
     796:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <pointer+0x1>
     79a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Counter>
     79e:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <Counter+0x1>
     7a2:	28 17       	cp	r18, r24
     7a4:	39 07       	cpc	r19, r25
     7a6:	84 f4       	brge	.+32     	; 0x7c8 <ESP8266_DataRead+0x36>
	return RESPONSE_BUFFER[pointer++];
     7a8:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <pointer>
     7ac:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <pointer+0x1>
     7b0:	9c 01       	movw	r18, r24
     7b2:	2f 5f       	subi	r18, 0xFF	; 255
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	30 93 75 04 	sts	0x0475, r19	; 0x800475 <pointer+0x1>
     7ba:	20 93 74 04 	sts	0x0474, r18	; 0x800474 <pointer>
     7be:	fc 01       	movw	r30, r24
     7c0:	e5 53       	subi	r30, 0x35	; 53
     7c2:	fb 4f       	sbci	r31, 0xFB	; 251
     7c4:	80 81       	ld	r24, Z
     7c6:	08 95       	ret
	else{
		ESP8266_Clear();
     7c8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
		return 0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7ce:	08 95       	ret

000007d0 <Read_Data>:

uint16_t Read_Data(char* _buffer)
{
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	7c 01       	movw	r14, r24
     7de:	2f ef       	ldi	r18, 0xFF	; 255
     7e0:	81 ee       	ldi	r24, 0xE1	; 225
     7e2:	94 e0       	ldi	r25, 0x04	; 4
     7e4:	21 50       	subi	r18, 0x01	; 1
     7e6:	80 40       	sbci	r24, 0x00	; 0
     7e8:	90 40       	sbci	r25, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <Read_Data+0x14>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <Read_Data+0x1e>
     7ee:	00 00       	nop
	uint16_t len = 0;
     7f0:	c0 e0       	ldi	r28, 0x00	; 0
     7f2:	d0 e0       	ldi	r29, 0x00	; 0
     7f4:	09 c0       	rjmp	.+18     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	{
		_buffer[len++] = ESP8266_DataRead();
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5f       	subi	r16, 0xFF	; 255
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 0d       	add	r28, r14
     7fe:	df 1d       	adc	r29, r15
     800:	0e 94 c9 03 	call	0x792	; 0x792 <ESP8266_DataRead>
     804:	88 83       	st	Y, r24
     806:	e8 01       	movw	r28, r16

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
     808:	0e 94 be 03 	call	0x77c	; 0x77c <ESP8266_DataAvailable>
     80c:	18 16       	cp	r1, r24
     80e:	19 06       	cpc	r1, r25
     810:	94 f3       	brlt	.-28     	; 0x7f6 <Read_Data+0x26>
	{
		_buffer[len++] = ESP8266_DataRead();
	}
	return len;
}
     812:	ce 01       	movw	r24, r28
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	08 95       	ret

00000822 <__vector_13>:

ISR (USART_RXC_vect)
{
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	2f 93       	push	r18
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     836:	2f b7       	in	r18, 0x3f	; 63
	cli();
     838:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR;
     83a:	e0 91 76 04 	lds	r30, 0x0476	; 0x800476 <Counter>
     83e:	f0 91 77 04 	lds	r31, 0x0477	; 0x800477 <Counter+0x1>
     842:	8c b1       	in	r24, 0x0c	; 12
     844:	e5 53       	subi	r30, 0x35	; 53
     846:	fb 4f       	sbci	r31, 0xFB	; 251
     848:	80 83       	st	Z, r24
	Counter++;
     84a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Counter>
     84e:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <Counter+0x1>
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <Counter+0x1>
     858:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
     85c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Counter>
     860:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <Counter+0x1>
     864:	80 3a       	cpi	r24, 0xA0	; 160
     866:	91 05       	cpc	r25, r1
     868:	41 f4       	brne	.+16     	; 0x87a <__stack+0x1b>
		Counter = 0; pointer = 0;
     86a:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <Counter+0x1>
     86e:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <Counter>
     872:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <pointer+0x1>
     876:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <pointer>
	}
	SREG = oldsrg;
     87a:	2f bf       	out	0x3f, r18	; 63
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	9f 91       	pop	r25
     882:	8f 91       	pop	r24
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <convertCharToHex>:
	for (int i = 0; i < len; i += 2) {
		hex[s] = (unsigned char) (convertCharToHex(hex[i]) << 4 | convertCharToHex(hex[i+1]));
		s++;
	}
	hex[s] = 0;
}
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	fc 01       	movw	r30, r24
     894:	f1 97       	sbiw	r30, 0x31	; 49
     896:	e6 31       	cpi	r30, 0x16	; 22
     898:	f1 05       	cpc	r31, r1
     89a:	20 f4       	brcc	.+8      	; 0x8a4 <convertCharToHex+0x14>
     89c:	e6 5d       	subi	r30, 0xD6	; 214
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__tablejump2__>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	08 95       	ret
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	08 95       	ret
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	08 95       	ret
     8b4:	85 e0       	ldi	r24, 0x05	; 5
     8b6:	08 95       	ret
     8b8:	86 e0       	ldi	r24, 0x06	; 6
     8ba:	08 95       	ret
     8bc:	87 e0       	ldi	r24, 0x07	; 7
     8be:	08 95       	ret
     8c0:	88 e0       	ldi	r24, 0x08	; 8
     8c2:	08 95       	ret
     8c4:	89 e0       	ldi	r24, 0x09	; 9
     8c6:	08 95       	ret
     8c8:	8a e0       	ldi	r24, 0x0A	; 10
     8ca:	08 95       	ret
     8cc:	8b e0       	ldi	r24, 0x0B	; 11
     8ce:	08 95       	ret
     8d0:	8c e0       	ldi	r24, 0x0C	; 12
     8d2:	08 95       	ret
     8d4:	8d e0       	ldi	r24, 0x0D	; 13
     8d6:	08 95       	ret
     8d8:	8e e0       	ldi	r24, 0x0E	; 14
     8da:	08 95       	ret
     8dc:	8f e0       	ldi	r24, 0x0F	; 15
     8de:	08 95       	ret
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	08 95       	ret

000008e4 <to_String_X2>:
     8e4:	99 27       	eor	r25, r25
     8e6:	ec e7       	ldi	r30, 0x7C	; 124
     8e8:	f5 e0       	ldi	r31, 0x05	; 5
     8ea:	11 82       	std	Z+1, r1	; 0x01
     8ec:	10 82       	st	Z, r1
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	86 e6       	ldi	r24, 0x66	; 102
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	ff 93       	push	r31
     8fc:	ef 93       	push	r30
     8fe:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	08 95       	ret

00000910 <to_String_X4>:
     910:	e8 e7       	ldi	r30, 0x78	; 120
     912:	f5 e0       	ldi	r31, 0x05	; 5
     914:	24 e0       	ldi	r18, 0x04	; 4
     916:	df 01       	movw	r26, r30
     918:	1d 92       	st	X+, r1
     91a:	2a 95       	dec	r18
     91c:	e9 f7       	brne	.-6      	; 0x918 <to_String_X4+0x8>
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	8b e6       	ldi	r24, 0x6B	; 107
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	ff 93       	push	r31
     92c:	ef 93       	push	r30
     92e:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	08 95       	ret

00000940 <GetCrc16>:

uint16_t GetCrc16(const uint8_t pData[], int nLength)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
	int i = 2;
	uint16_t fcs = 0xffff; // initialization
	nLength = nLength - 5;
     944:	65 50       	subi	r22, 0x05	; 5
     946:	71 09       	sbc	r23, r1
}

uint16_t GetCrc16(const uint8_t pData[], int nLength)
{
	int i = 2;
	uint16_t fcs = 0xffff; // initialization
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	3f ef       	ldi	r19, 0xFF	; 255
	hex[s] = 0;
}

uint16_t GetCrc16(const uint8_t pData[], int nLength)
{
	int i = 2;
     94c:	42 e0       	ldi	r20, 0x02	; 2
     94e:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t fcs = 0xffff; // initialization
	nLength = nLength - 5;
	while (nLength > 0) {
     950:	16 c0       	rjmp	.+44     	; 0x97e <GetCrc16+0x3e>
		fcs = (fcs >> 8) ^ crctab16[(fcs ^ pData[i]) & 0xff];
     952:	a3 2f       	mov	r26, r19
     954:	bb 27       	eor	r27, r27
     956:	fc 01       	movw	r30, r24
     958:	e4 0f       	add	r30, r20
     95a:	f5 1f       	adc	r31, r21
     95c:	e0 81       	ld	r30, Z
     95e:	e9 01       	movw	r28, r18
     960:	ce 27       	eor	r28, r30
     962:	fe 01       	movw	r30, r28
     964:	ff 27       	eor	r31, r31
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	e0 59       	subi	r30, 0x90	; 144
     96c:	fd 4f       	sbci	r31, 0xFD	; 253
     96e:	20 81       	ld	r18, Z
     970:	31 81       	ldd	r19, Z+1	; 0x01
     972:	2a 27       	eor	r18, r26
     974:	3b 27       	eor	r19, r27
		//USART_TxChar(pData[i]);
		nLength--;
     976:	61 50       	subi	r22, 0x01	; 1
     978:	71 09       	sbc	r23, r1
		i++;
     97a:	4f 5f       	subi	r20, 0xFF	; 255
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
uint16_t GetCrc16(const uint8_t pData[], int nLength)
{
	int i = 2;
	uint16_t fcs = 0xffff; // initialization
	nLength = nLength - 5;
	while (nLength > 0) {
     97e:	16 16       	cp	r1, r22
     980:	17 06       	cpc	r1, r23
     982:	3c f3       	brlt	.-50     	; 0x952 <GetCrc16+0x12>
		//USART_TxChar(pData[i]);
		nLength--;
		i++;
	}
	return ~fcs; // negated
     984:	c9 01       	movw	r24, r18
     986:	80 95       	com	r24
     988:	90 95       	com	r25
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <Request>:
#define DHT11_PIN 6
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
     990:	81 b3       	in	r24, 0x11	; 17
     992:	80 64       	ori	r24, 0x40	; 64
     994:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
     996:	82 b3       	in	r24, 0x12	; 18
     998:	8f 7b       	andi	r24, 0xBF	; 191
     99a:	82 bb       	out	0x12, r24	; 18
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	89 ef       	ldi	r24, 0xF9	; 249
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	90 40       	sbci	r25, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <Request+0x12>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <Request+0x1c>
     9ac:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
     9ae:	82 b3       	in	r24, 0x12	; 18
     9b0:	80 64       	ori	r24, 0x40	; 64
     9b2:	82 bb       	out	0x12, r24	; 18
     9b4:	08 95       	ret

000009b6 <Response>:
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
     9b6:	81 b3       	in	r24, 0x11	; 17
     9b8:	8f 7b       	andi	r24, 0xBF	; 191
     9ba:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
     9bc:	86 99       	sbic	0x10, 6	; 16
     9be:	fe cf       	rjmp	.-4      	; 0x9bc <Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
     9c0:	86 9b       	sbis	0x10, 6	; 16
     9c2:	fe cf       	rjmp	.-4      	; 0x9c0 <Response+0xa>
	while(PIND & (1<<DHT11_PIN));
     9c4:	86 99       	sbic	0x10, 6	; 16
     9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <Response+0xe>
}
     9c8:	08 95       	ret

000009ca <Receive_data>:

uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	19 c0       	rjmp	.+50     	; 0xa02 <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
     9d0:	86 9b       	sbis	0x10, 6	; 16
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d4:	80 ea       	ldi	r24, 0xA0	; 160
     9d6:	8a 95       	dec	r24
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
     9da:	86 9b       	sbis	0x10, 6	; 16
     9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <Receive_data+0x26>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
     9de:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <c>
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <c>
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <Receive_data+0x30>
		else			/* otherwise its logic LOW */
		c = (c<<1);
     9f0:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <c>
     9f4:	88 0f       	add	r24, r24
     9f6:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <c>
		while(PIND & (1<<DHT11_PIN));
     9fa:	86 99       	sbic	0x10, 6	; 16
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <Receive_data+0x30>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
     9fe:	2f 5f       	subi	r18, 0xFF	; 255
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	28 30       	cpi	r18, 0x08	; 8
     a04:	31 05       	cpc	r19, r1
     a06:	24 f3       	brlt	.-56     	; 0x9d0 <Receive_data+0x6>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
     a08:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <c>
     a0c:	08 95       	ret

00000a0e <ExtractTemperature>:
unsigned char ExtractTemperature(uint8_t Data2, uint8_t Data3)
{
	unsigned char temp = 0;
	temp = Data2;
	return temp;
}
     a0e:	08 95       	ret

00000a10 <ExtractHumidity>:
unsigned char ExtractHumidity(uint8_t Data0, uint8_t Data1)
{
	unsigned char hum = 0;
	hum = Data0;
	return hum;
}
     a10:	08 95       	ret

00000a12 <readDHT11Values>:
//---------------------------------------------//

void readDHT11Values()
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
	Request();		/* send start pulse */
     a16:	0e 94 c8 04 	call	0x990	; 0x990 <Request>
	Response();		/* receive response */
     a1a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Response>
	I_RH=Receive_data();	/* store first eight bit in I_RH */
     a1e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Receive_data>
     a22:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <I_RH>
	D_RH=Receive_data();	/* store next eight bit in D_RH */
     a26:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Receive_data>
     a2a:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <D_RH>
	I_Temp=Receive_data();	/* store next eight bit in I_Temp */
     a2e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Receive_data>
     a32:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <I_Temp>
	D_Temp=Receive_data();	/* store next eight bit in D_Temp */
     a36:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Receive_data>
     a3a:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <D_Temp>
	CheckSum=Receive_data();/* store next eight bit in CheckSum */
     a3e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <Receive_data>
     a42:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <CheckSum>
	
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
     a46:	c0 91 67 06 	lds	r28, 0x0667	; 0x800667 <I_RH>
     a4a:	d0 91 60 06 	lds	r29, 0x0660	; 0x800660 <D_RH>
     a4e:	2d 2f       	mov	r18, r29
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	2c 0f       	add	r18, r28
     a54:	31 1d       	adc	r19, r1
     a56:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <I_Temp>
     a5a:	29 0f       	add	r18, r25
     a5c:	31 1d       	adc	r19, r1
     a5e:	60 91 72 06 	lds	r22, 0x0672	; 0x800672 <D_Temp>
     a62:	26 0f       	add	r18, r22
     a64:	31 1d       	adc	r19, r1
     a66:	48 2f       	mov	r20, r24
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	24 17       	cp	r18, r20
     a6c:	35 07       	cpc	r19, r21
     a6e:	59 f4       	brne	.+22     	; 0xa86 <readDHT11Values+0x74>
	{
	}
	else
	{		
		temperature_sensor = ExtractTemperature(I_Temp, D_Temp);
     a70:	89 2f       	mov	r24, r25
     a72:	0e 94 07 05 	call	0xa0e	; 0xa0e <ExtractTemperature>
     a76:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <temperature_sensor>
		humidity_sensor    = ExtractHumidity(I_RH, D_RH);
     a7a:	6d 2f       	mov	r22, r29
     a7c:	8c 2f       	mov	r24, r28
     a7e:	0e 94 08 05 	call	0xa10	; 0xa10 <ExtractHumidity>
     a82:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <humidity_sensor>
	}
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <adc_init>:
	//return ADC;
//}

void adc_init()
{
	DDRA=0x00;			/* Make ADC port as input */
     a8c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
     a8e:	87 e8       	ldi	r24, 0x87	; 135
     a90:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
     a92:	80 e4       	ldi	r24, 0x40	; 64
     a94:	87 b9       	out	0x07, r24	; 7
     a96:	08 95       	ret

00000a98 <Read_ADC>:

int Read_ADC(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
     a98:	97 b1       	in	r25, 0x07	; 7
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	98 2b       	or	r25, r24
     a9e:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
     aa0:	86 b1       	in	r24, 0x06	; 6
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
     aa6:	34 9b       	sbis	0x06, 4	; 6
     aa8:	fe cf       	rjmp	.-4      	; 0xaa6 <Read_ADC+0xe>
     aaa:	85 e3       	ldi	r24, 0x35	; 53
     aac:	8a 95       	dec	r24
     aae:	f1 f7       	brne	.-4      	; 0xaac <Read_ADC+0x14>
     ab0:	00 00       	nop
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
     ab2:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
     ab4:	85 b1       	in	r24, 0x05	; 5
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	98 2f       	mov	r25, r24
     aba:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
     abc:	82 0f       	add	r24, r18
     abe:	91 1d       	adc	r25, r1
     ac0:	08 95       	ret

00000ac2 <readCurrentMeasure>:

void readCurrentMeasure()
{
     ac2:	cf 92       	push	r12
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
	adc_init();
     aca:	0e 94 46 05 	call	0xa8c	; 0xa8c <adc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	9c e9       	ldi	r25, 0x9C	; 156
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <readCurrentMeasure+0x10>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <readCurrentMeasure+0x16>
     ad8:	00 00       	nop
	_delay_ms(10);
	average = 0;
     ada:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <average>
     ade:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <average+0x1>
     ae2:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <average+0x2>
     ae6:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <average+0x3>
	for(i = 0; i<200; i++)
     aea:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <i+0x1>
     aee:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <i>
     af2:	2c c0       	rjmp	.+88     	; 0xb4c <readCurrentMeasure+0x8a>
	{
		average += Read_ADC(0);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 4c 05 	call	0xa98	; 0xa98 <Read_ADC>
     afa:	bc 01       	movw	r22, r24
     afc:	99 0f       	add	r25, r25
     afe:	88 0b       	sbc	r24, r24
     b00:	99 0b       	sbc	r25, r25
     b02:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__floatsisf>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <average>
     b0e:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <average+0x1>
     b12:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <average+0x2>
     b16:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <average+0x3>
     b1a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
     b1e:	60 93 b8 04 	sts	0x04B8, r22	; 0x8004b8 <average>
     b22:	70 93 b9 04 	sts	0x04B9, r23	; 0x8004b9 <average+0x1>
     b26:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <average+0x2>
     b2a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <average+0x3>
     b2e:	8f e9       	ldi	r24, 0x9F	; 159
     b30:	9f e0       	ldi	r25, 0x0F	; 15
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <readCurrentMeasure+0x70>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <readCurrentMeasure+0x76>
     b38:	00 00       	nop
void readCurrentMeasure()
{
	adc_init();
	_delay_ms(10);
	average = 0;
	for(i = 0; i<200; i++)
     b3a:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <i>
     b3e:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <i+0x1>
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <i+0x1>
     b48:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <i>
     b4c:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <i>
     b50:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <i+0x1>
     b54:	88 3c       	cpi	r24, 0xC8	; 200
     b56:	91 05       	cpc	r25, r1
     b58:	6c f2       	brlt	.-102    	; 0xaf4 <readCurrentMeasure+0x32>
	{
		average += Read_ADC(0);
		_delay_ms(1);
	}
	average = average/200;
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	48 e4       	ldi	r20, 0x48	; 72
     b60:	53 e4       	ldi	r21, 0x43	; 67
     b62:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <average>
     b66:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <average+0x1>
     b6a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <average+0x2>
     b6e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <average+0x3>
     b72:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     b76:	60 93 b8 04 	sts	0x04B8, r22	; 0x8004b8 <average>
     b7a:	70 93 b9 04 	sts	0x04B9, r23	; 0x8004b9 <average+0x1>
     b7e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <average+0x2>
     b82:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <average+0x3>
	curr_adc_value = (long) average;
     b86:	0e 94 98 14 	call	0x2930	; 0x2930 <__fixsfsi>
     b8a:	6b 01       	movw	r12, r22
     b8c:	7c 01       	movw	r14, r24
     b8e:	60 93 5c 06 	sts	0x065C, r22	; 0x80065c <curr_adc_value>
     b92:	70 93 5d 06 	sts	0x065D, r23	; 0x80065d <curr_adc_value+0x1>
     b96:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <curr_adc_value+0x2>
     b9a:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <curr_adc_value+0x3>
	v_mv = (curr_adc_value * 5000) / 1024.0;
     b9e:	a8 e8       	ldi	r26, 0x88	; 136
     ba0:	b3 e1       	ldi	r27, 0x13	; 19
     ba2:	9b 01       	movw	r18, r22
     ba4:	ac 01       	movw	r20, r24
     ba6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__muluhisi3>
     baa:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__floatsisf>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5a e3       	ldi	r21, 0x3A	; 58
     bb6:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
     bba:	0e 94 98 14 	call	0x2930	; 0x2930 <__fixsfsi>
     bbe:	60 93 c0 04 	sts	0x04C0, r22	; 0x8004c0 <v_mv>
     bc2:	70 93 c1 04 	sts	0x04C1, r23	; 0x8004c1 <v_mv+0x1>
     bc6:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <v_mv+0x2>
     bca:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <v_mv+0x3>
	//current_measure = ((v_mv - 2500) * 1000) / (185);
	curr_v = ((curr_adc_value*(5.0/1024.0)) - 2.5)/(0.185 * 2);
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__floatsisf>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 ea       	ldi	r20, 0xA0	; 160
     bdc:	5b e3       	ldi	r21, 0x3B	; 59
     bde:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	0e 94 b9 13 	call	0x2772	; 0x2772 <__subsf3>
     bee:	24 ea       	ldi	r18, 0xA4	; 164
     bf0:	30 e7       	ldi	r19, 0x70	; 112
     bf2:	4d eb       	ldi	r20, 0xBD	; 189
     bf4:	5e e3       	ldi	r21, 0x3E	; 62
     bf6:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     bfa:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <curr_v>
     bfe:	70 93 c5 04 	sts	0x04C5, r23	; 0x8004c5 <curr_v+0x1>
     c02:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <curr_v+0x2>
     c06:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <curr_v+0x3>
	current_measure = (long) (curr_v * 1000);
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	4a e7       	ldi	r20, 0x7A	; 122
     c10:	54 e4       	ldi	r21, 0x44	; 68
     c12:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
     c16:	0e 94 98 14 	call	0x2930	; 0x2930 <__fixsfsi>
     c1a:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <current_measure>
     c1e:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <current_measure+0x1>
     c22:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <current_measure+0x2>
     c26:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <current_measure+0x3>
	if(current_measure < 0)
     c2a:	99 23       	and	r25, r25
     c2c:	8c f4       	brge	.+34     	; 0xc50 <readCurrentMeasure+0x18e>
	{
		current_measure = -1 * current_measure;
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	88 27       	eor	r24, r24
     c34:	99 27       	eor	r25, r25
     c36:	dc 01       	movw	r26, r24
     c38:	82 1b       	sub	r24, r18
     c3a:	93 0b       	sbc	r25, r19
     c3c:	a4 0b       	sbc	r26, r20
     c3e:	b5 0b       	sbc	r27, r21
     c40:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <current_measure>
     c44:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <current_measure+0x1>
     c48:	a0 93 be 04 	sts	0x04BE, r26	; 0x8004be <current_measure+0x2>
     c4c:	b0 93 bf 04 	sts	0x04BF, r27	; 0x8004bf <current_measure+0x3>
	}
	if(current_measure < 35)
     c50:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <current_measure>
     c54:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <current_measure+0x1>
     c58:	a0 91 be 04 	lds	r26, 0x04BE	; 0x8004be <current_measure+0x2>
     c5c:	b0 91 bf 04 	lds	r27, 0x04BF	; 0x8004bf <current_measure+0x3>
     c60:	83 97       	sbiw	r24, 0x23	; 35
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	44 f4       	brge	.+16     	; 0xc78 <readCurrentMeasure+0x1b6>
	{
		current_measure = 0;
     c68:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <current_measure>
     c6c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <current_measure+0x1>
     c70:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <current_measure+0x2>
     c74:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <current_measure+0x3>
	}
}
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	08 95       	ret

00000c82 <readVoltageMeasure>:

void readVoltageMeasure()
{
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	8f e3       	ldi	r24, 0x3F	; 63
     c94:	9c e9       	ldi	r25, 0x9C	; 156
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <readVoltageMeasure+0x14>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <readVoltageMeasure+0x1a>
     c9c:	00 00       	nop
	_delay_ms(10);
	adc_init();
     c9e:	0e 94 46 05 	call	0xa8c	; 0xa8c <adc_init>
     ca2:	8f e3       	ldi	r24, 0x3F	; 63
     ca4:	9c e9       	ldi	r25, 0x9C	; 156
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <readVoltageMeasure+0x24>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <readVoltageMeasure+0x2a>
     cac:	00 00       	nop
	_delay_ms(10);
	adc_value = Read_ADC(0x02);
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	0e 94 4c 05 	call	0xa98	; 0xa98 <Read_ADC>
     cb4:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <adc_value+0x1>
     cb8:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <adc_value>
	adc_voltage  = (adc_value * ref_voltage) / 1024.0;
     cbc:	bc 01       	movw	r22, r24
     cbe:	99 0f       	add	r25, r25
     cc0:	88 0b       	sbc	r24, r24
     cc2:	99 0b       	sbc	r25, r25
     cc4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__floatsisf>
     cc8:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <ref_voltage>
     ccc:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <ref_voltage+0x1>
     cd0:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <ref_voltage+0x2>
     cd4:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <ref_voltage+0x3>
     cd8:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5a e3       	ldi	r21, 0x3A	; 58
     ce4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
     ce8:	6b 01       	movw	r12, r22
     cea:	7c 01       	movw	r14, r24
     cec:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <adc_voltage>
     cf0:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <adc_voltage+0x1>
     cf4:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <adc_voltage+0x2>
     cf8:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <adc_voltage+0x3>
	in_voltage = adc_voltage / (R2/(R1+R2)) ;
     cfc:	80 90 25 01 	lds	r8, 0x0125	; 0x800125 <R2>
     d00:	90 90 26 01 	lds	r9, 0x0126	; 0x800126 <R2+0x1>
     d04:	a0 90 27 01 	lds	r10, 0x0127	; 0x800127 <R2+0x2>
     d08:	b0 90 28 01 	lds	r11, 0x0128	; 0x800128 <R2+0x3>
     d0c:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <R1>
     d10:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <R1+0x1>
     d14:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <R1+0x2>
     d18:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <R1+0x3>
     d1c:	c5 01       	movw	r24, r10
     d1e:	b4 01       	movw	r22, r8
     d20:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
     d24:	9b 01       	movw	r18, r22
     d26:	ac 01       	movw	r20, r24
     d28:	c5 01       	movw	r24, r10
     d2a:	b4 01       	movw	r22, r8
     d2c:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	c7 01       	movw	r24, r14
     d36:	b6 01       	movw	r22, r12
     d38:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     d3c:	60 93 aa 04 	sts	0x04AA, r22	; 0x8004aa <in_voltage>
     d40:	70 93 ab 04 	sts	0x04AB, r23	; 0x8004ab <in_voltage+0x1>
     d44:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <in_voltage+0x2>
     d48:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <in_voltage+0x3>
	voltage_measure = (long)(in_voltage * 1000);
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	4a e7       	ldi	r20, 0x7A	; 122
     d52:	54 e4       	ldi	r21, 0x44	; 68
     d54:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
     d58:	0e 94 98 14 	call	0x2930	; 0x2930 <__fixsfsi>
     d5c:	60 93 b4 04 	sts	0x04B4, r22	; 0x8004b4 <voltage_measure>
     d60:	70 93 b5 04 	sts	0x04B5, r23	; 0x8004b5 <voltage_measure+0x1>
     d64:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <voltage_measure+0x2>
     d68:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <voltage_measure+0x3>
}
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	08 95       	ret

00000d7e <get_actual_response>:

#ifndef parser_region

void get_actual_response()
{
	resp_len = 0;
     d7e:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <resp_len+0x1>
     d82:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <resp_len>
	memset(response_length, 0, sizeof(response_length));
     d86:	86 e0       	ldi	r24, 0x06	; 6
     d88:	ee e9       	ldi	r30, 0x9E	; 158
     d8a:	f4 e0       	ldi	r31, 0x04	; 4
     d8c:	df 01       	movw	r26, r30
     d8e:	1d 92       	st	X+, r1
     d90:	8a 95       	dec	r24
     d92:	e9 f7       	brne	.-6      	; 0xd8e <get_actual_response+0x10>
	index = 0;
     d94:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <index+0x1>
     d98:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <index>
	resp_ind = 0;
     d9c:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <resp_ind+0x1>
     da0:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <resp_ind>
	start_index = 0;
     da4:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <start_index+0x1>
     da8:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <start_index>
	resp_len_on = 0;
     dac:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <resp_len_on+0x1>
     db0:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <resp_len_on>
	memset(server_response,0,sizeof(server_response));
     db4:	80 e4       	ldi	r24, 0x40	; 64
     db6:	e8 e1       	ldi	r30, 0x18	; 24
     db8:	f6 e0       	ldi	r31, 0x06	; 6
     dba:	df 01       	movw	r26, r30
     dbc:	1d 92       	st	X+, r1
     dbe:	8a 95       	dec	r24
     dc0:	e9 f7       	brne	.-6      	; 0xdbc <get_actual_response+0x3e>
	for(ind = 0; ind < sizeof(_buffer); ind++)
     dc2:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <ind+0x1>
     dc6:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <ind>
     dca:	33 c0       	rjmp	.+102    	; 0xe32 <get_actual_response+0xb4>
	{
		if(_buffer[ind] == ',')
     dcc:	fc 01       	movw	r30, r24
     dce:	e2 57       	subi	r30, 0x72	; 114
     dd0:	fa 4f       	sbci	r31, 0xFA	; 250
     dd2:	20 81       	ld	r18, Z
     dd4:	2c 32       	cpi	r18, 0x2C	; 44
     dd6:	39 f4       	brne	.+14     	; 0xde6 <get_actual_response+0x68>
		{
			resp_len_on = 1;
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	30 93 97 04 	sts	0x0497, r19	; 0x800497 <resp_len_on+0x1>
     de0:	20 93 96 04 	sts	0x0496, r18	; 0x800496 <resp_len_on>
			continue;
     de4:	21 c0       	rjmp	.+66     	; 0xe28 <get_actual_response+0xaa>
		}
		if(_buffer[ind] == ':')
     de6:	2a 33       	cpi	r18, 0x3A	; 58
     de8:	51 f4       	brne	.+20     	; 0xdfe <get_actual_response+0x80>
		{
			resp_len_on = 0;
     dea:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <resp_len_on+0x1>
     dee:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <resp_len_on>
			start_index = ind + 1;
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <start_index+0x1>
     df8:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <start_index>
			break;
     dfc:	21 c0       	rjmp	.+66     	; 0xe40 <get_actual_response+0xc2>
		}
		if(resp_len_on == 1)
     dfe:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <resp_len_on>
     e02:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <resp_len_on+0x1>
     e06:	41 30       	cpi	r20, 0x01	; 1
     e08:	51 05       	cpc	r21, r1
     e0a:	71 f4       	brne	.+28     	; 0xe28 <get_actual_response+0xaa>
		{
			response_length[index] = _buffer[ind]; index++;
     e0c:	40 91 9c 04 	lds	r20, 0x049C	; 0x80049c <index>
     e10:	50 91 9d 04 	lds	r21, 0x049D	; 0x80049d <index+0x1>
     e14:	fa 01       	movw	r30, r20
     e16:	e2 56       	subi	r30, 0x62	; 98
     e18:	fb 4f       	sbci	r31, 0xFB	; 251
     e1a:	20 83       	st	Z, r18
     e1c:	4f 5f       	subi	r20, 0xFF	; 255
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	50 93 9d 04 	sts	0x049D, r21	; 0x80049d <index+0x1>
     e24:	40 93 9c 04 	sts	0x049C, r20	; 0x80049c <index>
	index = 0;
	resp_ind = 0;
	start_index = 0;
	resp_len_on = 0;
	memset(server_response,0,sizeof(server_response));
	for(ind = 0; ind < sizeof(_buffer); ind++)
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ind+0x1>
     e2e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ind>
     e32:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <ind>
     e36:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <ind+0x1>
     e3a:	80 38       	cpi	r24, 0x80	; 128
     e3c:	91 05       	cpc	r25, r1
     e3e:	30 f2       	brcs	.-116    	; 0xdcc <get_actual_response+0x4e>
		{
			response_length[index] = _buffer[ind]; index++;
		}
	}
	
	resp_len = atoi(response_length);
     e40:	8e e9       	ldi	r24, 0x9E	; 158
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <atoi>
     e48:	ac 01       	movw	r20, r24
     e4a:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <resp_len+0x1>
     e4e:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <resp_len>
	for(index = 0; index < resp_len; index++)
     e52:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <index+0x1>
     e56:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <index>
     e5a:	13 c0       	rjmp	.+38     	; 0xe82 <get_actual_response+0x104>
	{
		server_response[index] = _buffer[start_index + index];
     e5c:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <start_index>
     e60:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <start_index+0x1>
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	e2 57       	subi	r30, 0x72	; 114
     e6a:	fa 4f       	sbci	r31, 0xFA	; 250
     e6c:	90 81       	ld	r25, Z
     e6e:	f9 01       	movw	r30, r18
     e70:	e8 5e       	subi	r30, 0xE8	; 232
     e72:	f9 4f       	sbci	r31, 0xF9	; 249
     e74:	90 83       	st	Z, r25
			response_length[index] = _buffer[ind]; index++;
		}
	}
	
	resp_len = atoi(response_length);
	for(index = 0; index < resp_len; index++)
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <index+0x1>
     e7e:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <index>
     e82:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <index>
     e86:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <index+0x1>
     e8a:	24 17       	cp	r18, r20
     e8c:	35 07       	cpc	r19, r21
     e8e:	34 f3       	brlt	.-52     	; 0xe5c <get_actual_response+0xde>
	{
		server_response[index] = _buffer[start_index + index];
	}
}
     e90:	08 95       	ret

00000e92 <genLoginMessage>:
#endif

#ifndef gen_messages_region

void genLoginMessage(uint8_t imei_num[])
{
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	7c 01       	movw	r14, r24
	uint16_t dataLength = 26;
	uint8_t direction = 1;
	memset(_buffer, 0, sizeof(_buffer));
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	ee e8       	ldi	r30, 0x8E	; 142
     ea6:	f5 e0       	ldi	r31, 0x05	; 5
     ea8:	df 01       	movw	r26, r30
     eaa:	1d 92       	st	X+, r1
     eac:	8a 95       	dec	r24
     eae:	e9 f7       	brne	.-6      	; 0xeaa <genLoginMessage+0x18>
	to_String_X2(0xff);
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
     eb8:	6c e7       	ldi	r22, 0x7C	; 124
     eba:	75 e0       	ldi	r23, 0x05	; 5
     ebc:	8e e8       	ldi	r24, 0x8E	; 142
     ebe:	95 e0       	ldi	r25, 0x05	; 5
     ec0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
     ec4:	8a e1       	ldi	r24, 0x1A	; 26
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
     ecc:	6c e7       	ldi	r22, 0x7C	; 124
     ece:	75 e0       	ldi	r23, 0x05	; 5
     ed0:	8e e8       	ldi	r24, 0x8E	; 142
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
     ee0:	6c e7       	ldi	r22, 0x7C	; 124
     ee2:	75 e0       	ldi	r23, 0x05	; 5
     ee4:	8e e8       	ldi	r24, 0x8E	; 142
     ee6:	95 e0       	ldi	r25, 0x05	; 5
     ee8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x01);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
     ef4:	6c e7       	ldi	r22, 0x7C	; 124
     ef6:	75 e0       	ldi	r23, 0x05	; 5
     ef8:	8e e8       	ldi	r24, 0x8E	; 142
     efa:	95 e0       	ldi	r25, 0x05	; 5
     efc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
     f00:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
     f04:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
     f08:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
     f0c:	6c e7       	ldi	r22, 0x7C	; 124
     f0e:	75 e0       	ldi	r23, 0x05	; 5
     f10:	8e e8       	ldi	r24, 0x8E	; 142
     f12:	95 e0       	ldi	r25, 0x05	; 5
     f14:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
     f18:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
     f1c:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
     f20:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
     f24:	6c e7       	ldi	r22, 0x7C	; 124
     f26:	75 e0       	ldi	r23, 0x05	; 5
     f28:	8e e8       	ldi	r24, 0x8E	; 142
     f2a:	95 e0       	ldi	r25, 0x05	; 5
     f2c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
     f30:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
     f34:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
     f38:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
     f3c:	6c e7       	ldi	r22, 0x7C	; 124
     f3e:	75 e0       	ldi	r23, 0x05	; 5
     f40:	8e e8       	ldi	r24, 0x8E	; 142
     f42:	95 e0       	ldi	r25, 0x05	; 5
     f44:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
     f48:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
     f4c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
     f50:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
     f54:	6c e7       	ldi	r22, 0x7C	; 124
     f56:	75 e0       	ldi	r23, 0x05	; 5
     f58:	8e e8       	ldi	r24, 0x8E	; 142
     f5a:	95 e0       	ldi	r25, 0x05	; 5
     f5c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
     f60:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
     f64:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
     f68:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
     f6c:	6c e7       	ldi	r22, 0x7C	; 124
     f6e:	75 e0       	ldi	r23, 0x05	; 5
     f70:	8e e8       	ldi	r24, 0x8E	; 142
     f72:	95 e0       	ldi	r25, 0x05	; 5
     f74:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
     f78:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
     f7c:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
     f80:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
     f84:	6c e7       	ldi	r22, 0x7C	; 124
     f86:	75 e0       	ldi	r23, 0x05	; 5
     f88:	8e e8       	ldi	r24, 0x8E	; 142
     f8a:	95 e0       	ldi	r25, 0x05	; 5
     f8c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	for(k = 0; k < 15; k++)
     f90:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <k+0x1>
     f94:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <k>
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <genLoginMessage+0x134>
	{
		to_String_X2(imei_num[k]);
     f9a:	f7 01       	movw	r30, r14
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
     fa0:	80 81       	ld	r24, Z
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
		strcat(_buffer, value_2); // 1 (IMEI[k])
     fa8:	6c e7       	ldi	r22, 0x7C	; 124
     faa:	75 e0       	ldi	r23, 0x05	; 5
     fac:	8e e8       	ldi	r24, 0x8E	; 142
     fae:	95 e0       	ldi	r25, 0x05	; 5
     fb0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	strcat(_buffer, value_2); // 1 (hour)
	to_String_X2(minute);
	strcat(_buffer, value_2); // 1 (minute)
	to_String_X2(second);
	strcat(_buffer, value_2); // 1 (second)
	for(k = 0; k < 15; k++)
     fb4:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
     fb8:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <k+0x1>
     fc2:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <k>
     fc6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
     fca:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
     fce:	8f 30       	cpi	r24, 0x0F	; 15
     fd0:	91 05       	cpc	r25, r1
     fd2:	1c f3       	brlt	.-58     	; 0xf9a <genLoginMessage+0x108>
	{
		to_String_X2(imei_num[k]);
		strcat(_buffer, value_2); // 1 (IMEI[k])
	}
	to_String_X4(0x00);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
     fdc:	68 e7       	ldi	r22, 0x78	; 120
     fde:	75 e0       	ldi	r23, 0x05	; 5
     fe0:	8e e8       	ldi	r24, 0x8E	; 142
     fe2:	95 e0       	ldi	r25, 0x05	; 5
     fe4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
     fe8:	8d ec       	ldi	r24, 0xCD	; 205
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
     ff0:	6c e7       	ldi	r22, 0x7C	; 124
     ff2:	75 e0       	ldi	r23, 0x05	; 5
     ff4:	8e e8       	ldi	r24, 0x8E	; 142
     ff6:	95 e0       	ldi	r25, 0x05	; 5
     ff8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	checkSum_index = 0;
     ffc:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    1000:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1004:	c1 2c       	mov	r12, r1
    1006:	d1 2c       	mov	r13, r1
    1008:	c0 e0       	ldi	r28, 0x00	; 0
    100a:	d0 e0       	ldi	r29, 0x00	; 0
    100c:	21 c0       	rjmp	.+66     	; 0x1050 <genLoginMessage+0x1be>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    100e:	fe 01       	movw	r30, r28
    1010:	e2 57       	subi	r30, 0x72	; 114
    1012:	fa 4f       	sbci	r31, 0xFA	; 250
    1014:	80 81       	ld	r24, Z
    1016:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    101a:	18 2f       	mov	r17, r24
    101c:	12 95       	swap	r17
    101e:	10 7f       	andi	r17, 0xF0	; 240
    1020:	fe 01       	movw	r30, r28
    1022:	e1 57       	subi	r30, 0x71	; 113
    1024:	fa 4f       	sbci	r31, 0xFA	; 250
    1026:	80 81       	ld	r24, Z
    1028:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    102c:	f6 01       	movw	r30, r12
    102e:	e2 57       	subi	r30, 0x72	; 114
    1030:	fa 4f       	sbci	r31, 0xFA	; 250
    1032:	81 2b       	or	r24, r17
    1034:	80 83       	st	Z, r24
		checkSum_index++;
    1036:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    103a:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    1044:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X4(0x00);
	strcat(_buffer, value_4); // 4 (CheckSum)
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1048:	22 96       	adiw	r28, 0x02	; 2
    104a:	bf ef       	ldi	r27, 0xFF	; 255
    104c:	cb 1a       	sub	r12, r27
    104e:	db 0a       	sbc	r13, r27
    1050:	c8 33       	cpi	r28, 0x38	; 56
    1052:	d1 05       	cpc	r29, r1
    1054:	e0 f2       	brcs	.-72     	; 0x100e <genLoginMessage+0x17c>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
	check_sum = GetCrc16(_buffer, checkSum_index);
    1056:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <checkSum_index>
    105a:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <checkSum_index+0x1>
    105e:	8e e8       	ldi	r24, 0x8E	; 142
    1060:	95 e0       	ldi	r25, 0x05	; 5
    1062:	0e 94 a0 04 	call	0x940	; 0x940 <GetCrc16>
    1066:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <check_sum+0x1>
    106a:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <check_sum>
	
	memset(_buffer, 0, sizeof(_buffer));
    106e:	80 e8       	ldi	r24, 0x80	; 128
    1070:	ee e8       	ldi	r30, 0x8E	; 142
    1072:	f5 e0       	ldi	r31, 0x05	; 5
    1074:	df 01       	movw	r26, r30
    1076:	1d 92       	st	X+, r1
    1078:	8a 95       	dec	r24
    107a:	e9 f7       	brne	.-6      	; 0x1076 <genLoginMessage+0x1e4>
	to_String_X2(0xff);
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    1084:	6c e7       	ldi	r22, 0x7C	; 124
    1086:	75 e0       	ldi	r23, 0x05	; 5
    1088:	8e e8       	ldi	r24, 0x8E	; 142
    108a:	95 e0       	ldi	r25, 0x05	; 5
    108c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    1090:	8a e1       	ldi	r24, 0x1A	; 26
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    1098:	6c e7       	ldi	r22, 0x7C	; 124
    109a:	75 e0       	ldi	r23, 0x05	; 5
    109c:	8e e8       	ldi	r24, 0x8E	; 142
    109e:	95 e0       	ldi	r25, 0x05	; 5
    10a0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    10ac:	6c e7       	ldi	r22, 0x7C	; 124
    10ae:	75 e0       	ldi	r23, 0x05	; 5
    10b0:	8e e8       	ldi	r24, 0x8E	; 142
    10b2:	95 e0       	ldi	r25, 0x05	; 5
    10b4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x01);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    10c0:	6c e7       	ldi	r22, 0x7C	; 124
    10c2:	75 e0       	ldi	r23, 0x05	; 5
    10c4:	8e e8       	ldi	r24, 0x8E	; 142
    10c6:	95 e0       	ldi	r25, 0x05	; 5
    10c8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    10cc:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    10d0:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    10d4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    10d8:	6c e7       	ldi	r22, 0x7C	; 124
    10da:	75 e0       	ldi	r23, 0x05	; 5
    10dc:	8e e8       	ldi	r24, 0x8E	; 142
    10de:	95 e0       	ldi	r25, 0x05	; 5
    10e0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    10e4:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    10e8:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    10ec:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    10f0:	6c e7       	ldi	r22, 0x7C	; 124
    10f2:	75 e0       	ldi	r23, 0x05	; 5
    10f4:	8e e8       	ldi	r24, 0x8E	; 142
    10f6:	95 e0       	ldi	r25, 0x05	; 5
    10f8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    10fc:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    1100:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    1104:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    1108:	6c e7       	ldi	r22, 0x7C	; 124
    110a:	75 e0       	ldi	r23, 0x05	; 5
    110c:	8e e8       	ldi	r24, 0x8E	; 142
    110e:	95 e0       	ldi	r25, 0x05	; 5
    1110:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    1114:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    1118:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    111c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    1120:	6c e7       	ldi	r22, 0x7C	; 124
    1122:	75 e0       	ldi	r23, 0x05	; 5
    1124:	8e e8       	ldi	r24, 0x8E	; 142
    1126:	95 e0       	ldi	r25, 0x05	; 5
    1128:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    112c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    1130:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    1134:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    1138:	6c e7       	ldi	r22, 0x7C	; 124
    113a:	75 e0       	ldi	r23, 0x05	; 5
    113c:	8e e8       	ldi	r24, 0x8E	; 142
    113e:	95 e0       	ldi	r25, 0x05	; 5
    1140:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    1144:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    1148:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    114c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    1150:	6c e7       	ldi	r22, 0x7C	; 124
    1152:	75 e0       	ldi	r23, 0x05	; 5
    1154:	8e e8       	ldi	r24, 0x8E	; 142
    1156:	95 e0       	ldi	r25, 0x05	; 5
    1158:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	for(k = 0; k < 15; k++)
    115c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <k+0x1>
    1160:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <k>
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <genLoginMessage+0x300>
	{
		to_String_X2(imei_num[k]);
    1166:	f7 01       	movw	r30, r14
    1168:	e8 0f       	add	r30, r24
    116a:	f9 1f       	adc	r31, r25
    116c:	80 81       	ld	r24, Z
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
		strcat(_buffer, value_2); // 1 (IMEI[k])
    1174:	6c e7       	ldi	r22, 0x7C	; 124
    1176:	75 e0       	ldi	r23, 0x05	; 5
    1178:	8e e8       	ldi	r24, 0x8E	; 142
    117a:	95 e0       	ldi	r25, 0x05	; 5
    117c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	strcat(_buffer, value_2); // 1 (hour)
	to_String_X2(minute);
	strcat(_buffer, value_2); // 1 (minute)
	to_String_X2(second);
	strcat(_buffer, value_2); // 1 (second)
	for(k = 0; k < 15; k++)
    1180:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
    1184:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <k+0x1>
    118e:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <k>
    1192:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
    1196:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
    119a:	8f 30       	cpi	r24, 0x0F	; 15
    119c:	91 05       	cpc	r25, r1
    119e:	1c f3       	brlt	.-58     	; 0x1166 <genLoginMessage+0x2d4>
	{
		to_String_X2(imei_num[k]);
		strcat(_buffer, value_2); // 1 (IMEI[k])
	}
	to_String_X4(check_sum);
    11a0:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <check_sum>
    11a4:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <check_sum+0x1>
    11a8:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    11ac:	68 e7       	ldi	r22, 0x78	; 120
    11ae:	75 e0       	ldi	r23, 0x05	; 5
    11b0:	8e e8       	ldi	r24, 0x8E	; 142
    11b2:	95 e0       	ldi	r25, 0x05	; 5
    11b4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    11b8:	8d ec       	ldi	r24, 0xCD	; 205
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    11c0:	6c e7       	ldi	r22, 0x7C	; 124
    11c2:	75 e0       	ldi	r23, 0x05	; 5
    11c4:	8e e8       	ldi	r24, 0x8E	; 142
    11c6:	95 e0       	ldi	r25, 0x05	; 5
    11c8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
    11cc:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    11d0:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    11d4:	e1 2c       	mov	r14, r1
    11d6:	f1 2c       	mov	r15, r1
    11d8:	c0 e0       	ldi	r28, 0x00	; 0
    11da:	d0 e0       	ldi	r29, 0x00	; 0
    11dc:	21 c0       	rjmp	.+66     	; 0x1220 <genLoginMessage+0x38e>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    11de:	fe 01       	movw	r30, r28
    11e0:	e2 57       	subi	r30, 0x72	; 114
    11e2:	fa 4f       	sbci	r31, 0xFA	; 250
    11e4:	80 81       	ld	r24, Z
    11e6:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    11ea:	18 2f       	mov	r17, r24
    11ec:	12 95       	swap	r17
    11ee:	10 7f       	andi	r17, 0xF0	; 240
    11f0:	fe 01       	movw	r30, r28
    11f2:	e1 57       	subi	r30, 0x71	; 113
    11f4:	fa 4f       	sbci	r31, 0xFA	; 250
    11f6:	80 81       	ld	r24, Z
    11f8:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    11fc:	f7 01       	movw	r30, r14
    11fe:	e2 57       	subi	r30, 0x72	; 114
    1200:	fa 4f       	sbci	r31, 0xFA	; 250
    1202:	81 2b       	or	r24, r17
    1204:	80 83       	st	Z, r24
		checkSum_index++;
    1206:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    120a:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    1214:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1218:	22 96       	adiw	r28, 0x02	; 2
    121a:	bf ef       	ldi	r27, 0xFF	; 255
    121c:	eb 1a       	sub	r14, r27
    121e:	fb 0a       	sbc	r15, r27
    1220:	c8 33       	cpi	r28, 0x38	; 56
    1222:	d1 05       	cpc	r29, r1
    1224:	e0 f2       	brcs	.-72     	; 0x11de <genLoginMessage+0x34c>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <genheartbeatMessage>:

void genheartbeatMessage()
{
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
	uint16_t dataLength = 12;
	uint8_t direction = 1;
	uint8_t content = 1;
	memset(_buffer, 0, sizeof(_buffer));
    1240:	80 e8       	ldi	r24, 0x80	; 128
    1242:	ee e8       	ldi	r30, 0x8E	; 142
    1244:	f5 e0       	ldi	r31, 0x05	; 5
    1246:	df 01       	movw	r26, r30
    1248:	1d 92       	st	X+, r1
    124a:	8a 95       	dec	r24
    124c:	e9 f7       	brne	.-6      	; 0x1248 <genheartbeatMessage+0x12>
	to_String_X2(0xff);
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    1256:	6c e7       	ldi	r22, 0x7C	; 124
    1258:	75 e0       	ldi	r23, 0x05	; 5
    125a:	8e e8       	ldi	r24, 0x8E	; 142
    125c:	95 e0       	ldi	r25, 0x05	; 5
    125e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    1262:	8c e0       	ldi	r24, 0x0C	; 12
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    126a:	6c e7       	ldi	r22, 0x7C	; 124
    126c:	75 e0       	ldi	r23, 0x05	; 5
    126e:	8e e8       	ldi	r24, 0x8E	; 142
    1270:	95 e0       	ldi	r25, 0x05	; 5
    1272:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    127e:	6c e7       	ldi	r22, 0x7C	; 124
    1280:	75 e0       	ldi	r23, 0x05	; 5
    1282:	8e e8       	ldi	r24, 0x8E	; 142
    1284:	95 e0       	ldi	r25, 0x05	; 5
    1286:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x02);
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    1292:	6c e7       	ldi	r22, 0x7C	; 124
    1294:	75 e0       	ldi	r23, 0x05	; 5
    1296:	8e e8       	ldi	r24, 0x8E	; 142
    1298:	95 e0       	ldi	r25, 0x05	; 5
    129a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    129e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    12a2:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    12a6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    12aa:	6c e7       	ldi	r22, 0x7C	; 124
    12ac:	75 e0       	ldi	r23, 0x05	; 5
    12ae:	8e e8       	ldi	r24, 0x8E	; 142
    12b0:	95 e0       	ldi	r25, 0x05	; 5
    12b2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    12b6:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    12ba:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    12be:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    12c2:	6c e7       	ldi	r22, 0x7C	; 124
    12c4:	75 e0       	ldi	r23, 0x05	; 5
    12c6:	8e e8       	ldi	r24, 0x8E	; 142
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    12ce:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    12d2:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    12d6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    12da:	6c e7       	ldi	r22, 0x7C	; 124
    12dc:	75 e0       	ldi	r23, 0x05	; 5
    12de:	8e e8       	ldi	r24, 0x8E	; 142
    12e0:	95 e0       	ldi	r25, 0x05	; 5
    12e2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    12e6:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    12ea:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    12ee:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    12f2:	6c e7       	ldi	r22, 0x7C	; 124
    12f4:	75 e0       	ldi	r23, 0x05	; 5
    12f6:	8e e8       	ldi	r24, 0x8E	; 142
    12f8:	95 e0       	ldi	r25, 0x05	; 5
    12fa:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    12fe:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    1302:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    1306:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    130a:	6c e7       	ldi	r22, 0x7C	; 124
    130c:	75 e0       	ldi	r23, 0x05	; 5
    130e:	8e e8       	ldi	r24, 0x8E	; 142
    1310:	95 e0       	ldi	r25, 0x05	; 5
    1312:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    1316:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    131a:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    131e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    1322:	6c e7       	ldi	r22, 0x7C	; 124
    1324:	75 e0       	ldi	r23, 0x05	; 5
    1326:	8e e8       	ldi	r24, 0x8E	; 142
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(content);
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (content)
    1336:	6c e7       	ldi	r22, 0x7C	; 124
    1338:	75 e0       	ldi	r23, 0x05	; 5
    133a:	8e e8       	ldi	r24, 0x8E	; 142
    133c:	95 e0       	ldi	r25, 0x05	; 5
    133e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(0x00);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    134a:	68 e7       	ldi	r22, 0x78	; 120
    134c:	75 e0       	ldi	r23, 0x05	; 5
    134e:	8e e8       	ldi	r24, 0x8E	; 142
    1350:	95 e0       	ldi	r25, 0x05	; 5
    1352:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    1356:	8d ec       	ldi	r24, 0xCD	; 205
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    135e:	6c e7       	ldi	r22, 0x7C	; 124
    1360:	75 e0       	ldi	r23, 0x05	; 5
    1362:	8e e8       	ldi	r24, 0x8E	; 142
    1364:	95 e0       	ldi	r25, 0x05	; 5
    1366:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	checkSum_index = 0;
    136a:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    136e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1372:	e1 2c       	mov	r14, r1
    1374:	f1 2c       	mov	r15, r1
    1376:	c0 e0       	ldi	r28, 0x00	; 0
    1378:	d0 e0       	ldi	r29, 0x00	; 0
    137a:	21 c0       	rjmp	.+66     	; 0x13be <genheartbeatMessage+0x188>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    137c:	fe 01       	movw	r30, r28
    137e:	e2 57       	subi	r30, 0x72	; 114
    1380:	fa 4f       	sbci	r31, 0xFA	; 250
    1382:	80 81       	ld	r24, Z
    1384:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1388:	18 2f       	mov	r17, r24
    138a:	12 95       	swap	r17
    138c:	10 7f       	andi	r17, 0xF0	; 240
    138e:	fe 01       	movw	r30, r28
    1390:	e1 57       	subi	r30, 0x71	; 113
    1392:	fa 4f       	sbci	r31, 0xFA	; 250
    1394:	80 81       	ld	r24, Z
    1396:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    139a:	f7 01       	movw	r30, r14
    139c:	e2 57       	subi	r30, 0x72	; 114
    139e:	fa 4f       	sbci	r31, 0xFA	; 250
    13a0:	81 2b       	or	r24, r17
    13a2:	80 83       	st	Z, r24
		checkSum_index++;
    13a4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    13a8:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    13b2:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X4(0x00);
	strcat(_buffer, value_4); // 4 (CheckSum)
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    13b6:	22 96       	adiw	r28, 0x02	; 2
    13b8:	bf ef       	ldi	r27, 0xFF	; 255
    13ba:	eb 1a       	sub	r14, r27
    13bc:	fb 0a       	sbc	r15, r27
    13be:	cc 31       	cpi	r28, 0x1C	; 28
    13c0:	d1 05       	cpc	r29, r1
    13c2:	e0 f2       	brcs	.-72     	; 0x137c <genheartbeatMessage+0x146>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
	check_sum = GetCrc16(_buffer, checkSum_index);
    13c4:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <checkSum_index>
    13c8:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <checkSum_index+0x1>
    13cc:	8e e8       	ldi	r24, 0x8E	; 142
    13ce:	95 e0       	ldi	r25, 0x05	; 5
    13d0:	0e 94 a0 04 	call	0x940	; 0x940 <GetCrc16>
    13d4:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <check_sum+0x1>
    13d8:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <check_sum>
	
	memset(_buffer, 0, sizeof(_buffer));
    13dc:	80 e8       	ldi	r24, 0x80	; 128
    13de:	ee e8       	ldi	r30, 0x8E	; 142
    13e0:	f5 e0       	ldi	r31, 0x05	; 5
    13e2:	df 01       	movw	r26, r30
    13e4:	1d 92       	st	X+, r1
    13e6:	8a 95       	dec	r24
    13e8:	e9 f7       	brne	.-6      	; 0x13e4 <genheartbeatMessage+0x1ae>
	to_String_X2(0xff);
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    13f2:	6c e7       	ldi	r22, 0x7C	; 124
    13f4:	75 e0       	ldi	r23, 0x05	; 5
    13f6:	8e e8       	ldi	r24, 0x8E	; 142
    13f8:	95 e0       	ldi	r25, 0x05	; 5
    13fa:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    13fe:	8c e0       	ldi	r24, 0x0C	; 12
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    1406:	6c e7       	ldi	r22, 0x7C	; 124
    1408:	75 e0       	ldi	r23, 0x05	; 5
    140a:	8e e8       	ldi	r24, 0x8E	; 142
    140c:	95 e0       	ldi	r25, 0x05	; 5
    140e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    141a:	6c e7       	ldi	r22, 0x7C	; 124
    141c:	75 e0       	ldi	r23, 0x05	; 5
    141e:	8e e8       	ldi	r24, 0x8E	; 142
    1420:	95 e0       	ldi	r25, 0x05	; 5
    1422:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x02);
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    142e:	6c e7       	ldi	r22, 0x7C	; 124
    1430:	75 e0       	ldi	r23, 0x05	; 5
    1432:	8e e8       	ldi	r24, 0x8E	; 142
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    143a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    143e:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    1442:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    1446:	6c e7       	ldi	r22, 0x7C	; 124
    1448:	75 e0       	ldi	r23, 0x05	; 5
    144a:	8e e8       	ldi	r24, 0x8E	; 142
    144c:	95 e0       	ldi	r25, 0x05	; 5
    144e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    1452:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    1456:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    145a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    145e:	6c e7       	ldi	r22, 0x7C	; 124
    1460:	75 e0       	ldi	r23, 0x05	; 5
    1462:	8e e8       	ldi	r24, 0x8E	; 142
    1464:	95 e0       	ldi	r25, 0x05	; 5
    1466:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    146a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    146e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    1472:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    1476:	6c e7       	ldi	r22, 0x7C	; 124
    1478:	75 e0       	ldi	r23, 0x05	; 5
    147a:	8e e8       	ldi	r24, 0x8E	; 142
    147c:	95 e0       	ldi	r25, 0x05	; 5
    147e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    1482:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    1486:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    148a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    148e:	6c e7       	ldi	r22, 0x7C	; 124
    1490:	75 e0       	ldi	r23, 0x05	; 5
    1492:	8e e8       	ldi	r24, 0x8E	; 142
    1494:	95 e0       	ldi	r25, 0x05	; 5
    1496:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    149a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    149e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    14a2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    14a6:	6c e7       	ldi	r22, 0x7C	; 124
    14a8:	75 e0       	ldi	r23, 0x05	; 5
    14aa:	8e e8       	ldi	r24, 0x8E	; 142
    14ac:	95 e0       	ldi	r25, 0x05	; 5
    14ae:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    14b2:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    14b6:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    14ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    14be:	6c e7       	ldi	r22, 0x7C	; 124
    14c0:	75 e0       	ldi	r23, 0x05	; 5
    14c2:	8e e8       	ldi	r24, 0x8E	; 142
    14c4:	95 e0       	ldi	r25, 0x05	; 5
    14c6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(content);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (content)
    14d2:	6c e7       	ldi	r22, 0x7C	; 124
    14d4:	75 e0       	ldi	r23, 0x05	; 5
    14d6:	8e e8       	ldi	r24, 0x8E	; 142
    14d8:	95 e0       	ldi	r25, 0x05	; 5
    14da:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(check_sum);
    14de:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <check_sum>
    14e2:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <check_sum+0x1>
    14e6:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    14ea:	68 e7       	ldi	r22, 0x78	; 120
    14ec:	75 e0       	ldi	r23, 0x05	; 5
    14ee:	8e e8       	ldi	r24, 0x8E	; 142
    14f0:	95 e0       	ldi	r25, 0x05	; 5
    14f2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    14f6:	8d ec       	ldi	r24, 0xCD	; 205
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    14fe:	6c e7       	ldi	r22, 0x7C	; 124
    1500:	75 e0       	ldi	r23, 0x05	; 5
    1502:	8e e8       	ldi	r24, 0x8E	; 142
    1504:	95 e0       	ldi	r25, 0x05	; 5
    1506:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
    150a:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    150e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1512:	e1 2c       	mov	r14, r1
    1514:	f1 2c       	mov	r15, r1
    1516:	c0 e0       	ldi	r28, 0x00	; 0
    1518:	d0 e0       	ldi	r29, 0x00	; 0
    151a:	21 c0       	rjmp	.+66     	; 0x155e <genheartbeatMessage+0x328>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    151c:	fe 01       	movw	r30, r28
    151e:	e2 57       	subi	r30, 0x72	; 114
    1520:	fa 4f       	sbci	r31, 0xFA	; 250
    1522:	80 81       	ld	r24, Z
    1524:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1528:	18 2f       	mov	r17, r24
    152a:	12 95       	swap	r17
    152c:	10 7f       	andi	r17, 0xF0	; 240
    152e:	fe 01       	movw	r30, r28
    1530:	e1 57       	subi	r30, 0x71	; 113
    1532:	fa 4f       	sbci	r31, 0xFA	; 250
    1534:	80 81       	ld	r24, Z
    1536:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    153a:	f7 01       	movw	r30, r14
    153c:	e2 57       	subi	r30, 0x72	; 114
    153e:	fa 4f       	sbci	r31, 0xFA	; 250
    1540:	81 2b       	or	r24, r17
    1542:	80 83       	st	Z, r24
		checkSum_index++;
    1544:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    1548:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    1552:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1556:	22 96       	adiw	r28, 0x02	; 2
    1558:	bf ef       	ldi	r27, 0xFF	; 255
    155a:	eb 1a       	sub	r14, r27
    155c:	fb 0a       	sbc	r15, r27
    155e:	cc 31       	cpi	r28, 0x1C	; 28
    1560:	d1 05       	cpc	r29, r1
    1562:	e0 f2       	brcs	.-72     	; 0x151c <genheartbeatMessage+0x2e6>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	08 95       	ret

00001570 <genMeasurmentMessage>:

void genMeasurmentMessage(uint16_t CurrVal, uint16_t VoltVal, uint16_t TempVal, uint16_t HumVal)
{
    1570:	7f 92       	push	r7
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	4c 01       	movw	r8, r24
    158c:	5b 01       	movw	r10, r22
    158e:	6a 01       	movw	r12, r20
    1590:	79 01       	movw	r14, r18
	uint16_t dataLength = 19;
	uint8_t direction = 1;
	memset(_buffer, 0, sizeof(_buffer));
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	ee e8       	ldi	r30, 0x8E	; 142
    1596:	f5 e0       	ldi	r31, 0x05	; 5
    1598:	df 01       	movw	r26, r30
    159a:	1d 92       	st	X+, r1
    159c:	8a 95       	dec	r24
    159e:	e9 f7       	brne	.-6      	; 0x159a <genMeasurmentMessage+0x2a>
	to_String_X2(0xff);
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    15a8:	6c e7       	ldi	r22, 0x7C	; 124
    15aa:	75 e0       	ldi	r23, 0x05	; 5
    15ac:	8e e8       	ldi	r24, 0x8E	; 142
    15ae:	95 e0       	ldi	r25, 0x05	; 5
    15b0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    15b4:	83 e1       	ldi	r24, 0x13	; 19
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    15bc:	6c e7       	ldi	r22, 0x7C	; 124
    15be:	75 e0       	ldi	r23, 0x05	; 5
    15c0:	8e e8       	ldi	r24, 0x8E	; 142
    15c2:	95 e0       	ldi	r25, 0x05	; 5
    15c4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    15d0:	6c e7       	ldi	r22, 0x7C	; 124
    15d2:	75 e0       	ldi	r23, 0x05	; 5
    15d4:	8e e8       	ldi	r24, 0x8E	; 142
    15d6:	95 e0       	ldi	r25, 0x05	; 5
    15d8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x03);
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    15e4:	6c e7       	ldi	r22, 0x7C	; 124
    15e6:	75 e0       	ldi	r23, 0x05	; 5
    15e8:	8e e8       	ldi	r24, 0x8E	; 142
    15ea:	95 e0       	ldi	r25, 0x05	; 5
    15ec:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    15f0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    15f4:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    15f8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    15fc:	6c e7       	ldi	r22, 0x7C	; 124
    15fe:	75 e0       	ldi	r23, 0x05	; 5
    1600:	8e e8       	ldi	r24, 0x8E	; 142
    1602:	95 e0       	ldi	r25, 0x05	; 5
    1604:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    1608:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    160c:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    1610:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    1614:	6c e7       	ldi	r22, 0x7C	; 124
    1616:	75 e0       	ldi	r23, 0x05	; 5
    1618:	8e e8       	ldi	r24, 0x8E	; 142
    161a:	95 e0       	ldi	r25, 0x05	; 5
    161c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    1620:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    1624:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    1628:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    162c:	6c e7       	ldi	r22, 0x7C	; 124
    162e:	75 e0       	ldi	r23, 0x05	; 5
    1630:	8e e8       	ldi	r24, 0x8E	; 142
    1632:	95 e0       	ldi	r25, 0x05	; 5
    1634:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    1638:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    163c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    1640:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    1644:	6c e7       	ldi	r22, 0x7C	; 124
    1646:	75 e0       	ldi	r23, 0x05	; 5
    1648:	8e e8       	ldi	r24, 0x8E	; 142
    164a:	95 e0       	ldi	r25, 0x05	; 5
    164c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    1650:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    1654:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    1658:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    165c:	6c e7       	ldi	r22, 0x7C	; 124
    165e:	75 e0       	ldi	r23, 0x05	; 5
    1660:	8e e8       	ldi	r24, 0x8E	; 142
    1662:	95 e0       	ldi	r25, 0x05	; 5
    1664:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    1668:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    166c:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    1670:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    1674:	6c e7       	ldi	r22, 0x7C	; 124
    1676:	75 e0       	ldi	r23, 0x05	; 5
    1678:	8e e8       	ldi	r24, 0x8E	; 142
    167a:	95 e0       	ldi	r25, 0x05	; 5
    167c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(CurrVal);
    1680:	c4 01       	movw	r24, r8
    1682:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (CurrVal)
    1686:	68 e7       	ldi	r22, 0x78	; 120
    1688:	75 e0       	ldi	r23, 0x05	; 5
    168a:	8e e8       	ldi	r24, 0x8E	; 142
    168c:	95 e0       	ldi	r25, 0x05	; 5
    168e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(VoltVal);
    1692:	c5 01       	movw	r24, r10
    1694:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (VoltVal)
    1698:	68 e7       	ldi	r22, 0x78	; 120
    169a:	75 e0       	ldi	r23, 0x05	; 5
    169c:	8e e8       	ldi	r24, 0x8E	; 142
    169e:	95 e0       	ldi	r25, 0x05	; 5
    16a0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(TempVal);
    16a4:	c6 01       	movw	r24, r12
    16a6:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (TempVal)
    16aa:	68 e7       	ldi	r22, 0x78	; 120
    16ac:	75 e0       	ldi	r23, 0x05	; 5
    16ae:	8e e8       	ldi	r24, 0x8E	; 142
    16b0:	95 e0       	ldi	r25, 0x05	; 5
    16b2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(HumVal);
    16b6:	c7 01       	movw	r24, r14
    16b8:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (HumVal)
    16bc:	68 e7       	ldi	r22, 0x78	; 120
    16be:	75 e0       	ldi	r23, 0x05	; 5
    16c0:	8e e8       	ldi	r24, 0x8E	; 142
    16c2:	95 e0       	ldi	r25, 0x05	; 5
    16c4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(0x00);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    16d0:	68 e7       	ldi	r22, 0x78	; 120
    16d2:	75 e0       	ldi	r23, 0x05	; 5
    16d4:	8e e8       	ldi	r24, 0x8E	; 142
    16d6:	95 e0       	ldi	r25, 0x05	; 5
    16d8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    16dc:	8d ec       	ldi	r24, 0xCD	; 205
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    16e4:	6c e7       	ldi	r22, 0x7C	; 124
    16e6:	75 e0       	ldi	r23, 0x05	; 5
    16e8:	8e e8       	ldi	r24, 0x8E	; 142
    16ea:	95 e0       	ldi	r25, 0x05	; 5
    16ec:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	checkSum_index = 0;
    16f0:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    16f4:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    16f8:	00 e0       	ldi	r16, 0x00	; 0
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	c0 e0       	ldi	r28, 0x00	; 0
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
    1700:	22 c0       	rjmp	.+68     	; 0x1746 <genMeasurmentMessage+0x1d6>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    1702:	fe 01       	movw	r30, r28
    1704:	e2 57       	subi	r30, 0x72	; 114
    1706:	fa 4f       	sbci	r31, 0xFA	; 250
    1708:	80 81       	ld	r24, Z
    170a:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    170e:	78 2e       	mov	r7, r24
    1710:	77 0c       	add	r7, r7
    1712:	77 0c       	add	r7, r7
    1714:	77 0c       	add	r7, r7
    1716:	77 0c       	add	r7, r7
    1718:	fe 01       	movw	r30, r28
    171a:	e1 57       	subi	r30, 0x71	; 113
    171c:	fa 4f       	sbci	r31, 0xFA	; 250
    171e:	80 81       	ld	r24, Z
    1720:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1724:	f8 01       	movw	r30, r16
    1726:	e2 57       	subi	r30, 0x72	; 114
    1728:	fa 4f       	sbci	r31, 0xFA	; 250
    172a:	87 29       	or	r24, r7
    172c:	80 83       	st	Z, r24
		checkSum_index++;
    172e:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    1732:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    173c:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X4(0x00);
	strcat(_buffer, value_4); // 4 (CheckSum)
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1740:	22 96       	adiw	r28, 0x02	; 2
    1742:	0f 5f       	subi	r16, 0xFF	; 255
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	ca 32       	cpi	r28, 0x2A	; 42
    1748:	d1 05       	cpc	r29, r1
    174a:	d8 f2       	brcs	.-74     	; 0x1702 <genMeasurmentMessage+0x192>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
	check_sum = GetCrc16(_buffer, checkSum_index);
    174c:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <checkSum_index>
    1750:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <checkSum_index+0x1>
    1754:	8e e8       	ldi	r24, 0x8E	; 142
    1756:	95 e0       	ldi	r25, 0x05	; 5
    1758:	0e 94 a0 04 	call	0x940	; 0x940 <GetCrc16>
    175c:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <check_sum+0x1>
    1760:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <check_sum>
	
	memset(_buffer, 0, sizeof(_buffer));
    1764:	80 e8       	ldi	r24, 0x80	; 128
    1766:	ee e8       	ldi	r30, 0x8E	; 142
    1768:	f5 e0       	ldi	r31, 0x05	; 5
    176a:	df 01       	movw	r26, r30
    176c:	1d 92       	st	X+, r1
    176e:	8a 95       	dec	r24
    1770:	e9 f7       	brne	.-6      	; 0x176c <genMeasurmentMessage+0x1fc>
	to_String_X2(0xff);
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    177a:	6c e7       	ldi	r22, 0x7C	; 124
    177c:	75 e0       	ldi	r23, 0x05	; 5
    177e:	8e e8       	ldi	r24, 0x8E	; 142
    1780:	95 e0       	ldi	r25, 0x05	; 5
    1782:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    1786:	83 e1       	ldi	r24, 0x13	; 19
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    178e:	6c e7       	ldi	r22, 0x7C	; 124
    1790:	75 e0       	ldi	r23, 0x05	; 5
    1792:	8e e8       	ldi	r24, 0x8E	; 142
    1794:	95 e0       	ldi	r25, 0x05	; 5
    1796:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    17a2:	6c e7       	ldi	r22, 0x7C	; 124
    17a4:	75 e0       	ldi	r23, 0x05	; 5
    17a6:	8e e8       	ldi	r24, 0x8E	; 142
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x03);
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    17b6:	6c e7       	ldi	r22, 0x7C	; 124
    17b8:	75 e0       	ldi	r23, 0x05	; 5
    17ba:	8e e8       	ldi	r24, 0x8E	; 142
    17bc:	95 e0       	ldi	r25, 0x05	; 5
    17be:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    17c2:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    17c6:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    17ca:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    17ce:	6c e7       	ldi	r22, 0x7C	; 124
    17d0:	75 e0       	ldi	r23, 0x05	; 5
    17d2:	8e e8       	ldi	r24, 0x8E	; 142
    17d4:	95 e0       	ldi	r25, 0x05	; 5
    17d6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    17da:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    17de:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    17e2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    17e6:	6c e7       	ldi	r22, 0x7C	; 124
    17e8:	75 e0       	ldi	r23, 0x05	; 5
    17ea:	8e e8       	ldi	r24, 0x8E	; 142
    17ec:	95 e0       	ldi	r25, 0x05	; 5
    17ee:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    17f2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    17f6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    17fa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    17fe:	6c e7       	ldi	r22, 0x7C	; 124
    1800:	75 e0       	ldi	r23, 0x05	; 5
    1802:	8e e8       	ldi	r24, 0x8E	; 142
    1804:	95 e0       	ldi	r25, 0x05	; 5
    1806:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    180a:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    180e:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    1812:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    1816:	6c e7       	ldi	r22, 0x7C	; 124
    1818:	75 e0       	ldi	r23, 0x05	; 5
    181a:	8e e8       	ldi	r24, 0x8E	; 142
    181c:	95 e0       	ldi	r25, 0x05	; 5
    181e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    1822:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    1826:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    182a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    182e:	6c e7       	ldi	r22, 0x7C	; 124
    1830:	75 e0       	ldi	r23, 0x05	; 5
    1832:	8e e8       	ldi	r24, 0x8E	; 142
    1834:	95 e0       	ldi	r25, 0x05	; 5
    1836:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    183a:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    183e:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    1842:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    1846:	6c e7       	ldi	r22, 0x7C	; 124
    1848:	75 e0       	ldi	r23, 0x05	; 5
    184a:	8e e8       	ldi	r24, 0x8E	; 142
    184c:	95 e0       	ldi	r25, 0x05	; 5
    184e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(CurrVal);
    1852:	c4 01       	movw	r24, r8
    1854:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (CurrVal)
    1858:	68 e7       	ldi	r22, 0x78	; 120
    185a:	75 e0       	ldi	r23, 0x05	; 5
    185c:	8e e8       	ldi	r24, 0x8E	; 142
    185e:	95 e0       	ldi	r25, 0x05	; 5
    1860:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(VoltVal);
    1864:	c5 01       	movw	r24, r10
    1866:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (VoltVal)
    186a:	68 e7       	ldi	r22, 0x78	; 120
    186c:	75 e0       	ldi	r23, 0x05	; 5
    186e:	8e e8       	ldi	r24, 0x8E	; 142
    1870:	95 e0       	ldi	r25, 0x05	; 5
    1872:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(TempVal);
    1876:	c6 01       	movw	r24, r12
    1878:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (TempVal)
    187c:	68 e7       	ldi	r22, 0x78	; 120
    187e:	75 e0       	ldi	r23, 0x05	; 5
    1880:	8e e8       	ldi	r24, 0x8E	; 142
    1882:	95 e0       	ldi	r25, 0x05	; 5
    1884:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(HumVal);
    1888:	c7 01       	movw	r24, r14
    188a:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (HumVal)
    188e:	68 e7       	ldi	r22, 0x78	; 120
    1890:	75 e0       	ldi	r23, 0x05	; 5
    1892:	8e e8       	ldi	r24, 0x8E	; 142
    1894:	95 e0       	ldi	r25, 0x05	; 5
    1896:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(check_sum);
    189a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <check_sum>
    189e:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <check_sum+0x1>
    18a2:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    18a6:	68 e7       	ldi	r22, 0x78	; 120
    18a8:	75 e0       	ldi	r23, 0x05	; 5
    18aa:	8e e8       	ldi	r24, 0x8E	; 142
    18ac:	95 e0       	ldi	r25, 0x05	; 5
    18ae:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    18b2:	8d ec       	ldi	r24, 0xCD	; 205
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    18ba:	6c e7       	ldi	r22, 0x7C	; 124
    18bc:	75 e0       	ldi	r23, 0x05	; 5
    18be:	8e e8       	ldi	r24, 0x8E	; 142
    18c0:	95 e0       	ldi	r25, 0x05	; 5
    18c2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
    18c6:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    18ca:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    18ce:	e1 2c       	mov	r14, r1
    18d0:	f1 2c       	mov	r15, r1
    18d2:	c0 e0       	ldi	r28, 0x00	; 0
    18d4:	d0 e0       	ldi	r29, 0x00	; 0
    18d6:	21 c0       	rjmp	.+66     	; 0x191a <genMeasurmentMessage+0x3aa>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    18d8:	fe 01       	movw	r30, r28
    18da:	e2 57       	subi	r30, 0x72	; 114
    18dc:	fa 4f       	sbci	r31, 0xFA	; 250
    18de:	80 81       	ld	r24, Z
    18e0:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    18e4:	18 2f       	mov	r17, r24
    18e6:	12 95       	swap	r17
    18e8:	10 7f       	andi	r17, 0xF0	; 240
    18ea:	fe 01       	movw	r30, r28
    18ec:	e1 57       	subi	r30, 0x71	; 113
    18ee:	fa 4f       	sbci	r31, 0xFA	; 250
    18f0:	80 81       	ld	r24, Z
    18f2:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    18f6:	f7 01       	movw	r30, r14
    18f8:	e2 57       	subi	r30, 0x72	; 114
    18fa:	fa 4f       	sbci	r31, 0xFA	; 250
    18fc:	81 2b       	or	r24, r17
    18fe:	80 83       	st	Z, r24
		checkSum_index++;
    1900:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    1904:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    190e:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1912:	22 96       	adiw	r28, 0x02	; 2
    1914:	bf ef       	ldi	r27, 0xFF	; 255
    1916:	eb 1a       	sub	r14, r27
    1918:	fb 0a       	sbc	r15, r27
    191a:	ca 32       	cpi	r28, 0x2A	; 42
    191c:	d1 05       	cpc	r29, r1
    191e:	e0 f2       	brcs	.-72     	; 0x18d8 <genMeasurmentMessage+0x368>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	9f 90       	pop	r9
    1936:	8f 90       	pop	r8
    1938:	7f 90       	pop	r7
    193a:	08 95       	ret

0000193c <genalarmMessage>:

void genalarmMessage(uint8_t numAlarm, uint16_t CurrVal, uint16_t VoltVal, uint16_t TempVal, uint16_t HumVal, uint8_t Talarm[])
{
    193c:	2f 92       	push	r2
    193e:	3f 92       	push	r3
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <genalarmMessage+0x26>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <genalarmMessage+0x28>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <genalarmMessage+0x2a>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	3b 01       	movw	r6, r22
    196c:	2a 01       	movw	r4, r20
    196e:	3a 83       	std	Y+2, r19	; 0x02
    1970:	29 83       	std	Y+1, r18	; 0x01
    1972:	1c 83       	std	Y+4, r17	; 0x04
    1974:	0b 83       	std	Y+3, r16	; 0x03
	uint16_t dataLength = 20 + numAlarm;;
    1976:	a8 2e       	mov	r10, r24
    1978:	b1 2c       	mov	r11, r1
    197a:	45 01       	movw	r8, r10
    197c:	84 e1       	ldi	r24, 0x14	; 20
    197e:	88 0e       	add	r8, r24
    1980:	91 1c       	adc	r9, r1
    1982:	64 01       	movw	r12, r8
	uint8_t direction = 1;
	memset(_buffer, 0, sizeof(_buffer));
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	ee e8       	ldi	r30, 0x8E	; 142
    1988:	f5 e0       	ldi	r31, 0x05	; 5
    198a:	df 01       	movw	r26, r30
    198c:	1d 92       	st	X+, r1
    198e:	8a 95       	dec	r24
    1990:	e9 f7       	brne	.-6      	; 0x198c <genalarmMessage+0x50>
	to_String_X2(0xff);
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    199a:	6c e7       	ldi	r22, 0x7C	; 124
    199c:	75 e0       	ldi	r23, 0x05	; 5
    199e:	8e e8       	ldi	r24, 0x8E	; 142
    19a0:	95 e0       	ldi	r25, 0x05	; 5
    19a2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    19a6:	c4 01       	movw	r24, r8
    19a8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    19ac:	6c e7       	ldi	r22, 0x7C	; 124
    19ae:	75 e0       	ldi	r23, 0x05	; 5
    19b0:	8e e8       	ldi	r24, 0x8E	; 142
    19b2:	95 e0       	ldi	r25, 0x05	; 5
    19b4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    19c0:	6c e7       	ldi	r22, 0x7C	; 124
    19c2:	75 e0       	ldi	r23, 0x05	; 5
    19c4:	8e e8       	ldi	r24, 0x8E	; 142
    19c6:	95 e0       	ldi	r25, 0x05	; 5
    19c8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x04);
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    19d4:	6c e7       	ldi	r22, 0x7C	; 124
    19d6:	75 e0       	ldi	r23, 0x05	; 5
    19d8:	8e e8       	ldi	r24, 0x8E	; 142
    19da:	95 e0       	ldi	r25, 0x05	; 5
    19dc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    19e0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    19e4:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    19e8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    19ec:	6c e7       	ldi	r22, 0x7C	; 124
    19ee:	75 e0       	ldi	r23, 0x05	; 5
    19f0:	8e e8       	ldi	r24, 0x8E	; 142
    19f2:	95 e0       	ldi	r25, 0x05	; 5
    19f4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    19f8:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    19fc:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    1a00:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    1a04:	6c e7       	ldi	r22, 0x7C	; 124
    1a06:	75 e0       	ldi	r23, 0x05	; 5
    1a08:	8e e8       	ldi	r24, 0x8E	; 142
    1a0a:	95 e0       	ldi	r25, 0x05	; 5
    1a0c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    1a10:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    1a14:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    1a18:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    1a1c:	6c e7       	ldi	r22, 0x7C	; 124
    1a1e:	75 e0       	ldi	r23, 0x05	; 5
    1a20:	8e e8       	ldi	r24, 0x8E	; 142
    1a22:	95 e0       	ldi	r25, 0x05	; 5
    1a24:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    1a28:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    1a2c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    1a30:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    1a34:	6c e7       	ldi	r22, 0x7C	; 124
    1a36:	75 e0       	ldi	r23, 0x05	; 5
    1a38:	8e e8       	ldi	r24, 0x8E	; 142
    1a3a:	95 e0       	ldi	r25, 0x05	; 5
    1a3c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    1a40:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    1a44:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    1a48:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    1a4c:	6c e7       	ldi	r22, 0x7C	; 124
    1a4e:	75 e0       	ldi	r23, 0x05	; 5
    1a50:	8e e8       	ldi	r24, 0x8E	; 142
    1a52:	95 e0       	ldi	r25, 0x05	; 5
    1a54:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    1a58:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    1a5c:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    1a60:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    1a64:	6c e7       	ldi	r22, 0x7C	; 124
    1a66:	75 e0       	ldi	r23, 0x05	; 5
    1a68:	8e e8       	ldi	r24, 0x8E	; 142
    1a6a:	95 e0       	ldi	r25, 0x05	; 5
    1a6c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(numAlarm);
    1a70:	c5 01       	movw	r24, r10
    1a72:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (numAlarm)
    1a76:	6c e7       	ldi	r22, 0x7C	; 124
    1a78:	75 e0       	ldi	r23, 0x05	; 5
    1a7a:	8e e8       	ldi	r24, 0x8E	; 142
    1a7c:	95 e0       	ldi	r25, 0x05	; 5
    1a7e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	for(k = 0; k < numAlarm; k++)
    1a82:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <k+0x1>
    1a86:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <k>
    1a8a:	16 c0       	rjmp	.+44     	; 0x1ab8 <genalarmMessage+0x17c>
	{
		to_String_X2(Talarm[k]);
    1a8c:	f7 01       	movw	r30, r14
    1a8e:	e8 0f       	add	r30, r24
    1a90:	f9 1f       	adc	r31, r25
    1a92:	80 81       	ld	r24, Z
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
		strcat(_buffer, value_2); // 1 (Talarm[k])
    1a9a:	6c e7       	ldi	r22, 0x7C	; 124
    1a9c:	75 e0       	ldi	r23, 0x05	; 5
    1a9e:	8e e8       	ldi	r24, 0x8E	; 142
    1aa0:	95 e0       	ldi	r25, 0x05	; 5
    1aa2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	strcat(_buffer, value_2); // 1 (minute)
	to_String_X2(second);
	strcat(_buffer, value_2); // 1 (second)
	to_String_X2(numAlarm);
	strcat(_buffer, value_2); // 1 (numAlarm)
	for(k = 0; k < numAlarm; k++)
    1aa6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
    1aaa:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <k+0x1>
    1ab4:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <k>
    1ab8:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
    1abc:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
    1ac0:	8a 15       	cp	r24, r10
    1ac2:	9b 05       	cpc	r25, r11
    1ac4:	1c f3       	brlt	.-58     	; 0x1a8c <genalarmMessage+0x150>
	{
		to_String_X2(Talarm[k]);
		strcat(_buffer, value_2); // 1 (Talarm[k])
	}
	to_String_X4(CurrVal);
    1ac6:	c3 01       	movw	r24, r6
    1ac8:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (CurrVal)
    1acc:	68 e7       	ldi	r22, 0x78	; 120
    1ace:	75 e0       	ldi	r23, 0x05	; 5
    1ad0:	8e e8       	ldi	r24, 0x8E	; 142
    1ad2:	95 e0       	ldi	r25, 0x05	; 5
    1ad4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(VoltVal);
    1ad8:	c2 01       	movw	r24, r4
    1ada:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (VoltVal)
    1ade:	68 e7       	ldi	r22, 0x78	; 120
    1ae0:	75 e0       	ldi	r23, 0x05	; 5
    1ae2:	8e e8       	ldi	r24, 0x8E	; 142
    1ae4:	95 e0       	ldi	r25, 0x05	; 5
    1ae6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(TempVal);
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (TempVal)
    1af2:	68 e7       	ldi	r22, 0x78	; 120
    1af4:	75 e0       	ldi	r23, 0x05	; 5
    1af6:	8e e8       	ldi	r24, 0x8E	; 142
    1af8:	95 e0       	ldi	r25, 0x05	; 5
    1afa:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(HumVal);
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (HumVal)
    1b06:	68 e7       	ldi	r22, 0x78	; 120
    1b08:	75 e0       	ldi	r23, 0x05	; 5
    1b0a:	8e e8       	ldi	r24, 0x8E	; 142
    1b0c:	95 e0       	ldi	r25, 0x05	; 5
    1b0e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(0x00);
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    1b1a:	68 e7       	ldi	r22, 0x78	; 120
    1b1c:	75 e0       	ldi	r23, 0x05	; 5
    1b1e:	8e e8       	ldi	r24, 0x8E	; 142
    1b20:	95 e0       	ldi	r25, 0x05	; 5
    1b22:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    1b26:	8d ec       	ldi	r24, 0xCD	; 205
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    1b2e:	6c e7       	ldi	r22, 0x7C	; 124
    1b30:	75 e0       	ldi	r23, 0x05	; 5
    1b32:	8e e8       	ldi	r24, 0x8E	; 142
    1b34:	95 e0       	ldi	r25, 0x05	; 5
    1b36:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	checkSum_index = 0;
    1b3a:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    1b3e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1b42:	21 2c       	mov	r2, r1
    1b44:	31 2c       	mov	r3, r1
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	23 c0       	rjmp	.+70     	; 0x1b92 <genalarmMessage+0x256>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	e2 57       	subi	r30, 0x72	; 114
    1b50:	fa 4f       	sbci	r31, 0xFA	; 250
    1b52:	80 81       	ld	r24, Z
    1b54:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1b58:	82 95       	swap	r24
    1b5a:	80 7f       	andi	r24, 0xF0	; 240
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	f8 01       	movw	r30, r16
    1b60:	e1 57       	subi	r30, 0x71	; 113
    1b62:	fa 4f       	sbci	r31, 0xFA	; 250
    1b64:	80 81       	ld	r24, Z
    1b66:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1b6a:	f1 01       	movw	r30, r2
    1b6c:	e2 57       	subi	r30, 0x72	; 114
    1b6e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b70:	bd 81       	ldd	r27, Y+5	; 0x05
    1b72:	8b 2b       	or	r24, r27
    1b74:	80 83       	st	Z, r24
		checkSum_index++;
    1b76:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    1b7a:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    1b84:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X4(0x00);
	strcat(_buffer, value_4); // 4 (CheckSum)
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1b88:	0e 5f       	subi	r16, 0xFE	; 254
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	28 1a       	sub	r2, r24
    1b90:	38 0a       	sbc	r3, r24
    1b92:	d6 01       	movw	r26, r12
    1b94:	12 96       	adiw	r26, 0x02	; 2
    1b96:	aa 0f       	add	r26, r26
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	be 83       	std	Y+6, r27	; 0x06
    1b9c:	ad 83       	std	Y+5, r26	; 0x05
    1b9e:	0a 17       	cp	r16, r26
    1ba0:	1b 07       	cpc	r17, r27
    1ba2:	a0 f2       	brcs	.-88     	; 0x1b4c <genalarmMessage+0x210>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
	check_sum = GetCrc16(_buffer, checkSum_index);
    1ba4:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <checkSum_index>
    1ba8:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <checkSum_index+0x1>
    1bac:	8e e8       	ldi	r24, 0x8E	; 142
    1bae:	95 e0       	ldi	r25, 0x05	; 5
    1bb0:	0e 94 a0 04 	call	0x940	; 0x940 <GetCrc16>
    1bb4:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <check_sum+0x1>
    1bb8:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <check_sum>

	memset(_buffer, 0, sizeof(_buffer));
    1bbc:	80 e8       	ldi	r24, 0x80	; 128
    1bbe:	ee e8       	ldi	r30, 0x8E	; 142
    1bc0:	f5 e0       	ldi	r31, 0x05	; 5
    1bc2:	df 01       	movw	r26, r30
    1bc4:	1d 92       	st	X+, r1
    1bc6:	8a 95       	dec	r24
    1bc8:	e9 f7       	brne	.-6      	; 0x1bc4 <genalarmMessage+0x288>
	to_String_X2(0xff);
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (header)
    1bd2:	6c e7       	ldi	r22, 0x7C	; 124
    1bd4:	75 e0       	ldi	r23, 0x05	; 5
    1bd6:	8e e8       	ldi	r24, 0x8E	; 142
    1bd8:	95 e0       	ldi	r25, 0x05	; 5
    1bda:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(dataLength);
    1bde:	c4 01       	movw	r24, r8
    1be0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (data length)
    1be4:	6c e7       	ldi	r22, 0x7C	; 124
    1be6:	75 e0       	ldi	r23, 0x05	; 5
    1be8:	8e e8       	ldi	r24, 0x8E	; 142
    1bea:	95 e0       	ldi	r25, 0x05	; 5
    1bec:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(direction);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (direction)
    1bf8:	6c e7       	ldi	r22, 0x7C	; 124
    1bfa:	75 e0       	ldi	r23, 0x05	; 5
    1bfc:	8e e8       	ldi	r24, 0x8E	; 142
    1bfe:	95 e0       	ldi	r25, 0x05	; 5
    1c00:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0x04);
    1c04:	84 e0       	ldi	r24, 0x04	; 4
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (type)
    1c0c:	6c e7       	ldi	r22, 0x7C	; 124
    1c0e:	75 e0       	ldi	r23, 0x05	; 5
    1c10:	8e e8       	ldi	r24, 0x8E	; 142
    1c12:	95 e0       	ldi	r25, 0x05	; 5
    1c14:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(year);
    1c18:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <year>
    1c1c:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <year+0x1>
    1c20:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (year)
    1c24:	6c e7       	ldi	r22, 0x7C	; 124
    1c26:	75 e0       	ldi	r23, 0x05	; 5
    1c28:	8e e8       	ldi	r24, 0x8E	; 142
    1c2a:	95 e0       	ldi	r25, 0x05	; 5
    1c2c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(month);
    1c30:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <month>
    1c34:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <month+0x1>
    1c38:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (month)
    1c3c:	6c e7       	ldi	r22, 0x7C	; 124
    1c3e:	75 e0       	ldi	r23, 0x05	; 5
    1c40:	8e e8       	ldi	r24, 0x8E	; 142
    1c42:	95 e0       	ldi	r25, 0x05	; 5
    1c44:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(day);
    1c48:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <day>
    1c4c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <day+0x1>
    1c50:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (day)
    1c54:	6c e7       	ldi	r22, 0x7C	; 124
    1c56:	75 e0       	ldi	r23, 0x05	; 5
    1c58:	8e e8       	ldi	r24, 0x8E	; 142
    1c5a:	95 e0       	ldi	r25, 0x05	; 5
    1c5c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(hour);
    1c60:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <hour>
    1c64:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <hour+0x1>
    1c68:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (hour)
    1c6c:	6c e7       	ldi	r22, 0x7C	; 124
    1c6e:	75 e0       	ldi	r23, 0x05	; 5
    1c70:	8e e8       	ldi	r24, 0x8E	; 142
    1c72:	95 e0       	ldi	r25, 0x05	; 5
    1c74:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(minute);
    1c78:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <minute>
    1c7c:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <minute+0x1>
    1c80:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (minute)
    1c84:	6c e7       	ldi	r22, 0x7C	; 124
    1c86:	75 e0       	ldi	r23, 0x05	; 5
    1c88:	8e e8       	ldi	r24, 0x8E	; 142
    1c8a:	95 e0       	ldi	r25, 0x05	; 5
    1c8c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(second);
    1c90:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <second>
    1c94:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <second+0x1>
    1c98:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (second)
    1c9c:	6c e7       	ldi	r22, 0x7C	; 124
    1c9e:	75 e0       	ldi	r23, 0x05	; 5
    1ca0:	8e e8       	ldi	r24, 0x8E	; 142
    1ca2:	95 e0       	ldi	r25, 0x05	; 5
    1ca4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(numAlarm);
    1ca8:	c5 01       	movw	r24, r10
    1caa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (numAlarm)
    1cae:	6c e7       	ldi	r22, 0x7C	; 124
    1cb0:	75 e0       	ldi	r23, 0x05	; 5
    1cb2:	8e e8       	ldi	r24, 0x8E	; 142
    1cb4:	95 e0       	ldi	r25, 0x05	; 5
    1cb6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	for(k = 0; k < numAlarm; k++)
    1cba:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <k+0x1>
    1cbe:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <k>
    1cc2:	16 c0       	rjmp	.+44     	; 0x1cf0 <genalarmMessage+0x3b4>
	{
		to_String_X2(Talarm[k]);
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	e8 0f       	add	r30, r24
    1cc8:	f9 1f       	adc	r31, r25
    1cca:	80 81       	ld	r24, Z
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
		strcat(_buffer, value_2); // 1 (Talarm[k])
    1cd2:	6c e7       	ldi	r22, 0x7C	; 124
    1cd4:	75 e0       	ldi	r23, 0x05	; 5
    1cd6:	8e e8       	ldi	r24, 0x8E	; 142
    1cd8:	95 e0       	ldi	r25, 0x05	; 5
    1cda:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	strcat(_buffer, value_2); // 1 (minute)
	to_String_X2(second);
	strcat(_buffer, value_2); // 1 (second)
	to_String_X2(numAlarm);
	strcat(_buffer, value_2); // 1 (numAlarm)
	for(k = 0; k < numAlarm; k++)
    1cde:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
    1ce2:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <k+0x1>
    1cec:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <k>
    1cf0:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <k>
    1cf4:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <k+0x1>
    1cf8:	8a 15       	cp	r24, r10
    1cfa:	9b 05       	cpc	r25, r11
    1cfc:	1c f3       	brlt	.-58     	; 0x1cc4 <genalarmMessage+0x388>
	{
		to_String_X2(Talarm[k]);
		strcat(_buffer, value_2); // 1 (Talarm[k])
	}
	to_String_X4(CurrVal);
    1cfe:	c3 01       	movw	r24, r6
    1d00:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (CurrVal)
    1d04:	68 e7       	ldi	r22, 0x78	; 120
    1d06:	75 e0       	ldi	r23, 0x05	; 5
    1d08:	8e e8       	ldi	r24, 0x8E	; 142
    1d0a:	95 e0       	ldi	r25, 0x05	; 5
    1d0c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(VoltVal);
    1d10:	c2 01       	movw	r24, r4
    1d12:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (VoltVal)
    1d16:	68 e7       	ldi	r22, 0x78	; 120
    1d18:	75 e0       	ldi	r23, 0x05	; 5
    1d1a:	8e e8       	ldi	r24, 0x8E	; 142
    1d1c:	95 e0       	ldi	r25, 0x05	; 5
    1d1e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(TempVal);
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (TempVal)
    1d2a:	68 e7       	ldi	r22, 0x78	; 120
    1d2c:	75 e0       	ldi	r23, 0x05	; 5
    1d2e:	8e e8       	ldi	r24, 0x8E	; 142
    1d30:	95 e0       	ldi	r25, 0x05	; 5
    1d32:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(HumVal);
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 2 (HumVal)
    1d3e:	68 e7       	ldi	r22, 0x78	; 120
    1d40:	75 e0       	ldi	r23, 0x05	; 5
    1d42:	8e e8       	ldi	r24, 0x8E	; 142
    1d44:	95 e0       	ldi	r25, 0x05	; 5
    1d46:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X4(check_sum);
    1d4a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <check_sum>
    1d4e:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <check_sum+0x1>
    1d52:	0e 94 88 04 	call	0x910	; 0x910 <to_String_X4>
	strcat(_buffer, value_4); // 4 (CheckSum)
    1d56:	68 e7       	ldi	r22, 0x78	; 120
    1d58:	75 e0       	ldi	r23, 0x05	; 5
    1d5a:	8e e8       	ldi	r24, 0x8E	; 142
    1d5c:	95 e0       	ldi	r25, 0x05	; 5
    1d5e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	to_String_X2(0xcd);
    1d62:	8d ec       	ldi	r24, 0xCD	; 205
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 72 04 	call	0x8e4	; 0x8e4 <to_String_X2>
	strcat(_buffer, value_2); // 1 (footer)
    1d6a:	6c e7       	ldi	r22, 0x7C	; 124
    1d6c:	75 e0       	ldi	r23, 0x05	; 5
    1d6e:	8e e8       	ldi	r24, 0x8E	; 142
    1d70:	95 e0       	ldi	r25, 0x05	; 5
    1d72:	0e 94 91 16 	call	0x2d22	; 0x2d22 <strcat>
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
    1d76:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <checkSum_index+0x1>
    1d7a:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <checkSum_index>
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1d7e:	c1 2c       	mov	r12, r1
    1d80:	d1 2c       	mov	r13, r1
    1d82:	00 e0       	ldi	r16, 0x00	; 0
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	24 c0       	rjmp	.+72     	; 0x1dd0 <genalarmMessage+0x494>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
    1d88:	f8 01       	movw	r30, r16
    1d8a:	e2 57       	subi	r30, 0x72	; 114
    1d8c:	fa 4f       	sbci	r31, 0xFA	; 250
    1d8e:	80 81       	ld	r24, Z
    1d90:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1d94:	f8 2e       	mov	r15, r24
    1d96:	ff 0c       	add	r15, r15
    1d98:	ff 0c       	add	r15, r15
    1d9a:	ff 0c       	add	r15, r15
    1d9c:	ff 0c       	add	r15, r15
    1d9e:	f8 01       	movw	r30, r16
    1da0:	e1 57       	subi	r30, 0x71	; 113
    1da2:	fa 4f       	sbci	r31, 0xFA	; 250
    1da4:	80 81       	ld	r24, Z
    1da6:	0e 94 48 04 	call	0x890	; 0x890 <convertCharToHex>
    1daa:	f6 01       	movw	r30, r12
    1dac:	e2 57       	subi	r30, 0x72	; 114
    1dae:	fa 4f       	sbci	r31, 0xFA	; 250
    1db0:	8f 29       	or	r24, r15
    1db2:	80 83       	st	Z, r24
		checkSum_index++;
    1db4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <checkSum_index>
    1db8:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <checkSum_index+0x1>
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <checkSum_index+0x1>
    1dc2:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <checkSum_index>
	to_String_X2(0xcd);
	strcat(_buffer, value_2); // 1 (footer)
	
	// Convert LOGIN pakage to bytes array depending on the length = 17 + 5
	checkSum_index = 0;
	for(int i = 0,r=0; i<2*(dataLength + 2);i+=2,r++){
    1dc6:	0e 5f       	subi	r16, 0xFE	; 254
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	bf ef       	ldi	r27, 0xFF	; 255
    1dcc:	cb 1a       	sub	r12, r27
    1dce:	db 0a       	sbc	r13, r27
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	08 17       	cp	r16, r24
    1dd6:	19 07       	cpc	r17, r25
    1dd8:	b8 f2       	brcs	.-82     	; 0x1d88 <genalarmMessage+0x44c>
		_buffer[r] = (char)(convertCharToHex(_buffer[i])<<4)|convertCharToHex(_buffer[i+1]);
		checkSum_index++;
	}
}
    1dda:	26 96       	adiw	r28, 0x06	; 6
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	3f 90       	pop	r3
    1e08:	2f 90       	pop	r2
    1e0a:	08 95       	ret

00001e0c <parse_received_message>:
int package_length = 0;
uint8_t type = 0;
uint16_t error_check = 0;

void parse_received_message(uint8_t data_mat[])
{
    1e0c:	fc 01       	movw	r30, r24
	type = (unsigned char) data_mat[3];
    1e0e:	83 81       	ldd	r24, Z+3	; 0x03
    1e10:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <type>
	switch(type)
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	e9 f0       	breq	.+58     	; 0x1e52 <parse_received_message+0x46>
    1e18:	18 f4       	brcc	.+6      	; 0x1e20 <parse_received_message+0x14>
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	41 f0       	breq	.+16     	; 0x1e2e <parse_received_message+0x22>
    1e1e:	08 95       	ret
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <parse_received_message+0x1a>
    1e24:	80 c0       	rjmp	.+256    	; 0x1f26 <parse_received_message+0x11a>
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <parse_received_message+0x20>
    1e2a:	8f c0       	rjmp	.+286    	; 0x1f4a <parse_received_message+0x13e>
    1e2c:	08 95       	ret
	{
		case 0x01:								// Login Response
		{
			package_length		   = (unsigned char) data_mat[1];
    1e2e:	81 81       	ldd	r24, Z+1	; 0x01
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <package_length+0x1>
    1e36:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <package_length>
			error_check            = ((unsigned char) data_mat[25]) * 256 + (unsigned char) data_mat[26];
    1e3a:	81 8d       	ldd	r24, Z+25	; 0x19
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	98 2f       	mov	r25, r24
    1e40:	88 27       	eor	r24, r24
    1e42:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e44:	82 0f       	add	r24, r18
    1e46:	91 1d       	adc	r25, r1
    1e48:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <error_check+0x1>
    1e4c:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <error_check>
		}break;
    1e50:	08 95       	ret
		case 0x02:								// HeartBeat Response
		{
			package_length		   = (unsigned char) data_mat[1];
    1e52:	81 81       	ldd	r24, Z+1	; 0x01
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <package_length+0x1>
    1e5a:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <package_length>
			min_current = ((unsigned char)data_mat[10]) * 256 + (unsigned char)data_mat[11];
    1e5e:	82 85       	ldd	r24, Z+10	; 0x0a
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	98 2f       	mov	r25, r24
    1e64:	88 27       	eor	r24, r24
    1e66:	23 85       	ldd	r18, Z+11	; 0x0b
    1e68:	82 0f       	add	r24, r18
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <min_current+0x1>
    1e70:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <min_current>
			max_current = ((unsigned char)data_mat[12]) * 256 + (unsigned char)data_mat[13];
    1e74:	84 85       	ldd	r24, Z+12	; 0x0c
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	98 2f       	mov	r25, r24
    1e7a:	88 27       	eor	r24, r24
    1e7c:	25 85       	ldd	r18, Z+13	; 0x0d
    1e7e:	82 0f       	add	r24, r18
    1e80:	91 1d       	adc	r25, r1
    1e82:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <max_current+0x1>
    1e86:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <max_current>
			min_voltage = ((unsigned char)data_mat[14]) * 256 + (unsigned char)data_mat[15];
    1e8a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	98 2f       	mov	r25, r24
    1e90:	88 27       	eor	r24, r24
    1e92:	27 85       	ldd	r18, Z+15	; 0x0f
    1e94:	82 0f       	add	r24, r18
    1e96:	91 1d       	adc	r25, r1
    1e98:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <min_voltage+0x1>
    1e9c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <min_voltage>
			max_voltage = ((unsigned char)data_mat[16]) * 256 + (unsigned char)data_mat[17];
    1ea0:	80 89       	ldd	r24, Z+16	; 0x10
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	88 27       	eor	r24, r24
    1ea8:	21 89       	ldd	r18, Z+17	; 0x11
    1eaa:	82 0f       	add	r24, r18
    1eac:	91 1d       	adc	r25, r1
    1eae:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <max_voltage+0x1>
    1eb2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <max_voltage>
			min_temperature = ((unsigned char)data_mat[18]) * 256 + (unsigned char)data_mat[19];
    1eb6:	82 89       	ldd	r24, Z+18	; 0x12
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	98 2f       	mov	r25, r24
    1ebc:	88 27       	eor	r24, r24
    1ebe:	23 89       	ldd	r18, Z+19	; 0x13
    1ec0:	82 0f       	add	r24, r18
    1ec2:	91 1d       	adc	r25, r1
    1ec4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <min_temperature+0x1>
    1ec8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <min_temperature>
			max_temperature = ((unsigned char)data_mat[20]) * 256 + (unsigned char)data_mat[21];
    1ecc:	84 89       	ldd	r24, Z+20	; 0x14
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	88 27       	eor	r24, r24
    1ed4:	25 89       	ldd	r18, Z+21	; 0x15
    1ed6:	82 0f       	add	r24, r18
    1ed8:	91 1d       	adc	r25, r1
    1eda:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <max_temperature+0x1>
    1ede:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <max_temperature>
			min_humidity = ((unsigned char)data_mat[22]) * 256 + (unsigned char)data_mat[23];
    1ee2:	86 89       	ldd	r24, Z+22	; 0x16
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	88 27       	eor	r24, r24
    1eea:	27 89       	ldd	r18, Z+23	; 0x17
    1eec:	82 0f       	add	r24, r18
    1eee:	91 1d       	adc	r25, r1
    1ef0:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <min_humidity+0x1>
    1ef4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <min_humidity>
			max_humidity = ((unsigned char)data_mat[24]) * 256 + (unsigned char)data_mat[25];
    1ef8:	80 8d       	ldd	r24, Z+24	; 0x18
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	98 2f       	mov	r25, r24
    1efe:	88 27       	eor	r24, r24
    1f00:	21 8d       	ldd	r18, Z+25	; 0x19
    1f02:	82 0f       	add	r24, r18
    1f04:	91 1d       	adc	r25, r1
    1f06:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <max_humidity+0x1>
    1f0a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <max_humidity>
			error_check            = ((unsigned char) data_mat[26]) * 256 + (unsigned char) data_mat[27];
    1f0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 2f       	mov	r25, r24
    1f14:	88 27       	eor	r24, r24
    1f16:	23 8d       	ldd	r18, Z+27	; 0x1b
    1f18:	82 0f       	add	r24, r18
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <error_check+0x1>
    1f20:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <error_check>
			//USART_TxChar((min_voltage >> 8) & 0xff);
			//USART_TxChar(max_voltage & 0xff);
			//USART_TxChar((max_voltage >> 8) & 0xff);
			
			
		}break;
    1f24:	08 95       	ret
		case 0x03:								// HeartBeat Response
		{
			package_length		   = (unsigned char) data_mat[1];
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <package_length+0x1>
    1f2e:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <package_length>
			error_check            = ((unsigned char) data_mat[18]) * 256 + (unsigned char) data_mat[19];
    1f32:	82 89       	ldd	r24, Z+18	; 0x12
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	98 2f       	mov	r25, r24
    1f38:	88 27       	eor	r24, r24
    1f3a:	23 89       	ldd	r18, Z+19	; 0x13
    1f3c:	82 0f       	add	r24, r18
    1f3e:	91 1d       	adc	r25, r1
    1f40:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <error_check+0x1>
    1f44:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <error_check>
		}break;
    1f48:	08 95       	ret
		case 0x04:								// HeartBeat Response
		{
			package_length		   = (unsigned char) data_mat[2];
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <package_length+0x1>
    1f52:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <package_length>
			numalarm               = (unsigned char) data_mat[10];
    1f56:	82 85       	ldd	r24, Z+10	; 0x0a
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <numalarm+0x1>
    1f5e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <numalarm>
			error_check            = ((unsigned char) data_mat[19 + numalarm]) * 256 + (unsigned char) data_mat[20 + numalarm];
    1f62:	e8 0f       	add	r30, r24
    1f64:	f9 1f       	adc	r31, r25
    1f66:	83 89       	ldd	r24, Z+19	; 0x13
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	88 27       	eor	r24, r24
    1f6e:	24 89       	ldd	r18, Z+20	; 0x14
    1f70:	82 0f       	add	r24, r18
    1f72:	91 1d       	adc	r25, r1
    1f74:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <error_check+0x1>
    1f78:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <error_check>
    1f7c:	08 95       	ret

00001f7e <check_message_correctness>:
	}
}

bool check_message_correctness(int len_of_data)
{
	uint16_t ch_sum = GetCrc16(server_response, len_of_data);
    1f7e:	bc 01       	movw	r22, r24
    1f80:	88 e1       	ldi	r24, 0x18	; 24
    1f82:	96 e0       	ldi	r25, 0x06	; 6
    1f84:	0e 94 a0 04 	call	0x940	; 0x940 <GetCrc16>
	//USART_SendString("checksum\n");
	//USART_SendString(ch_sum_char);
	//sprintf(ch_sum_char, "%d", error_check);
	//USART_SendString("checksum_readed\n");
	//USART_SendString(ch_sum_char);
	if(ch_sum == error_check)
    1f88:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <error_check>
    1f8c:	30 91 79 04 	lds	r19, 0x0479	; 0x800479 <error_check+0x1>
    1f90:	82 17       	cp	r24, r18
    1f92:	93 07       	cpc	r25, r19
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <check_message_correctness+0x1c>
	{
		return true;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	08 95       	ret
	}
	else
	{
		return false;
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1f9c:	08 95       	ret

00001f9e <compare_for_alarm>:

int compare_for_alarm(int CurrVal, int VoltVal, int TempVal, int HumVal, int Talarm[])
{
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
	int res = 0;
	if (CurrVal >= max_current)
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <max_current>
    1fa8:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <max_current+0x1>
    1fac:	e8 17       	cp	r30, r24
    1fae:	f9 07       	cpc	r31, r25
    1fb0:	40 f0       	brcs	.+16     	; 0x1fc2 <compare_for_alarm+0x24>
	{
		res++;
		Talarm[res - 1] = 0x02;
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	d8 01       	movw	r26, r16
    1fb8:	8d 93       	st	X+, r24
    1fba:	9c 93       	st	X, r25
int compare_for_alarm(int CurrVal, int VoltVal, int TempVal, int HumVal, int Talarm[])
{
	int res = 0;
	if (CurrVal >= max_current)
	{
		res++;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <compare_for_alarm+0x28>
	}
}

int compare_for_alarm(int CurrVal, int VoltVal, int TempVal, int HumVal, int Talarm[])
{
	int res = 0;
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
	if (CurrVal >= max_current)
	{
		res++;
		Talarm[res - 1] = 0x02;
	}
	if (CurrVal <= min_current)
    1fc6:	a0 91 7f 00 	lds	r26, 0x007F	; 0x80007f <min_current>
    1fca:	b0 91 80 00 	lds	r27, 0x0080	; 0x800080 <min_current+0x1>
    1fce:	ae 17       	cp	r26, r30
    1fd0:	bf 07       	cpc	r27, r31
    1fd2:	60 f0       	brcs	.+24     	; 0x1fec <compare_for_alarm+0x4e>
	{
		res++;
    1fd4:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x01;
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e1 50       	subi	r30, 0x01	; 1
    1fda:	f0 48       	sbci	r31, 0x80	; 128
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	e0 0f       	add	r30, r16
    1fe2:	f1 1f       	adc	r31, r17
    1fe4:	a1 e0       	ldi	r26, 0x01	; 1
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	b1 83       	std	Z+1, r27	; 0x01
    1fea:	a0 83       	st	Z, r26
	}
	if (VoltVal >= max_voltage)
    1fec:	e6 2f       	mov	r30, r22
    1fee:	f7 2f       	mov	r31, r23
    1ff0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <max_voltage>
    1ff4:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <max_voltage+0x1>
    1ff8:	e6 17       	cp	r30, r22
    1ffa:	f7 07       	cpc	r31, r23
    1ffc:	60 f0       	brcs	.+24     	; 0x2016 <compare_for_alarm+0x78>
	{
		res++;
    1ffe:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x04;
    2000:	dc 01       	movw	r26, r24
    2002:	a1 50       	subi	r26, 0x01	; 1
    2004:	b0 48       	sbci	r27, 0x80	; 128
    2006:	aa 0f       	add	r26, r26
    2008:	bb 1f       	adc	r27, r27
    200a:	a0 0f       	add	r26, r16
    200c:	b1 1f       	adc	r27, r17
    200e:	64 e0       	ldi	r22, 0x04	; 4
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	6d 93       	st	X+, r22
    2014:	7c 93       	st	X, r23
	}
	if (VoltVal <= min_voltage)
    2016:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <min_voltage>
    201a:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <min_voltage+0x1>
    201e:	6e 17       	cp	r22, r30
    2020:	7f 07       	cpc	r23, r31
    2022:	60 f0       	brcs	.+24     	; 0x203c <compare_for_alarm+0x9e>
	{
		res++;
    2024:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x03;
    2026:	fc 01       	movw	r30, r24
    2028:	e1 50       	subi	r30, 0x01	; 1
    202a:	f0 48       	sbci	r31, 0x80	; 128
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	e0 0f       	add	r30, r16
    2032:	f1 1f       	adc	r31, r17
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	71 83       	std	Z+1, r23	; 0x01
    203a:	60 83       	st	Z, r22
	}
	if (TempVal >= max_temperature)
    203c:	64 2f       	mov	r22, r20
    203e:	75 2f       	mov	r23, r21
    2040:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <max_temperature>
    2044:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <max_temperature+0x1>
    2048:	64 17       	cp	r22, r20
    204a:	75 07       	cpc	r23, r21
    204c:	60 f0       	brcs	.+24     	; 0x2066 <compare_for_alarm+0xc8>
	{
		res++;
    204e:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x06;
    2050:	fc 01       	movw	r30, r24
    2052:	e1 50       	subi	r30, 0x01	; 1
    2054:	f0 48       	sbci	r31, 0x80	; 128
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	e0 0f       	add	r30, r16
    205c:	f1 1f       	adc	r31, r17
    205e:	46 e0       	ldi	r20, 0x06	; 6
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	51 83       	std	Z+1, r21	; 0x01
    2064:	40 83       	st	Z, r20
	}
	if (TempVal <= min_temperature)
    2066:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <min_temperature>
    206a:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <min_temperature+0x1>
    206e:	46 17       	cp	r20, r22
    2070:	57 07       	cpc	r21, r23
    2072:	60 f0       	brcs	.+24     	; 0x208c <compare_for_alarm+0xee>
	{
		res++;
    2074:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x05;
    2076:	fc 01       	movw	r30, r24
    2078:	e1 50       	subi	r30, 0x01	; 1
    207a:	f0 48       	sbci	r31, 0x80	; 128
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	e0 0f       	add	r30, r16
    2082:	f1 1f       	adc	r31, r17
    2084:	45 e0       	ldi	r20, 0x05	; 5
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	51 83       	std	Z+1, r21	; 0x01
    208a:	40 83       	st	Z, r20
	}
	if (HumVal >= max_humidity)
    208c:	42 2f       	mov	r20, r18
    208e:	53 2f       	mov	r21, r19
    2090:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <max_humidity>
    2094:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <max_humidity+0x1>
    2098:	42 17       	cp	r20, r18
    209a:	53 07       	cpc	r21, r19
    209c:	60 f0       	brcs	.+24     	; 0x20b6 <compare_for_alarm+0x118>
	{
		res++;
    209e:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x08;
    20a0:	fc 01       	movw	r30, r24
    20a2:	e1 50       	subi	r30, 0x01	; 1
    20a4:	f0 48       	sbci	r31, 0x80	; 128
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e0 0f       	add	r30, r16
    20ac:	f1 1f       	adc	r31, r17
    20ae:	28 e0       	ldi	r18, 0x08	; 8
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	31 83       	std	Z+1, r19	; 0x01
    20b4:	20 83       	st	Z, r18
	}
	if (HumVal <= min_humidity)
    20b6:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <min_humidity>
    20ba:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <min_humidity+0x1>
    20be:	24 17       	cp	r18, r20
    20c0:	35 07       	cpc	r19, r21
    20c2:	68 f0       	brcs	.+26     	; 0x20de <compare_for_alarm+0x140>
	{
		res++;
    20c4:	01 96       	adiw	r24, 0x01	; 1
		Talarm[res - 1] = 0x07;
    20c6:	9c 01       	movw	r18, r24
    20c8:	21 50       	subi	r18, 0x01	; 1
    20ca:	30 48       	sbci	r19, 0x80	; 128
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	f8 01       	movw	r30, r16
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	27 e0       	ldi	r18, 0x07	; 7
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	31 83       	std	Z+1, r19	; 0x01
    20dc:	20 83       	st	Z, r18
	}
	return res;
}
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	08 95       	ret

000020e4 <main>:

#endif

int main(void)
{
	adc_init();
    20e4:	0e 94 46 05 	call	0xa8c	; 0xa8c <adc_init>
	DHT_Setup();
    20e8:	0e 94 5f 00 	call	0xbe	; 0xbe <DHT_Setup>
	USART_Init(115200);			/* Initiate USART with 115200 baud rate */
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	72 ec       	ldi	r23, 0xC2	; 194
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 5d 13 	call	0x26ba	; 0x26ba <USART_Init>
	init_millis(16000000UL); //frequency the atmega328p is running at
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	74 e2       	ldi	r23, 0x24	; 36
    20fc:	84 ef       	ldi	r24, 0xF4	; 244
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 3a 13 	call	0x2674	; 0x2674 <init_millis>
	sei();					/* Start global interrupt */
    2104:	78 94       	sei
		USART_TxChar((voltage_measure & 0xff));
		USART_TxChar(((voltage_measure >> 8) & 0xff));
		_delay_ms(5000);
	}*/

	while(!ESP8266_Begin());
    2106:	0e 94 1b 02 	call	0x436	; 0x436 <ESP8266_Begin>
    210a:	88 23       	and	r24, r24
    210c:	e1 f3       	breq	.-8      	; 0x2106 <main+0x22>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	0e 94 3b 02 	call	0x476	; 0x476 <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);		/* 0 = Single; 1 = Multi */
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);	/* 0 = Normal Mode; 1 = Transperant Mode */
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	0e 94 b1 01 	call	0x362	; 0x362 <ESP8266_ApplicationMode>
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
    2120:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ESP8266_connected>
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	31 f4       	brne	.+12     	; 0x2134 <main+0x50>
	ESP8266_JoinAccessPoint(ssid, password);
    2128:	61 e8       	ldi	r22, 0x81	; 129
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	81 ec       	ldi	r24, 0xC1	; 193
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 70 02 	call	0x4e0	; 0x4e0 <ESP8266_JoinAccessPoint>
	//ESP8266_Start(0, IP_ADDRESS, DEFAULT_PORT);
	
	login_done = false;
    2134:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
	message_check = false;
    2138:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <message_check>
	alarm_location = true;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <alarm_location>
    2142:	9e c0       	rjmp	.+316    	; 0x2280 <main+0x19c>
	
	while(1)
	{
		while(login_done == false)
		{
			ESP8266_Start(0, IP_ADDRESS, DEFAULT_PORT);
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	51 e0       	ldi	r21, 0x01	; 1
    2148:	67 e0       	ldi	r22, 0x07	; 7
    214a:	71 e0       	ldi	r23, 0x01	; 1
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	0e 94 03 03 	call	0x606	; 0x606 <ESP8266_Start>
			Connect_Status = ESP8266_connected();
    2152:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ESP8266_connected>
    2156:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <Connect_Status>
			if(Connect_Status == ESP8266_NOT_CONNECTED_TO_AP)
    215a:	83 30       	cpi	r24, 0x03	; 3
    215c:	31 f4       	brne	.+12     	; 0x216a <main+0x86>
			ESP8266_JoinAccessPoint(ssid, password);
    215e:	61 e8       	ldi	r22, 0x81	; 129
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	81 ec       	ldi	r24, 0xC1	; 193
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 70 02 	call	0x4e0	; 0x4e0 <ESP8266_JoinAccessPoint>
			if(Connect_Status == ESP8266_TRANSMISSION_DISCONNECTED)
    216a:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <Connect_Status>
    216e:	82 30       	cpi	r24, 0x02	; 2
    2170:	39 f4       	brne	.+14     	; 0x2180 <main+0x9c>
			ESP8266_Start(0, IP_ADDRESS, DEFAULT_PORT);
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	51 e0       	ldi	r21, 0x01	; 1
    2176:	67 e0       	ldi	r22, 0x07	; 7
    2178:	71 e0       	ldi	r23, 0x01	; 1
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	0e 94 03 03 	call	0x606	; 0x606 <ESP8266_Start>
			
			memset(_buffer, 0, sizeof(_buffer));
    2180:	ce e8       	ldi	r28, 0x8E	; 142
    2182:	d5 e0       	ldi	r29, 0x05	; 5
    2184:	10 e8       	ldi	r17, 0x80	; 128
    2186:	fe 01       	movw	r30, r28
    2188:	21 2f       	mov	r18, r17
    218a:	11 92       	st	Z+, r1
    218c:	2a 95       	dec	r18
    218e:	e9 f7       	brne	.-6      	; 0x218a <main+0xa6>
			ESP8266_Clear();
    2190:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
			//sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
			genLoginMessage(imei_num);
    2194:	80 e6       	ldi	r24, 0x60	; 96
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 49 07 	call	0xe92	; 0xe92 <genLoginMessage>
			ESP8266_Send_with_len(_buffer, 28);
    219c:	6c e1       	ldi	r22, 0x1C	; 28
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	ce 01       	movw	r24, r28
    21a2:	0e 94 6d 03 	call	0x6da	; 0x6da <ESP8266_Send_with_len>
			
			memset(_buffer, 0, sizeof(_buffer));
    21a6:	fe 01       	movw	r30, r28
    21a8:	11 92       	st	Z+, r1
    21aa:	1a 95       	dec	r17
    21ac:	e9 f7       	brne	.-6      	; 0x21a8 <main+0xc4>
			prev_millis = millis();
    21ae:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    21b2:	60 93 62 06 	sts	0x0662, r22	; 0x800662 <prev_millis>
    21b6:	70 93 63 06 	sts	0x0663, r23	; 0x800663 <prev_millis+0x1>
    21ba:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <prev_millis+0x2>
    21be:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <prev_millis+0x3>
			while(millis() - prev_millis < timeout)
    21c2:	0b c0       	rjmp	.+22     	; 0x21da <main+0xf6>
			{
				rece_len = Read_Data(_buffer);
    21c4:	8e e8       	ldi	r24, 0x8E	; 142
    21c6:	95 e0       	ldi	r25, 0x05	; 5
    21c8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Read_Data>
    21cc:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <rece_len+0x1>
    21d0:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <rece_len>
				if(rece_len > 0)
    21d4:	18 16       	cp	r1, r24
    21d6:	19 06       	cpc	r1, r25
    21d8:	ec f0       	brlt	.+58     	; 0x2214 <main+0x130>
			genLoginMessage(imei_num);
			ESP8266_Send_with_len(_buffer, 28);
			
			memset(_buffer, 0, sizeof(_buffer));
			prev_millis = millis();
			while(millis() - prev_millis < timeout)
    21da:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    21de:	00 91 62 06 	lds	r16, 0x0662	; 0x800662 <prev_millis>
    21e2:	10 91 63 06 	lds	r17, 0x0663	; 0x800663 <prev_millis+0x1>
    21e6:	20 91 64 06 	lds	r18, 0x0664	; 0x800664 <prev_millis+0x2>
    21ea:	30 91 65 06 	lds	r19, 0x0665	; 0x800665 <prev_millis+0x3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	80 1b       	sub	r24, r16
    21f4:	91 0b       	sbc	r25, r17
    21f6:	a2 0b       	sbc	r26, r18
    21f8:	b3 0b       	sbc	r27, r19
    21fa:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <timeout>
    21fe:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <timeout+0x1>
    2202:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <timeout+0x2>
    2206:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <timeout+0x3>
    220a:	80 17       	cp	r24, r16
    220c:	91 07       	cpc	r25, r17
    220e:	a2 07       	cpc	r26, r18
    2210:	b3 07       	cpc	r27, r19
    2212:	c0 f2       	brcs	.-80     	; 0x21c4 <main+0xe0>
				{
					break;
				}
			}
			
			if(rece_len > 0)
    2214:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <rece_len>
    2218:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <rece_len+0x1>
    221c:	18 16       	cp	r1, r24
    221e:	19 06       	cpc	r1, r25
    2220:	14 f5       	brge	.+68     	; 0x2266 <main+0x182>
			{
				get_actual_response();
    2222:	0e 94 bf 06 	call	0xd7e	; 0xd7e <get_actual_response>
				//USART_SendString("response:\n");
				//USART_SendString_len(server_response, 28);
				//USART_SendString("\r\n");
				parse_received_message(server_response);
    2226:	88 e1       	ldi	r24, 0x18	; 24
    2228:	96 e0       	ldi	r25, 0x06	; 6
    222a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <parse_received_message>
				message_check = check_message_correctness(28);
    222e:	8c e1       	ldi	r24, 0x1C	; 28
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <check_message_correctness>
    2236:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <message_check>
				
				
				if(message_check == true)
    223a:	88 23       	and	r24, r24
    223c:	79 f0       	breq	.+30     	; 0x225c <main+0x178>
				{
					//USART_SendString("login response is correct\n");
					login_done = true;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <login_done>
					ESP8266_Clear();
    2244:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
    2248:	ff ef       	ldi	r31, 0xFF	; 255
    224a:	23 ed       	ldi	r18, 0xD3	; 211
    224c:	80 e3       	ldi	r24, 0x30	; 48
    224e:	f1 50       	subi	r31, 0x01	; 1
    2250:	20 40       	sbci	r18, 0x00	; 0
    2252:	80 40       	sbci	r24, 0x00	; 0
    2254:	e1 f7       	brne	.-8      	; 0x224e <main+0x16a>
    2256:	00 c0       	rjmp	.+0      	; 0x2258 <main+0x174>
    2258:	00 00       	nop
    225a:	12 c0       	rjmp	.+36     	; 0x2280 <main+0x19c>
					_delay_ms(1000);
				}
				else
				{
					//USART_SendString("login response is false\n");
					login_done = false;
    225c:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
					ESP8266_Close();
    2260:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <main+0x19c>
				}
			}
			else
			{
				//USART_SendString("Timeout On Login\n");
				login_done = false;
    2266:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
				ESP8266_Close();
    226a:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	eb e7       	ldi	r30, 0x7B	; 123
    2272:	f2 e9       	ldi	r31, 0x92	; 146
    2274:	91 50       	subi	r25, 0x01	; 1
    2276:	e0 40       	sbci	r30, 0x00	; 0
    2278:	f0 40       	sbci	r31, 0x00	; 0
    227a:	e1 f7       	brne	.-8      	; 0x2274 <main+0x190>
    227c:	00 c0       	rjmp	.+0      	; 0x227e <main+0x19a>
    227e:	00 00       	nop
	
	
	
	while(1)
	{
		while(login_done == false)
    2280:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <login_done>
    2284:	88 23       	and	r24, r24
    2286:	09 f4       	brne	.+2      	; 0x228a <main+0x1a6>
    2288:	5d cf       	rjmp	.-326    	; 0x2144 <main+0x60>
				ESP8266_Close();
				_delay_ms(3000);
			}
		}
		
		if(login_done == true)
    228a:	d1 f3       	breq	.-12     	; 0x2280 <main+0x19c>
		{
			if(cntr == 0)
    228c:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <cntr>
    2290:	81 11       	cpse	r24, r1
    2292:	76 c0       	rjmp	.+236    	; 0x2380 <main+0x29c>
			{
				//ESP8266_Start(0, IP_ADDRESS, PORT);
				memset(_buffer, 0, sizeof(_buffer));
    2294:	ce e8       	ldi	r28, 0x8E	; 142
    2296:	d5 e0       	ldi	r29, 0x05	; 5
    2298:	10 e8       	ldi	r17, 0x80	; 128
    229a:	fe 01       	movw	r30, r28
    229c:	21 2f       	mov	r18, r17
    229e:	11 92       	st	Z+, r1
    22a0:	2a 95       	dec	r18
    22a2:	e9 f7       	brne	.-6      	; 0x229e <main+0x1ba>
				//sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
				genheartbeatMessage();
    22a4:	0e 94 1b 09 	call	0x1236	; 0x1236 <genheartbeatMessage>
				ESP8266_Clear();
    22a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
				ESP8266_Send_with_len(_buffer, 14);
    22ac:	6e e0       	ldi	r22, 0x0E	; 14
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	ce 01       	movw	r24, r28
    22b2:	0e 94 6d 03 	call	0x6da	; 0x6da <ESP8266_Send_with_len>
				memset(_buffer, 0, sizeof(_buffer));
    22b6:	fe 01       	movw	r30, r28
    22b8:	11 92       	st	Z+, r1
    22ba:	1a 95       	dec	r17
    22bc:	e9 f7       	brne	.-6      	; 0x22b8 <main+0x1d4>
				prev_millis = millis();
    22be:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    22c2:	60 93 62 06 	sts	0x0662, r22	; 0x800662 <prev_millis>
    22c6:	70 93 63 06 	sts	0x0663, r23	; 0x800663 <prev_millis+0x1>
    22ca:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <prev_millis+0x2>
    22ce:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <prev_millis+0x3>
				while(millis() - prev_millis < timeout)
    22d2:	0b c0       	rjmp	.+22     	; 0x22ea <main+0x206>
				{
					rece_len = Read_Data(_buffer);
    22d4:	8e e8       	ldi	r24, 0x8E	; 142
    22d6:	95 e0       	ldi	r25, 0x05	; 5
    22d8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Read_Data>
    22dc:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <rece_len+0x1>
    22e0:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <rece_len>
					if(rece_len > 0)
    22e4:	18 16       	cp	r1, r24
    22e6:	19 06       	cpc	r1, r25
    22e8:	ec f0       	brlt	.+58     	; 0x2324 <main+0x240>
				genheartbeatMessage();
				ESP8266_Clear();
				ESP8266_Send_with_len(_buffer, 14);
				memset(_buffer, 0, sizeof(_buffer));
				prev_millis = millis();
				while(millis() - prev_millis < timeout)
    22ea:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    22ee:	00 91 62 06 	lds	r16, 0x0662	; 0x800662 <prev_millis>
    22f2:	10 91 63 06 	lds	r17, 0x0663	; 0x800663 <prev_millis+0x1>
    22f6:	20 91 64 06 	lds	r18, 0x0664	; 0x800664 <prev_millis+0x2>
    22fa:	30 91 65 06 	lds	r19, 0x0665	; 0x800665 <prev_millis+0x3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	80 1b       	sub	r24, r16
    2304:	91 0b       	sbc	r25, r17
    2306:	a2 0b       	sbc	r26, r18
    2308:	b3 0b       	sbc	r27, r19
    230a:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <timeout>
    230e:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <timeout+0x1>
    2312:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <timeout+0x2>
    2316:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <timeout+0x3>
    231a:	80 17       	cp	r24, r16
    231c:	91 07       	cpc	r25, r17
    231e:	a2 07       	cpc	r26, r18
    2320:	b3 07       	cpc	r27, r19
    2322:	c0 f2       	brcs	.-80     	; 0x22d4 <main+0x1f0>
					{
						break;
					}
				}
				
				if(rece_len > 0)
    2324:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <rece_len>
    2328:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <rece_len+0x1>
    232c:	18 16       	cp	r1, r24
    232e:	19 06       	cpc	r1, r25
    2330:	cc f4       	brge	.+50     	; 0x2364 <main+0x280>
				{
					get_actual_response();
    2332:	0e 94 bf 06 	call	0xd7e	; 0xd7e <get_actual_response>
					//USART_SendString("response:\n");
					//USART_SendString_len(server_response, 29);
					//USART_SendString("\r\n");
					parse_received_message(server_response);
    2336:	88 e1       	ldi	r24, 0x18	; 24
    2338:	96 e0       	ldi	r25, 0x06	; 6
    233a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <parse_received_message>
					message_check = check_message_correctness(29);
    233e:	8d e1       	ldi	r24, 0x1D	; 29
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <check_message_correctness>
    2346:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <message_check>
					
					if(message_check == true)
    234a:	88 23       	and	r24, r24
    234c:	31 f0       	breq	.+12     	; 0x235a <main+0x276>
					{
						//USART_SendString("heartbeat response is correct\n");
						ESP8266_Clear();
    234e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
						cntr = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <cntr>
    2358:	5e c1       	rjmp	.+700    	; 0x2616 <main+0x532>
					}
					else
					{
						//USART_SendString("heartbeat response is false\n");
						login_done = false;
    235a:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
						ESP8266_Close();
    235e:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    2362:	59 c1       	rjmp	.+690    	; 0x2616 <main+0x532>
					}
				}
				else
				{
					//USART_SendString("timeout on heartbeat\n");
					login_done = false;
    2364:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
					ESP8266_Close();
    2368:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    236c:	ff ef       	ldi	r31, 0xFF	; 255
    236e:	2b e7       	ldi	r18, 0x7B	; 123
    2370:	82 e9       	ldi	r24, 0x92	; 146
    2372:	f1 50       	subi	r31, 0x01	; 1
    2374:	20 40       	sbci	r18, 0x00	; 0
    2376:	80 40       	sbci	r24, 0x00	; 0
    2378:	e1 f7       	brne	.-8      	; 0x2372 <main+0x28e>
    237a:	00 c0       	rjmp	.+0      	; 0x237c <main+0x298>
    237c:	00 00       	nop
    237e:	4b c1       	rjmp	.+662    	; 0x2616 <main+0x532>
					_delay_ms(3000);
				}
			}
			else
			{
				alarm_location = true;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <alarm_location>
				readDHT11Values();
    2386:	0e 94 09 05 	call	0xa12	; 0xa12 <readDHT11Values>
				readCurrentMeasure();
    238a:	0e 94 61 05 	call	0xac2	; 0xac2 <readCurrentMeasure>
				readVoltageMeasure();
    238e:	0e 94 41 06 	call	0xc82	; 0xc82 <readVoltageMeasure>
				numalarm = compare_for_alarm(current_measure, voltage_measure, temperature_sensor * 100, humidity_sensor * 100, Talarm);
    2392:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <humidity_sensor>
    2396:	84 e6       	ldi	r24, 0x64	; 100
    2398:	82 9f       	mul	r24, r18
    239a:	90 01       	movw	r18, r0
    239c:	11 24       	eor	r1, r1
    239e:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <temperature_sensor>
    23a2:	84 9f       	mul	r24, r20
    23a4:	a0 01       	movw	r20, r0
    23a6:	11 24       	eor	r1, r1
    23a8:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <voltage_measure>
    23ac:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <voltage_measure+0x1>
    23b0:	04 e7       	ldi	r16, 0x74	; 116
    23b2:	16 e0       	ldi	r17, 0x06	; 6
    23b4:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <current_measure>
    23b8:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <current_measure+0x1>
    23bc:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <compare_for_alarm>
    23c0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <numalarm+0x1>
    23c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <numalarm>
				//ESP8266_Start(0, IP_ADDRESS, PORT);
				if (numalarm > 0)
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	11 f0       	breq	.+4      	; 0x23d0 <main+0x2ec>
				{
					alarm_location = false;
    23cc:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <alarm_location>
				}
				if(alarm_location == true)
    23d0:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <alarm_location>
    23d4:	22 23       	and	r18, r18
    23d6:	09 f4       	brne	.+2      	; 0x23da <main+0x2f6>
    23d8:	88 c0       	rjmp	.+272    	; 0x24ea <main+0x406>
				{
					memset(_buffer, 0, sizeof(_buffer));
    23da:	ce e8       	ldi	r28, 0x8E	; 142
    23dc:	d5 e0       	ldi	r29, 0x05	; 5
    23de:	10 e8       	ldi	r17, 0x80	; 128
    23e0:	fe 01       	movw	r30, r28
    23e2:	21 2f       	mov	r18, r17
    23e4:	11 92       	st	Z+, r1
    23e6:	2a 95       	dec	r18
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <main+0x300>
					//sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
					genMeasurmentMessage(current_measure,voltage_measure,temperature_sensor * 100, humidity_sensor * 100);
    23ea:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <humidity_sensor>
    23ee:	84 e6       	ldi	r24, 0x64	; 100
    23f0:	82 9f       	mul	r24, r18
    23f2:	90 01       	movw	r18, r0
    23f4:	11 24       	eor	r1, r1
    23f6:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <temperature_sensor>
    23fa:	84 9f       	mul	r24, r20
    23fc:	a0 01       	movw	r20, r0
    23fe:	11 24       	eor	r1, r1
    2400:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <voltage_measure>
    2404:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <voltage_measure+0x1>
    2408:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <current_measure>
    240c:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <current_measure+0x1>
    2410:	0e 94 b8 0a 	call	0x1570	; 0x1570 <genMeasurmentMessage>
					ESP8266_Clear();
    2414:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
					ESP8266_Send_with_len(_buffer, 21);
    2418:	65 e1       	ldi	r22, 0x15	; 21
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	ce 01       	movw	r24, r28
    241e:	0e 94 6d 03 	call	0x6da	; 0x6da <ESP8266_Send_with_len>
					memset(_buffer, 0, sizeof(_buffer));
    2422:	fe 01       	movw	r30, r28
    2424:	11 92       	st	Z+, r1
    2426:	1a 95       	dec	r17
    2428:	e9 f7       	brne	.-6      	; 0x2424 <main+0x340>
					prev_millis = millis();
    242a:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    242e:	60 93 62 06 	sts	0x0662, r22	; 0x800662 <prev_millis>
    2432:	70 93 63 06 	sts	0x0663, r23	; 0x800663 <prev_millis+0x1>
    2436:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <prev_millis+0x2>
    243a:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <prev_millis+0x3>
					while(millis() - prev_millis < timeout)
    243e:	0b c0       	rjmp	.+22     	; 0x2456 <main+0x372>
					{
						rece_len = Read_Data(_buffer);
    2440:	8e e8       	ldi	r24, 0x8E	; 142
    2442:	95 e0       	ldi	r25, 0x05	; 5
    2444:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Read_Data>
    2448:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <rece_len+0x1>
    244c:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <rece_len>
						if(rece_len > 0)
    2450:	18 16       	cp	r1, r24
    2452:	19 06       	cpc	r1, r25
    2454:	ec f0       	brlt	.+58     	; 0x2490 <main+0x3ac>
					genMeasurmentMessage(current_measure,voltage_measure,temperature_sensor * 100, humidity_sensor * 100);
					ESP8266_Clear();
					ESP8266_Send_with_len(_buffer, 21);
					memset(_buffer, 0, sizeof(_buffer));
					prev_millis = millis();
					while(millis() - prev_millis < timeout)
    2456:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    245a:	00 91 62 06 	lds	r16, 0x0662	; 0x800662 <prev_millis>
    245e:	10 91 63 06 	lds	r17, 0x0663	; 0x800663 <prev_millis+0x1>
    2462:	20 91 64 06 	lds	r18, 0x0664	; 0x800664 <prev_millis+0x2>
    2466:	30 91 65 06 	lds	r19, 0x0665	; 0x800665 <prev_millis+0x3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	80 1b       	sub	r24, r16
    2470:	91 0b       	sbc	r25, r17
    2472:	a2 0b       	sbc	r26, r18
    2474:	b3 0b       	sbc	r27, r19
    2476:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <timeout>
    247a:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <timeout+0x1>
    247e:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <timeout+0x2>
    2482:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <timeout+0x3>
    2486:	80 17       	cp	r24, r16
    2488:	91 07       	cpc	r25, r17
    248a:	a2 07       	cpc	r26, r18
    248c:	b3 07       	cpc	r27, r19
    248e:	c0 f2       	brcs	.-80     	; 0x2440 <main+0x35c>
						{
							break;
						}
					}
					
					if(rece_len > 0)
    2490:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <rece_len>
    2494:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <rece_len+0x1>
    2498:	18 16       	cp	r1, r24
    249a:	19 06       	cpc	r1, r25
    249c:	c4 f4       	brge	.+48     	; 0x24ce <main+0x3ea>
					{
						get_actual_response();
    249e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <get_actual_response>
						//USART_SendString("response:\n");
						//USART_SendString_len(server_response, 21);
						//USART_SendString("\r\n");
						parse_received_message(server_response);
    24a2:	88 e1       	ldi	r24, 0x18	; 24
    24a4:	96 e0       	ldi	r25, 0x06	; 6
    24a6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <parse_received_message>
						message_check = check_message_correctness(21);
    24aa:	85 e1       	ldi	r24, 0x15	; 21
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <check_message_correctness>
    24b2:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <message_check>
						
						if(message_check == true)
    24b6:	88 23       	and	r24, r24
    24b8:	29 f0       	breq	.+10     	; 0x24c4 <main+0x3e0>
						{
							//USART_SendString("measurment response is correct\n");
							ESP8266_Clear();
    24ba:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
							cntr = 0;
    24be:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <cntr>
    24c2:	a9 c0       	rjmp	.+338    	; 0x2616 <main+0x532>
						}
						else
						{
							//USART_SendString("measurment response is false\n");
							login_done = false;
    24c4:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
							ESP8266_Close();
    24c8:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    24cc:	a4 c0       	rjmp	.+328    	; 0x2616 <main+0x532>
						}
					}
					else
					{
						//USART_SendString("timeout on measurment\n");
						login_done = false;
    24ce:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
						ESP8266_Close();
    24d2:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    24d6:	ff ef       	ldi	r31, 0xFF	; 255
    24d8:	2b e7       	ldi	r18, 0x7B	; 123
    24da:	82 e9       	ldi	r24, 0x92	; 146
    24dc:	f1 50       	subi	r31, 0x01	; 1
    24de:	20 40       	sbci	r18, 0x00	; 0
    24e0:	80 40       	sbci	r24, 0x00	; 0
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <main+0x3f8>
    24e4:	00 c0       	rjmp	.+0      	; 0x24e6 <main+0x402>
    24e6:	00 00       	nop
    24e8:	96 c0       	rjmp	.+300    	; 0x2616 <main+0x532>
						_delay_ms(3000);
					}
				}
				else
				{
					memset(_buffer, 0, sizeof(_buffer));
    24ea:	ce e8       	ldi	r28, 0x8E	; 142
    24ec:	d5 e0       	ldi	r29, 0x05	; 5
    24ee:	68 94       	set
    24f0:	dd 24       	eor	r13, r13
    24f2:	d7 f8       	bld	r13, 7
    24f4:	fe 01       	movw	r30, r28
    24f6:	2d 2d       	mov	r18, r13
    24f8:	11 92       	st	Z+, r1
    24fa:	2a 95       	dec	r18
    24fc:	e9 f7       	brne	.-6      	; 0x24f8 <main+0x414>
					//sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
					genalarmMessage(numalarm, current_measure, voltage_measure, temperature_sensor * 100, humidity_sensor * 100, Talarm);
    24fe:	00 91 c8 04 	lds	r16, 0x04C8	; 0x8004c8 <humidity_sensor>
    2502:	94 e6       	ldi	r25, 0x64	; 100
    2504:	90 9f       	mul	r25, r16
    2506:	80 01       	movw	r16, r0
    2508:	11 24       	eor	r1, r1
    250a:	20 91 c9 04 	lds	r18, 0x04C9	; 0x8004c9 <temperature_sensor>
    250e:	92 9f       	mul	r25, r18
    2510:	90 01       	movw	r18, r0
    2512:	11 24       	eor	r1, r1
    2514:	40 91 b4 04 	lds	r20, 0x04B4	; 0x8004b4 <voltage_measure>
    2518:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <voltage_measure+0x1>
    251c:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <current_measure>
    2520:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <current_measure+0x1>
    2524:	0f 2e       	mov	r0, r31
    2526:	f4 e7       	ldi	r31, 0x74	; 116
    2528:	ef 2e       	mov	r14, r31
    252a:	f6 e0       	ldi	r31, 0x06	; 6
    252c:	ff 2e       	mov	r15, r31
    252e:	f0 2d       	mov	r31, r0
    2530:	0e 94 9e 0c 	call	0x193c	; 0x193c <genalarmMessage>
					ESP8266_Clear();
    2534:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
					ESP8266_Send_with_len(_buffer, 22 + numalarm);
    2538:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <numalarm>
    253c:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <numalarm+0x1>
    2540:	6a 5e       	subi	r22, 0xEA	; 234
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	ce 01       	movw	r24, r28
    2546:	0e 94 6d 03 	call	0x6da	; 0x6da <ESP8266_Send_with_len>
					memset(_buffer, 0, sizeof(_buffer));
    254a:	fe 01       	movw	r30, r28
    254c:	11 92       	st	Z+, r1
    254e:	da 94       	dec	r13
    2550:	e9 f7       	brne	.-6      	; 0x254c <main+0x468>
					prev_millis = millis();
    2552:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    2556:	60 93 62 06 	sts	0x0662, r22	; 0x800662 <prev_millis>
    255a:	70 93 63 06 	sts	0x0663, r23	; 0x800663 <prev_millis+0x1>
    255e:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <prev_millis+0x2>
    2562:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <prev_millis+0x3>
					while(millis() - prev_millis < timeout)
    2566:	0b c0       	rjmp	.+22     	; 0x257e <main+0x49a>
					{
						rece_len = Read_Data(_buffer);
    2568:	8e e8       	ldi	r24, 0x8E	; 142
    256a:	95 e0       	ldi	r25, 0x05	; 5
    256c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Read_Data>
    2570:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <rece_len+0x1>
    2574:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <rece_len>
						if(rece_len > 0)
    2578:	18 16       	cp	r1, r24
    257a:	19 06       	cpc	r1, r25
    257c:	ec f0       	brlt	.+58     	; 0x25b8 <main+0x4d4>
					genalarmMessage(numalarm, current_measure, voltage_measure, temperature_sensor * 100, humidity_sensor * 100, Talarm);
					ESP8266_Clear();
					ESP8266_Send_with_len(_buffer, 22 + numalarm);
					memset(_buffer, 0, sizeof(_buffer));
					prev_millis = millis();
					while(millis() - prev_millis < timeout)
    257e:	0e 94 4d 13 	call	0x269a	; 0x269a <millis>
    2582:	00 91 62 06 	lds	r16, 0x0662	; 0x800662 <prev_millis>
    2586:	10 91 63 06 	lds	r17, 0x0663	; 0x800663 <prev_millis+0x1>
    258a:	20 91 64 06 	lds	r18, 0x0664	; 0x800664 <prev_millis+0x2>
    258e:	30 91 65 06 	lds	r19, 0x0665	; 0x800665 <prev_millis+0x3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	80 1b       	sub	r24, r16
    2598:	91 0b       	sbc	r25, r17
    259a:	a2 0b       	sbc	r26, r18
    259c:	b3 0b       	sbc	r27, r19
    259e:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <timeout>
    25a2:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <timeout+0x1>
    25a6:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <timeout+0x2>
    25aa:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <timeout+0x3>
    25ae:	80 17       	cp	r24, r16
    25b0:	91 07       	cpc	r25, r17
    25b2:	a2 07       	cpc	r26, r18
    25b4:	b3 07       	cpc	r27, r19
    25b6:	c0 f2       	brcs	.-80     	; 0x2568 <main+0x484>
						{
							break;
						}
					}
					
					if(rece_len > 0)
    25b8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <rece_len>
    25bc:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <rece_len+0x1>
    25c0:	18 16       	cp	r1, r24
    25c2:	19 06       	cpc	r1, r25
    25c4:	dc f4       	brge	.+54     	; 0x25fc <main+0x518>
					{
						get_actual_response();
    25c6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <get_actual_response>
						//USART_SendString("response:\n");
						//USART_SendString_len(server_response, 22 + numalarm);
						//USART_SendString("\r\n");
						parse_received_message(server_response);
    25ca:	88 e1       	ldi	r24, 0x18	; 24
    25cc:	96 e0       	ldi	r25, 0x06	; 6
    25ce:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <parse_received_message>
						message_check = check_message_correctness(22 + numalarm);
    25d2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <numalarm>
    25d6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <numalarm+0x1>
    25da:	46 96       	adiw	r24, 0x16	; 22
    25dc:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <check_message_correctness>
    25e0:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <message_check>
						
						if(message_check == true)
    25e4:	88 23       	and	r24, r24
    25e6:	29 f0       	breq	.+10     	; 0x25f2 <main+0x50e>
						{
							//USART_SendString("alarm response is correct\n");
							ESP8266_Clear();
    25e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP8266_Clear>
							cntr = 0;
    25ec:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <cntr>
    25f0:	12 c0       	rjmp	.+36     	; 0x2616 <main+0x532>
						}
						else
						{
							//USART_SendString("alarm response is false\n");
							login_done = false;
    25f2:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
							ESP8266_Close();
    25f6:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    25fa:	0d c0       	rjmp	.+26     	; 0x2616 <main+0x532>
						}
					}
					else
					{
						//USART_SendString("timeout on alarm\n");
						login_done = false;
    25fc:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <login_done>
						ESP8266_Close();
    2600:	0e 94 34 02 	call	0x468	; 0x468 <ESP8266_Close>
    2604:	ff ef       	ldi	r31, 0xFF	; 255
    2606:	2b e7       	ldi	r18, 0x7B	; 123
    2608:	82 e9       	ldi	r24, 0x92	; 146
    260a:	f1 50       	subi	r31, 0x01	; 1
    260c:	20 40       	sbci	r18, 0x00	; 0
    260e:	80 40       	sbci	r24, 0x00	; 0
    2610:	e1 f7       	brne	.-8      	; 0x260a <main+0x526>
    2612:	00 c0       	rjmp	.+0      	; 0x2614 <main+0x530>
    2614:	00 00       	nop
    2616:	9f ef       	ldi	r25, 0xFF	; 255
    2618:	ef e4       	ldi	r30, 0x4F	; 79
    261a:	f3 ec       	ldi	r31, 0xC3	; 195
    261c:	91 50       	subi	r25, 0x01	; 1
    261e:	e0 40       	sbci	r30, 0x00	; 0
    2620:	f0 40       	sbci	r31, 0x00	; 0
    2622:	e1 f7       	brne	.-8      	; 0x261c <main+0x538>
    2624:	00 c0       	rjmp	.+0      	; 0x2626 <main+0x542>
    2626:	00 00       	nop
    2628:	2b ce       	rjmp	.-938    	; 0x2280 <main+0x19c>

0000262a <__vector_7>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    262a:	1f 92       	push	r1
    262c:	0f 92       	push	r0
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	0f 92       	push	r0
    2632:	11 24       	eor	r1, r1
    2634:	8f 93       	push	r24
    2636:	9f 93       	push	r25
    2638:	af 93       	push	r26
    263a:	bf 93       	push	r27
  timer1_millis++;
    263c:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <timer1_millis>
    2640:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <timer1_millis+0x1>
    2644:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <timer1_millis+0x2>
    2648:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <timer1_millis+0x3>
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	a1 1d       	adc	r26, r1
    2650:	b1 1d       	adc	r27, r1
    2652:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <timer1_millis>
    2656:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <timer1_millis+0x1>
    265a:	a0 93 6d 05 	sts	0x056D, r26	; 0x80056d <timer1_millis+0x2>
    265e:	b0 93 6e 05 	sts	0x056E, r27	; 0x80056e <timer1_millis+0x3>
}
    2662:	bf 91       	pop	r27
    2664:	af 91       	pop	r26
    2666:	9f 91       	pop	r25
    2668:	8f 91       	pop	r24
    266a:	0f 90       	pop	r0
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	0f 90       	pop	r0
    2670:	1f 90       	pop	r1
    2672:	18 95       	reti

00002674 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    2674:	20 e4       	ldi	r18, 0x40	; 64
    2676:	3f e1       	ldi	r19, 0x1F	; 31
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    2680:	8e b5       	in	r24, 0x2e	; 46
    2682:	8a 60       	ori	r24, 0x0A	; 10
    2684:	8e bd       	out	0x2e, r24	; 46

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    2686:	bb 27       	eor	r27, r27
    2688:	a5 2f       	mov	r26, r21
    268a:	94 2f       	mov	r25, r20
    268c:	83 2f       	mov	r24, r19
    268e:	8b bd       	out	0x2b, r24	; 43
  OCR1AL = ctc_match_overflow;
    2690:	2a bd       	out	0x2a, r18	; 42

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    2692:	89 b7       	in	r24, 0x39	; 57
    2694:	80 61       	ori	r24, 0x10	; 16
    2696:	89 bf       	out	0x39, r24	; 57
    2698:	08 95       	ret

0000269a <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    269a:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    269c:	21 e0       	ldi	r18, 0x01	; 1
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <millis+0x18>
    millis_return = timer1_millis;
    26a0:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <timer1_millis>
    26a4:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <timer1_millis+0x1>
    26a8:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <timer1_millis+0x2>
    26ac:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	21 11       	cpse	r18, r1
    26b4:	f5 cf       	rjmp	.-22     	; 0x26a0 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    26b6:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
    26b8:	08 95       	ret

000026ba <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
}
    26ba:	2b b1       	in	r18, 0x0b	; 11
    26bc:	22 60       	ori	r18, 0x02	; 2
    26be:	2b b9       	out	0x0b, r18	; 11
    26c0:	2a b1       	in	r18, 0x0a	; 10
    26c2:	28 69       	ori	r18, 0x98	; 152
    26c4:	2a b9       	out	0x0a, r18	; 10
    26c6:	20 b5       	in	r18, 0x20	; 32
    26c8:	26 68       	ori	r18, 0x86	; 134
    26ca:	20 bd       	out	0x20, r18	; 32
    26cc:	0e 94 ce 14 	call	0x299c	; 0x299c <__floatunsisf>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__mulsf3>
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	74 e2       	ldi	r23, 0x24	; 36
    26e4:	84 e7       	ldi	r24, 0x74	; 116
    26e6:	9b e4       	ldi	r25, 0x4B	; 75
    26e8:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 b9 13 	call	0x2772	; 0x2772 <__subsf3>
    26f8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <round>
    26fc:	0e 94 98 14 	call	0x2930	; 0x2930 <__fixsfsi>
    2700:	69 b9       	out	0x09, r22	; 9
    2702:	70 bd       	out	0x20, r23	; 32
    2704:	08 95       	ret

00002706 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
    2706:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
    2708:	5d 9b       	sbis	0x0b, 5	; 11
    270a:	fe cf       	rjmp	.-4      	; 0x2708 <USART_TxChar+0x2>
}
    270c:	08 95       	ret

0000270e <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	8c 01       	movw	r16, r24
	int i=0;																	
    2718:	c0 e0       	ldi	r28, 0x00	; 0
    271a:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    271e:	0e 94 83 13 	call	0x2706	; 0x2706 <USART_TxChar>
		i++;
    2722:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
    2724:	f8 01       	movw	r30, r16
    2726:	ec 0f       	add	r30, r28
    2728:	fd 1f       	adc	r31, r29
    272a:	80 81       	ld	r24, Z
    272c:	81 11       	cpse	r24, r1
    272e:	f7 cf       	rjmp	.-18     	; 0x271e <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	08 95       	ret

0000273a <USART_SendString_len>:

void USART_SendString_len(char *str, uint16_t len)					/* Send string of USART data function */
{
    273a:	ef 92       	push	r14
    273c:	ff 92       	push	r15
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	7c 01       	movw	r14, r24
    2748:	8b 01       	movw	r16, r22
	int i=0;
	for(i = 0; i < len; i++)
    274a:	c0 e0       	ldi	r28, 0x00	; 0
    274c:	d0 e0       	ldi	r29, 0x00	; 0
    274e:	07 c0       	rjmp	.+14     	; 0x275e <USART_SendString_len+0x24>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    2750:	f7 01       	movw	r30, r14
    2752:	ec 0f       	add	r30, r28
    2754:	fd 1f       	adc	r31, r29
    2756:	80 81       	ld	r24, Z
    2758:	0e 94 83 13 	call	0x2706	; 0x2706 <USART_TxChar>
}

void USART_SendString_len(char *str, uint16_t len)					/* Send string of USART data function */
{
	int i=0;
	for(i = 0; i < len; i++)
    275c:	21 96       	adiw	r28, 0x01	; 1
    275e:	c0 17       	cp	r28, r16
    2760:	d1 07       	cpc	r29, r17
    2762:	b0 f3       	brcs	.-20     	; 0x2750 <USART_SendString_len+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
	}
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	08 95       	ret

00002772 <__subsf3>:
    2772:	50 58       	subi	r21, 0x80	; 128

00002774 <__addsf3>:
    2774:	bb 27       	eor	r27, r27
    2776:	aa 27       	eor	r26, r26
    2778:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__addsf3x>
    277c:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__fp_round>
    2780:	0e 94 14 15 	call	0x2a28	; 0x2a28 <__fp_pscA>
    2784:	38 f0       	brcs	.+14     	; 0x2794 <__addsf3+0x20>
    2786:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__fp_pscB>
    278a:	20 f0       	brcs	.+8      	; 0x2794 <__addsf3+0x20>
    278c:	39 f4       	brne	.+14     	; 0x279c <__addsf3+0x28>
    278e:	9f 3f       	cpi	r25, 0xFF	; 255
    2790:	19 f4       	brne	.+6      	; 0x2798 <__addsf3+0x24>
    2792:	26 f4       	brtc	.+8      	; 0x279c <__addsf3+0x28>
    2794:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__fp_nan>
    2798:	0e f4       	brtc	.+2      	; 0x279c <__addsf3+0x28>
    279a:	e0 95       	com	r30
    279c:	e7 fb       	bst	r30, 7
    279e:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_inf>

000027a2 <__addsf3x>:
    27a2:	e9 2f       	mov	r30, r25
    27a4:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__fp_split3>
    27a8:	58 f3       	brcs	.-42     	; 0x2780 <__addsf3+0xc>
    27aa:	ba 17       	cp	r27, r26
    27ac:	62 07       	cpc	r22, r18
    27ae:	73 07       	cpc	r23, r19
    27b0:	84 07       	cpc	r24, r20
    27b2:	95 07       	cpc	r25, r21
    27b4:	20 f0       	brcs	.+8      	; 0x27be <__addsf3x+0x1c>
    27b6:	79 f4       	brne	.+30     	; 0x27d6 <__addsf3x+0x34>
    27b8:	a6 f5       	brtc	.+104    	; 0x2822 <__addsf3x+0x80>
    27ba:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__fp_zero>
    27be:	0e f4       	brtc	.+2      	; 0x27c2 <__addsf3x+0x20>
    27c0:	e0 95       	com	r30
    27c2:	0b 2e       	mov	r0, r27
    27c4:	ba 2f       	mov	r27, r26
    27c6:	a0 2d       	mov	r26, r0
    27c8:	0b 01       	movw	r0, r22
    27ca:	b9 01       	movw	r22, r18
    27cc:	90 01       	movw	r18, r0
    27ce:	0c 01       	movw	r0, r24
    27d0:	ca 01       	movw	r24, r20
    27d2:	a0 01       	movw	r20, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	ff 27       	eor	r31, r31
    27d8:	59 1b       	sub	r21, r25
    27da:	99 f0       	breq	.+38     	; 0x2802 <__addsf3x+0x60>
    27dc:	59 3f       	cpi	r21, 0xF9	; 249
    27de:	50 f4       	brcc	.+20     	; 0x27f4 <__addsf3x+0x52>
    27e0:	50 3e       	cpi	r21, 0xE0	; 224
    27e2:	68 f1       	brcs	.+90     	; 0x283e <__addsf3x+0x9c>
    27e4:	1a 16       	cp	r1, r26
    27e6:	f0 40       	sbci	r31, 0x00	; 0
    27e8:	a2 2f       	mov	r26, r18
    27ea:	23 2f       	mov	r18, r19
    27ec:	34 2f       	mov	r19, r20
    27ee:	44 27       	eor	r20, r20
    27f0:	58 5f       	subi	r21, 0xF8	; 248
    27f2:	f3 cf       	rjmp	.-26     	; 0x27da <__addsf3x+0x38>
    27f4:	46 95       	lsr	r20
    27f6:	37 95       	ror	r19
    27f8:	27 95       	ror	r18
    27fa:	a7 95       	ror	r26
    27fc:	f0 40       	sbci	r31, 0x00	; 0
    27fe:	53 95       	inc	r21
    2800:	c9 f7       	brne	.-14     	; 0x27f4 <__addsf3x+0x52>
    2802:	7e f4       	brtc	.+30     	; 0x2822 <__addsf3x+0x80>
    2804:	1f 16       	cp	r1, r31
    2806:	ba 0b       	sbc	r27, r26
    2808:	62 0b       	sbc	r22, r18
    280a:	73 0b       	sbc	r23, r19
    280c:	84 0b       	sbc	r24, r20
    280e:	ba f0       	brmi	.+46     	; 0x283e <__addsf3x+0x9c>
    2810:	91 50       	subi	r25, 0x01	; 1
    2812:	a1 f0       	breq	.+40     	; 0x283c <__addsf3x+0x9a>
    2814:	ff 0f       	add	r31, r31
    2816:	bb 1f       	adc	r27, r27
    2818:	66 1f       	adc	r22, r22
    281a:	77 1f       	adc	r23, r23
    281c:	88 1f       	adc	r24, r24
    281e:	c2 f7       	brpl	.-16     	; 0x2810 <__addsf3x+0x6e>
    2820:	0e c0       	rjmp	.+28     	; 0x283e <__addsf3x+0x9c>
    2822:	ba 0f       	add	r27, r26
    2824:	62 1f       	adc	r22, r18
    2826:	73 1f       	adc	r23, r19
    2828:	84 1f       	adc	r24, r20
    282a:	48 f4       	brcc	.+18     	; 0x283e <__addsf3x+0x9c>
    282c:	87 95       	ror	r24
    282e:	77 95       	ror	r23
    2830:	67 95       	ror	r22
    2832:	b7 95       	ror	r27
    2834:	f7 95       	ror	r31
    2836:	9e 3f       	cpi	r25, 0xFE	; 254
    2838:	08 f0       	brcs	.+2      	; 0x283c <__addsf3x+0x9a>
    283a:	b0 cf       	rjmp	.-160    	; 0x279c <__addsf3+0x28>
    283c:	93 95       	inc	r25
    283e:	88 0f       	add	r24, r24
    2840:	08 f0       	brcs	.+2      	; 0x2844 <__addsf3x+0xa2>
    2842:	99 27       	eor	r25, r25
    2844:	ee 0f       	add	r30, r30
    2846:	97 95       	ror	r25
    2848:	87 95       	ror	r24
    284a:	08 95       	ret

0000284c <__divsf3>:
    284c:	0e 94 3a 14 	call	0x2874	; 0x2874 <__divsf3x>
    2850:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__fp_round>
    2854:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__fp_pscB>
    2858:	58 f0       	brcs	.+22     	; 0x2870 <__divsf3+0x24>
    285a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <__fp_pscA>
    285e:	40 f0       	brcs	.+16     	; 0x2870 <__divsf3+0x24>
    2860:	29 f4       	brne	.+10     	; 0x286c <__divsf3+0x20>
    2862:	5f 3f       	cpi	r21, 0xFF	; 255
    2864:	29 f0       	breq	.+10     	; 0x2870 <__divsf3+0x24>
    2866:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_inf>
    286a:	51 11       	cpse	r21, r1
    286c:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__fp_szero>
    2870:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__fp_nan>

00002874 <__divsf3x>:
    2874:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__fp_split3>
    2878:	68 f3       	brcs	.-38     	; 0x2854 <__divsf3+0x8>

0000287a <__divsf3_pse>:
    287a:	99 23       	and	r25, r25
    287c:	b1 f3       	breq	.-20     	; 0x286a <__divsf3+0x1e>
    287e:	55 23       	and	r21, r21
    2880:	91 f3       	breq	.-28     	; 0x2866 <__divsf3+0x1a>
    2882:	95 1b       	sub	r25, r21
    2884:	55 0b       	sbc	r21, r21
    2886:	bb 27       	eor	r27, r27
    2888:	aa 27       	eor	r26, r26
    288a:	62 17       	cp	r22, r18
    288c:	73 07       	cpc	r23, r19
    288e:	84 07       	cpc	r24, r20
    2890:	38 f0       	brcs	.+14     	; 0x28a0 <__divsf3_pse+0x26>
    2892:	9f 5f       	subi	r25, 0xFF	; 255
    2894:	5f 4f       	sbci	r21, 0xFF	; 255
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	44 1f       	adc	r20, r20
    289c:	aa 1f       	adc	r26, r26
    289e:	a9 f3       	breq	.-22     	; 0x288a <__divsf3_pse+0x10>
    28a0:	35 d0       	rcall	.+106    	; 0x290c <__divsf3_pse+0x92>
    28a2:	0e 2e       	mov	r0, r30
    28a4:	3a f0       	brmi	.+14     	; 0x28b4 <__divsf3_pse+0x3a>
    28a6:	e0 e8       	ldi	r30, 0x80	; 128
    28a8:	32 d0       	rcall	.+100    	; 0x290e <__divsf3_pse+0x94>
    28aa:	91 50       	subi	r25, 0x01	; 1
    28ac:	50 40       	sbci	r21, 0x00	; 0
    28ae:	e6 95       	lsr	r30
    28b0:	00 1c       	adc	r0, r0
    28b2:	ca f7       	brpl	.-14     	; 0x28a6 <__divsf3_pse+0x2c>
    28b4:	2b d0       	rcall	.+86     	; 0x290c <__divsf3_pse+0x92>
    28b6:	fe 2f       	mov	r31, r30
    28b8:	29 d0       	rcall	.+82     	; 0x290c <__divsf3_pse+0x92>
    28ba:	66 0f       	add	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	88 1f       	adc	r24, r24
    28c0:	bb 1f       	adc	r27, r27
    28c2:	26 17       	cp	r18, r22
    28c4:	37 07       	cpc	r19, r23
    28c6:	48 07       	cpc	r20, r24
    28c8:	ab 07       	cpc	r26, r27
    28ca:	b0 e8       	ldi	r27, 0x80	; 128
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <__divsf3_pse+0x56>
    28ce:	bb 0b       	sbc	r27, r27
    28d0:	80 2d       	mov	r24, r0
    28d2:	bf 01       	movw	r22, r30
    28d4:	ff 27       	eor	r31, r31
    28d6:	93 58       	subi	r25, 0x83	; 131
    28d8:	5f 4f       	sbci	r21, 0xFF	; 255
    28da:	3a f0       	brmi	.+14     	; 0x28ea <__divsf3_pse+0x70>
    28dc:	9e 3f       	cpi	r25, 0xFE	; 254
    28de:	51 05       	cpc	r21, r1
    28e0:	78 f0       	brcs	.+30     	; 0x2900 <__divsf3_pse+0x86>
    28e2:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_inf>
    28e6:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__fp_szero>
    28ea:	5f 3f       	cpi	r21, 0xFF	; 255
    28ec:	e4 f3       	brlt	.-8      	; 0x28e6 <__divsf3_pse+0x6c>
    28ee:	98 3e       	cpi	r25, 0xE8	; 232
    28f0:	d4 f3       	brlt	.-12     	; 0x28e6 <__divsf3_pse+0x6c>
    28f2:	86 95       	lsr	r24
    28f4:	77 95       	ror	r23
    28f6:	67 95       	ror	r22
    28f8:	b7 95       	ror	r27
    28fa:	f7 95       	ror	r31
    28fc:	9f 5f       	subi	r25, 0xFF	; 255
    28fe:	c9 f7       	brne	.-14     	; 0x28f2 <__divsf3_pse+0x78>
    2900:	88 0f       	add	r24, r24
    2902:	91 1d       	adc	r25, r1
    2904:	96 95       	lsr	r25
    2906:	87 95       	ror	r24
    2908:	97 f9       	bld	r25, 7
    290a:	08 95       	ret
    290c:	e1 e0       	ldi	r30, 0x01	; 1
    290e:	66 0f       	add	r22, r22
    2910:	77 1f       	adc	r23, r23
    2912:	88 1f       	adc	r24, r24
    2914:	bb 1f       	adc	r27, r27
    2916:	62 17       	cp	r22, r18
    2918:	73 07       	cpc	r23, r19
    291a:	84 07       	cpc	r24, r20
    291c:	ba 07       	cpc	r27, r26
    291e:	20 f0       	brcs	.+8      	; 0x2928 <__divsf3_pse+0xae>
    2920:	62 1b       	sub	r22, r18
    2922:	73 0b       	sbc	r23, r19
    2924:	84 0b       	sbc	r24, r20
    2926:	ba 0b       	sbc	r27, r26
    2928:	ee 1f       	adc	r30, r30
    292a:	88 f7       	brcc	.-30     	; 0x290e <__divsf3_pse+0x94>
    292c:	e0 95       	com	r30
    292e:	08 95       	ret

00002930 <__fixsfsi>:
    2930:	0e 94 9f 14 	call	0x293e	; 0x293e <__fixunssfsi>
    2934:	68 94       	set
    2936:	b1 11       	cpse	r27, r1
    2938:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__fp_szero>
    293c:	08 95       	ret

0000293e <__fixunssfsi>:
    293e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_splitA>
    2942:	88 f0       	brcs	.+34     	; 0x2966 <__fixunssfsi+0x28>
    2944:	9f 57       	subi	r25, 0x7F	; 127
    2946:	98 f0       	brcs	.+38     	; 0x296e <__fixunssfsi+0x30>
    2948:	b9 2f       	mov	r27, r25
    294a:	99 27       	eor	r25, r25
    294c:	b7 51       	subi	r27, 0x17	; 23
    294e:	b0 f0       	brcs	.+44     	; 0x297c <__fixunssfsi+0x3e>
    2950:	e1 f0       	breq	.+56     	; 0x298a <__fixunssfsi+0x4c>
    2952:	66 0f       	add	r22, r22
    2954:	77 1f       	adc	r23, r23
    2956:	88 1f       	adc	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	1a f0       	brmi	.+6      	; 0x2962 <__fixunssfsi+0x24>
    295c:	ba 95       	dec	r27
    295e:	c9 f7       	brne	.-14     	; 0x2952 <__fixunssfsi+0x14>
    2960:	14 c0       	rjmp	.+40     	; 0x298a <__fixunssfsi+0x4c>
    2962:	b1 30       	cpi	r27, 0x01	; 1
    2964:	91 f0       	breq	.+36     	; 0x298a <__fixunssfsi+0x4c>
    2966:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__fp_zero>
    296a:	b1 e0       	ldi	r27, 0x01	; 1
    296c:	08 95       	ret
    296e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__fp_zero>
    2972:	67 2f       	mov	r22, r23
    2974:	78 2f       	mov	r23, r24
    2976:	88 27       	eor	r24, r24
    2978:	b8 5f       	subi	r27, 0xF8	; 248
    297a:	39 f0       	breq	.+14     	; 0x298a <__fixunssfsi+0x4c>
    297c:	b9 3f       	cpi	r27, 0xF9	; 249
    297e:	cc f3       	brlt	.-14     	; 0x2972 <__fixunssfsi+0x34>
    2980:	86 95       	lsr	r24
    2982:	77 95       	ror	r23
    2984:	67 95       	ror	r22
    2986:	b3 95       	inc	r27
    2988:	d9 f7       	brne	.-10     	; 0x2980 <__fixunssfsi+0x42>
    298a:	3e f4       	brtc	.+14     	; 0x299a <__fixunssfsi+0x5c>
    298c:	90 95       	com	r25
    298e:	80 95       	com	r24
    2990:	70 95       	com	r23
    2992:	61 95       	neg	r22
    2994:	7f 4f       	sbci	r23, 0xFF	; 255
    2996:	8f 4f       	sbci	r24, 0xFF	; 255
    2998:	9f 4f       	sbci	r25, 0xFF	; 255
    299a:	08 95       	ret

0000299c <__floatunsisf>:
    299c:	e8 94       	clt
    299e:	09 c0       	rjmp	.+18     	; 0x29b2 <__floatsisf+0x12>

000029a0 <__floatsisf>:
    29a0:	97 fb       	bst	r25, 7
    29a2:	3e f4       	brtc	.+14     	; 0x29b2 <__floatsisf+0x12>
    29a4:	90 95       	com	r25
    29a6:	80 95       	com	r24
    29a8:	70 95       	com	r23
    29aa:	61 95       	neg	r22
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	8f 4f       	sbci	r24, 0xFF	; 255
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	99 23       	and	r25, r25
    29b4:	a9 f0       	breq	.+42     	; 0x29e0 <__floatsisf+0x40>
    29b6:	f9 2f       	mov	r31, r25
    29b8:	96 e9       	ldi	r25, 0x96	; 150
    29ba:	bb 27       	eor	r27, r27
    29bc:	93 95       	inc	r25
    29be:	f6 95       	lsr	r31
    29c0:	87 95       	ror	r24
    29c2:	77 95       	ror	r23
    29c4:	67 95       	ror	r22
    29c6:	b7 95       	ror	r27
    29c8:	f1 11       	cpse	r31, r1
    29ca:	f8 cf       	rjmp	.-16     	; 0x29bc <__floatsisf+0x1c>
    29cc:	fa f4       	brpl	.+62     	; 0x2a0c <__floatsisf+0x6c>
    29ce:	bb 0f       	add	r27, r27
    29d0:	11 f4       	brne	.+4      	; 0x29d6 <__floatsisf+0x36>
    29d2:	60 ff       	sbrs	r22, 0
    29d4:	1b c0       	rjmp	.+54     	; 0x2a0c <__floatsisf+0x6c>
    29d6:	6f 5f       	subi	r22, 0xFF	; 255
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	8f 4f       	sbci	r24, 0xFF	; 255
    29dc:	9f 4f       	sbci	r25, 0xFF	; 255
    29de:	16 c0       	rjmp	.+44     	; 0x2a0c <__floatsisf+0x6c>
    29e0:	88 23       	and	r24, r24
    29e2:	11 f0       	breq	.+4      	; 0x29e8 <__floatsisf+0x48>
    29e4:	96 e9       	ldi	r25, 0x96	; 150
    29e6:	11 c0       	rjmp	.+34     	; 0x2a0a <__floatsisf+0x6a>
    29e8:	77 23       	and	r23, r23
    29ea:	21 f0       	breq	.+8      	; 0x29f4 <__floatsisf+0x54>
    29ec:	9e e8       	ldi	r25, 0x8E	; 142
    29ee:	87 2f       	mov	r24, r23
    29f0:	76 2f       	mov	r23, r22
    29f2:	05 c0       	rjmp	.+10     	; 0x29fe <__floatsisf+0x5e>
    29f4:	66 23       	and	r22, r22
    29f6:	71 f0       	breq	.+28     	; 0x2a14 <__floatsisf+0x74>
    29f8:	96 e8       	ldi	r25, 0x86	; 134
    29fa:	86 2f       	mov	r24, r22
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	2a f0       	brmi	.+10     	; 0x2a0c <__floatsisf+0x6c>
    2a02:	9a 95       	dec	r25
    2a04:	66 0f       	add	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	88 1f       	adc	r24, r24
    2a0a:	da f7       	brpl	.-10     	; 0x2a02 <__floatsisf+0x62>
    2a0c:	88 0f       	add	r24, r24
    2a0e:	96 95       	lsr	r25
    2a10:	87 95       	ror	r24
    2a12:	97 f9       	bld	r25, 7
    2a14:	08 95       	ret

00002a16 <__fp_inf>:
    2a16:	97 f9       	bld	r25, 7
    2a18:	9f 67       	ori	r25, 0x7F	; 127
    2a1a:	80 e8       	ldi	r24, 0x80	; 128
    2a1c:	70 e0       	ldi	r23, 0x00	; 0
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	08 95       	ret

00002a22 <__fp_nan>:
    2a22:	9f ef       	ldi	r25, 0xFF	; 255
    2a24:	80 ec       	ldi	r24, 0xC0	; 192
    2a26:	08 95       	ret

00002a28 <__fp_pscA>:
    2a28:	00 24       	eor	r0, r0
    2a2a:	0a 94       	dec	r0
    2a2c:	16 16       	cp	r1, r22
    2a2e:	17 06       	cpc	r1, r23
    2a30:	18 06       	cpc	r1, r24
    2a32:	09 06       	cpc	r0, r25
    2a34:	08 95       	ret

00002a36 <__fp_pscB>:
    2a36:	00 24       	eor	r0, r0
    2a38:	0a 94       	dec	r0
    2a3a:	12 16       	cp	r1, r18
    2a3c:	13 06       	cpc	r1, r19
    2a3e:	14 06       	cpc	r1, r20
    2a40:	05 06       	cpc	r0, r21
    2a42:	08 95       	ret

00002a44 <__fp_round>:
    2a44:	09 2e       	mov	r0, r25
    2a46:	03 94       	inc	r0
    2a48:	00 0c       	add	r0, r0
    2a4a:	11 f4       	brne	.+4      	; 0x2a50 <__fp_round+0xc>
    2a4c:	88 23       	and	r24, r24
    2a4e:	52 f0       	brmi	.+20     	; 0x2a64 <__fp_round+0x20>
    2a50:	bb 0f       	add	r27, r27
    2a52:	40 f4       	brcc	.+16     	; 0x2a64 <__fp_round+0x20>
    2a54:	bf 2b       	or	r27, r31
    2a56:	11 f4       	brne	.+4      	; 0x2a5c <__fp_round+0x18>
    2a58:	60 ff       	sbrs	r22, 0
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <__fp_round+0x20>
    2a5c:	6f 5f       	subi	r22, 0xFF	; 255
    2a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a60:	8f 4f       	sbci	r24, 0xFF	; 255
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	08 95       	ret

00002a66 <__fp_split3>:
    2a66:	57 fd       	sbrc	r21, 7
    2a68:	90 58       	subi	r25, 0x80	; 128
    2a6a:	44 0f       	add	r20, r20
    2a6c:	55 1f       	adc	r21, r21
    2a6e:	59 f0       	breq	.+22     	; 0x2a86 <__fp_splitA+0x10>
    2a70:	5f 3f       	cpi	r21, 0xFF	; 255
    2a72:	71 f0       	breq	.+28     	; 0x2a90 <__fp_splitA+0x1a>
    2a74:	47 95       	ror	r20

00002a76 <__fp_splitA>:
    2a76:	88 0f       	add	r24, r24
    2a78:	97 fb       	bst	r25, 7
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <__fp_splitA+0x20>
    2a7e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a80:	79 f0       	breq	.+30     	; 0x2aa0 <__fp_splitA+0x2a>
    2a82:	87 95       	ror	r24
    2a84:	08 95       	ret
    2a86:	12 16       	cp	r1, r18
    2a88:	13 06       	cpc	r1, r19
    2a8a:	14 06       	cpc	r1, r20
    2a8c:	55 1f       	adc	r21, r21
    2a8e:	f2 cf       	rjmp	.-28     	; 0x2a74 <__fp_split3+0xe>
    2a90:	46 95       	lsr	r20
    2a92:	f1 df       	rcall	.-30     	; 0x2a76 <__fp_splitA>
    2a94:	08 c0       	rjmp	.+16     	; 0x2aa6 <__fp_splitA+0x30>
    2a96:	16 16       	cp	r1, r22
    2a98:	17 06       	cpc	r1, r23
    2a9a:	18 06       	cpc	r1, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	f1 cf       	rjmp	.-30     	; 0x2a82 <__fp_splitA+0xc>
    2aa0:	86 95       	lsr	r24
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	61 05       	cpc	r22, r1
    2aa6:	08 94       	sec
    2aa8:	08 95       	ret

00002aaa <__fp_zero>:
    2aaa:	e8 94       	clt

00002aac <__fp_szero>:
    2aac:	bb 27       	eor	r27, r27
    2aae:	66 27       	eor	r22, r22
    2ab0:	77 27       	eor	r23, r23
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	97 f9       	bld	r25, 7
    2ab6:	08 95       	ret

00002ab8 <__mulsf3>:
    2ab8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__mulsf3x>
    2abc:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__fp_round>
    2ac0:	0e 94 14 15 	call	0x2a28	; 0x2a28 <__fp_pscA>
    2ac4:	38 f0       	brcs	.+14     	; 0x2ad4 <__mulsf3+0x1c>
    2ac6:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__fp_pscB>
    2aca:	20 f0       	brcs	.+8      	; 0x2ad4 <__mulsf3+0x1c>
    2acc:	95 23       	and	r25, r21
    2ace:	11 f0       	breq	.+4      	; 0x2ad4 <__mulsf3+0x1c>
    2ad0:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_inf>
    2ad4:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__fp_nan>
    2ad8:	11 24       	eor	r1, r1
    2ada:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__fp_szero>

00002ade <__mulsf3x>:
    2ade:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__fp_split3>
    2ae2:	70 f3       	brcs	.-36     	; 0x2ac0 <__mulsf3+0x8>

00002ae4 <__mulsf3_pse>:
    2ae4:	95 9f       	mul	r25, r21
    2ae6:	c1 f3       	breq	.-16     	; 0x2ad8 <__mulsf3+0x20>
    2ae8:	95 0f       	add	r25, r21
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	55 1f       	adc	r21, r21
    2aee:	62 9f       	mul	r22, r18
    2af0:	f0 01       	movw	r30, r0
    2af2:	72 9f       	mul	r23, r18
    2af4:	bb 27       	eor	r27, r27
    2af6:	f0 0d       	add	r31, r0
    2af8:	b1 1d       	adc	r27, r1
    2afa:	63 9f       	mul	r22, r19
    2afc:	aa 27       	eor	r26, r26
    2afe:	f0 0d       	add	r31, r0
    2b00:	b1 1d       	adc	r27, r1
    2b02:	aa 1f       	adc	r26, r26
    2b04:	64 9f       	mul	r22, r20
    2b06:	66 27       	eor	r22, r22
    2b08:	b0 0d       	add	r27, r0
    2b0a:	a1 1d       	adc	r26, r1
    2b0c:	66 1f       	adc	r22, r22
    2b0e:	82 9f       	mul	r24, r18
    2b10:	22 27       	eor	r18, r18
    2b12:	b0 0d       	add	r27, r0
    2b14:	a1 1d       	adc	r26, r1
    2b16:	62 1f       	adc	r22, r18
    2b18:	73 9f       	mul	r23, r19
    2b1a:	b0 0d       	add	r27, r0
    2b1c:	a1 1d       	adc	r26, r1
    2b1e:	62 1f       	adc	r22, r18
    2b20:	83 9f       	mul	r24, r19
    2b22:	a0 0d       	add	r26, r0
    2b24:	61 1d       	adc	r22, r1
    2b26:	22 1f       	adc	r18, r18
    2b28:	74 9f       	mul	r23, r20
    2b2a:	33 27       	eor	r19, r19
    2b2c:	a0 0d       	add	r26, r0
    2b2e:	61 1d       	adc	r22, r1
    2b30:	23 1f       	adc	r18, r19
    2b32:	84 9f       	mul	r24, r20
    2b34:	60 0d       	add	r22, r0
    2b36:	21 1d       	adc	r18, r1
    2b38:	82 2f       	mov	r24, r18
    2b3a:	76 2f       	mov	r23, r22
    2b3c:	6a 2f       	mov	r22, r26
    2b3e:	11 24       	eor	r1, r1
    2b40:	9f 57       	subi	r25, 0x7F	; 127
    2b42:	50 40       	sbci	r21, 0x00	; 0
    2b44:	9a f0       	brmi	.+38     	; 0x2b6c <__mulsf3_pse+0x88>
    2b46:	f1 f0       	breq	.+60     	; 0x2b84 <__mulsf3_pse+0xa0>
    2b48:	88 23       	and	r24, r24
    2b4a:	4a f0       	brmi	.+18     	; 0x2b5e <__mulsf3_pse+0x7a>
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	bb 1f       	adc	r27, r27
    2b52:	66 1f       	adc	r22, r22
    2b54:	77 1f       	adc	r23, r23
    2b56:	88 1f       	adc	r24, r24
    2b58:	91 50       	subi	r25, 0x01	; 1
    2b5a:	50 40       	sbci	r21, 0x00	; 0
    2b5c:	a9 f7       	brne	.-22     	; 0x2b48 <__mulsf3_pse+0x64>
    2b5e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b60:	51 05       	cpc	r21, r1
    2b62:	80 f0       	brcs	.+32     	; 0x2b84 <__mulsf3_pse+0xa0>
    2b64:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_inf>
    2b68:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__fp_szero>
    2b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b6e:	e4 f3       	brlt	.-8      	; 0x2b68 <__mulsf3_pse+0x84>
    2b70:	98 3e       	cpi	r25, 0xE8	; 232
    2b72:	d4 f3       	brlt	.-12     	; 0x2b68 <__mulsf3_pse+0x84>
    2b74:	86 95       	lsr	r24
    2b76:	77 95       	ror	r23
    2b78:	67 95       	ror	r22
    2b7a:	b7 95       	ror	r27
    2b7c:	f7 95       	ror	r31
    2b7e:	e7 95       	ror	r30
    2b80:	9f 5f       	subi	r25, 0xFF	; 255
    2b82:	c1 f7       	brne	.-16     	; 0x2b74 <__mulsf3_pse+0x90>
    2b84:	fe 2b       	or	r31, r30
    2b86:	88 0f       	add	r24, r24
    2b88:	91 1d       	adc	r25, r1
    2b8a:	96 95       	lsr	r25
    2b8c:	87 95       	ror	r24
    2b8e:	97 f9       	bld	r25, 7
    2b90:	08 95       	ret

00002b92 <round>:
    2b92:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_splitA>
    2b96:	e8 f0       	brcs	.+58     	; 0x2bd2 <round+0x40>
    2b98:	9e 37       	cpi	r25, 0x7E	; 126
    2b9a:	e8 f0       	brcs	.+58     	; 0x2bd6 <round+0x44>
    2b9c:	96 39       	cpi	r25, 0x96	; 150
    2b9e:	b8 f4       	brcc	.+46     	; 0x2bce <round+0x3c>
    2ba0:	9e 38       	cpi	r25, 0x8E	; 142
    2ba2:	48 f4       	brcc	.+18     	; 0x2bb6 <round+0x24>
    2ba4:	67 2f       	mov	r22, r23
    2ba6:	78 2f       	mov	r23, r24
    2ba8:	88 27       	eor	r24, r24
    2baa:	98 5f       	subi	r25, 0xF8	; 248
    2bac:	f9 cf       	rjmp	.-14     	; 0x2ba0 <round+0xe>
    2bae:	86 95       	lsr	r24
    2bb0:	77 95       	ror	r23
    2bb2:	67 95       	ror	r22
    2bb4:	93 95       	inc	r25
    2bb6:	95 39       	cpi	r25, 0x95	; 149
    2bb8:	d0 f3       	brcs	.-12     	; 0x2bae <round+0x1c>
    2bba:	b6 2f       	mov	r27, r22
    2bbc:	b1 70       	andi	r27, 0x01	; 1
    2bbe:	6b 0f       	add	r22, r27
    2bc0:	71 1d       	adc	r23, r1
    2bc2:	81 1d       	adc	r24, r1
    2bc4:	20 f4       	brcc	.+8      	; 0x2bce <round+0x3c>
    2bc6:	87 95       	ror	r24
    2bc8:	77 95       	ror	r23
    2bca:	67 95       	ror	r22
    2bcc:	93 95       	inc	r25
    2bce:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__fp_mintl>
    2bd2:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__fp_mpack>
    2bd6:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__fp_szero>

00002bda <__fp_mintl>:
    2bda:	88 23       	and	r24, r24
    2bdc:	71 f4       	brne	.+28     	; 0x2bfa <__fp_mintl+0x20>
    2bde:	77 23       	and	r23, r23
    2be0:	21 f0       	breq	.+8      	; 0x2bea <__fp_mintl+0x10>
    2be2:	98 50       	subi	r25, 0x08	; 8
    2be4:	87 2b       	or	r24, r23
    2be6:	76 2f       	mov	r23, r22
    2be8:	07 c0       	rjmp	.+14     	; 0x2bf8 <__fp_mintl+0x1e>
    2bea:	66 23       	and	r22, r22
    2bec:	11 f4       	brne	.+4      	; 0x2bf2 <__fp_mintl+0x18>
    2bee:	99 27       	eor	r25, r25
    2bf0:	0d c0       	rjmp	.+26     	; 0x2c0c <__fp_mintl+0x32>
    2bf2:	90 51       	subi	r25, 0x10	; 16
    2bf4:	86 2b       	or	r24, r22
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	2a f0       	brmi	.+10     	; 0x2c06 <__fp_mintl+0x2c>
    2bfc:	9a 95       	dec	r25
    2bfe:	66 0f       	add	r22, r22
    2c00:	77 1f       	adc	r23, r23
    2c02:	88 1f       	adc	r24, r24
    2c04:	da f7       	brpl	.-10     	; 0x2bfc <__fp_mintl+0x22>
    2c06:	88 0f       	add	r24, r24
    2c08:	96 95       	lsr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	97 f9       	bld	r25, 7
    2c0e:	08 95       	ret

00002c10 <__fp_mpack>:
    2c10:	9f 3f       	cpi	r25, 0xFF	; 255
    2c12:	31 f0       	breq	.+12     	; 0x2c20 <__fp_mpack_finite+0xc>

00002c14 <__fp_mpack_finite>:
    2c14:	91 50       	subi	r25, 0x01	; 1
    2c16:	20 f4       	brcc	.+8      	; 0x2c20 <__fp_mpack_finite+0xc>
    2c18:	87 95       	ror	r24
    2c1a:	77 95       	ror	r23
    2c1c:	67 95       	ror	r22
    2c1e:	b7 95       	ror	r27
    2c20:	88 0f       	add	r24, r24
    2c22:	91 1d       	adc	r25, r1
    2c24:	96 95       	lsr	r25
    2c26:	87 95       	ror	r24
    2c28:	97 f9       	bld	r25, 7
    2c2a:	08 95       	ret

00002c2c <__udivmodsi4>:
    2c2c:	a1 e2       	ldi	r26, 0x21	; 33
    2c2e:	1a 2e       	mov	r1, r26
    2c30:	aa 1b       	sub	r26, r26
    2c32:	bb 1b       	sub	r27, r27
    2c34:	fd 01       	movw	r30, r26
    2c36:	0d c0       	rjmp	.+26     	; 0x2c52 <__udivmodsi4_ep>

00002c38 <__udivmodsi4_loop>:
    2c38:	aa 1f       	adc	r26, r26
    2c3a:	bb 1f       	adc	r27, r27
    2c3c:	ee 1f       	adc	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	a2 17       	cp	r26, r18
    2c42:	b3 07       	cpc	r27, r19
    2c44:	e4 07       	cpc	r30, r20
    2c46:	f5 07       	cpc	r31, r21
    2c48:	20 f0       	brcs	.+8      	; 0x2c52 <__udivmodsi4_ep>
    2c4a:	a2 1b       	sub	r26, r18
    2c4c:	b3 0b       	sbc	r27, r19
    2c4e:	e4 0b       	sbc	r30, r20
    2c50:	f5 0b       	sbc	r31, r21

00002c52 <__udivmodsi4_ep>:
    2c52:	66 1f       	adc	r22, r22
    2c54:	77 1f       	adc	r23, r23
    2c56:	88 1f       	adc	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	1a 94       	dec	r1
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <__udivmodsi4_loop>
    2c5e:	60 95       	com	r22
    2c60:	70 95       	com	r23
    2c62:	80 95       	com	r24
    2c64:	90 95       	com	r25
    2c66:	9b 01       	movw	r18, r22
    2c68:	ac 01       	movw	r20, r24
    2c6a:	bd 01       	movw	r22, r26
    2c6c:	cf 01       	movw	r24, r30
    2c6e:	08 95       	ret

00002c70 <__tablejump2__>:
    2c70:	ee 0f       	add	r30, r30
    2c72:	ff 1f       	adc	r31, r31
    2c74:	05 90       	lpm	r0, Z+
    2c76:	f4 91       	lpm	r31, Z
    2c78:	e0 2d       	mov	r30, r0
    2c7a:	09 94       	ijmp

00002c7c <__muluhisi3>:
    2c7c:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__umulhisi3>
    2c80:	a5 9f       	mul	r26, r21
    2c82:	90 0d       	add	r25, r0
    2c84:	b4 9f       	mul	r27, r20
    2c86:	90 0d       	add	r25, r0
    2c88:	a4 9f       	mul	r26, r20
    2c8a:	80 0d       	add	r24, r0
    2c8c:	91 1d       	adc	r25, r1
    2c8e:	11 24       	eor	r1, r1
    2c90:	08 95       	ret

00002c92 <__umulhisi3>:
    2c92:	a2 9f       	mul	r26, r18
    2c94:	b0 01       	movw	r22, r0
    2c96:	b3 9f       	mul	r27, r19
    2c98:	c0 01       	movw	r24, r0
    2c9a:	a3 9f       	mul	r26, r19
    2c9c:	70 0d       	add	r23, r0
    2c9e:	81 1d       	adc	r24, r1
    2ca0:	11 24       	eor	r1, r1
    2ca2:	91 1d       	adc	r25, r1
    2ca4:	b2 9f       	mul	r27, r18
    2ca6:	70 0d       	add	r23, r0
    2ca8:	81 1d       	adc	r24, r1
    2caa:	11 24       	eor	r1, r1
    2cac:	91 1d       	adc	r25, r1
    2cae:	08 95       	ret

00002cb0 <atoi>:
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	88 27       	eor	r24, r24
    2cb4:	99 27       	eor	r25, r25
    2cb6:	e8 94       	clt
    2cb8:	21 91       	ld	r18, Z+
    2cba:	20 32       	cpi	r18, 0x20	; 32
    2cbc:	e9 f3       	breq	.-6      	; 0x2cb8 <atoi+0x8>
    2cbe:	29 30       	cpi	r18, 0x09	; 9
    2cc0:	10 f0       	brcs	.+4      	; 0x2cc6 <atoi+0x16>
    2cc2:	2e 30       	cpi	r18, 0x0E	; 14
    2cc4:	c8 f3       	brcs	.-14     	; 0x2cb8 <atoi+0x8>
    2cc6:	2b 32       	cpi	r18, 0x2B	; 43
    2cc8:	41 f0       	breq	.+16     	; 0x2cda <atoi+0x2a>
    2cca:	2d 32       	cpi	r18, 0x2D	; 45
    2ccc:	39 f4       	brne	.+14     	; 0x2cdc <atoi+0x2c>
    2cce:	68 94       	set
    2cd0:	04 c0       	rjmp	.+8      	; 0x2cda <atoi+0x2a>
    2cd2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulhi_const_10>
    2cd6:	82 0f       	add	r24, r18
    2cd8:	91 1d       	adc	r25, r1
    2cda:	21 91       	ld	r18, Z+
    2cdc:	20 53       	subi	r18, 0x30	; 48
    2cde:	2a 30       	cpi	r18, 0x0A	; 10
    2ce0:	c0 f3       	brcs	.-16     	; 0x2cd2 <atoi+0x22>
    2ce2:	1e f4       	brtc	.+6      	; 0x2cea <atoi+0x3a>
    2ce4:	90 95       	com	r25
    2ce6:	81 95       	neg	r24
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	08 95       	ret

00002cec <memcpy>:
    2cec:	fb 01       	movw	r30, r22
    2cee:	dc 01       	movw	r26, r24
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <memcpy+0xa>
    2cf2:	01 90       	ld	r0, Z+
    2cf4:	0d 92       	st	X+, r0
    2cf6:	41 50       	subi	r20, 0x01	; 1
    2cf8:	50 40       	sbci	r21, 0x00	; 0
    2cfa:	d8 f7       	brcc	.-10     	; 0x2cf2 <memcpy+0x6>
    2cfc:	08 95       	ret

00002cfe <memmove>:
    2cfe:	68 17       	cp	r22, r24
    2d00:	79 07       	cpc	r23, r25
    2d02:	68 f4       	brcc	.+26     	; 0x2d1e <memmove+0x20>
    2d04:	fb 01       	movw	r30, r22
    2d06:	dc 01       	movw	r26, r24
    2d08:	e4 0f       	add	r30, r20
    2d0a:	f5 1f       	adc	r31, r21
    2d0c:	a4 0f       	add	r26, r20
    2d0e:	b5 1f       	adc	r27, r21
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <memmove+0x18>
    2d12:	02 90       	ld	r0, -Z
    2d14:	0e 92       	st	-X, r0
    2d16:	41 50       	subi	r20, 0x01	; 1
    2d18:	50 40       	sbci	r21, 0x00	; 0
    2d1a:	d8 f7       	brcc	.-10     	; 0x2d12 <memmove+0x14>
    2d1c:	08 95       	ret
    2d1e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <memcpy>

00002d22 <strcat>:
    2d22:	fb 01       	movw	r30, r22
    2d24:	dc 01       	movw	r26, r24
    2d26:	0d 90       	ld	r0, X+
    2d28:	00 20       	and	r0, r0
    2d2a:	e9 f7       	brne	.-6      	; 0x2d26 <strcat+0x4>
    2d2c:	11 97       	sbiw	r26, 0x01	; 1
    2d2e:	01 90       	ld	r0, Z+
    2d30:	0d 92       	st	X+, r0
    2d32:	00 20       	and	r0, r0
    2d34:	e1 f7       	brne	.-8      	; 0x2d2e <strcat+0xc>
    2d36:	08 95       	ret

00002d38 <strncmp>:
    2d38:	fb 01       	movw	r30, r22
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	41 50       	subi	r20, 0x01	; 1
    2d3e:	50 40       	sbci	r21, 0x00	; 0
    2d40:	30 f0       	brcs	.+12     	; 0x2d4e <strncmp+0x16>
    2d42:	8d 91       	ld	r24, X+
    2d44:	01 90       	ld	r0, Z+
    2d46:	80 19       	sub	r24, r0
    2d48:	19 f4       	brne	.+6      	; 0x2d50 <strncmp+0x18>
    2d4a:	00 20       	and	r0, r0
    2d4c:	b9 f7       	brne	.-18     	; 0x2d3c <strncmp+0x4>
    2d4e:	88 1b       	sub	r24, r24
    2d50:	99 0b       	sbc	r25, r25
    2d52:	08 95       	ret

00002d54 <strstr>:
    2d54:	fb 01       	movw	r30, r22
    2d56:	51 91       	ld	r21, Z+
    2d58:	55 23       	and	r21, r21
    2d5a:	a9 f0       	breq	.+42     	; 0x2d86 <strstr+0x32>
    2d5c:	bf 01       	movw	r22, r30
    2d5e:	dc 01       	movw	r26, r24
    2d60:	4d 91       	ld	r20, X+
    2d62:	45 17       	cp	r20, r21
    2d64:	41 11       	cpse	r20, r1
    2d66:	e1 f7       	brne	.-8      	; 0x2d60 <strstr+0xc>
    2d68:	59 f4       	brne	.+22     	; 0x2d80 <strstr+0x2c>
    2d6a:	cd 01       	movw	r24, r26
    2d6c:	01 90       	ld	r0, Z+
    2d6e:	00 20       	and	r0, r0
    2d70:	49 f0       	breq	.+18     	; 0x2d84 <strstr+0x30>
    2d72:	4d 91       	ld	r20, X+
    2d74:	40 15       	cp	r20, r0
    2d76:	41 11       	cpse	r20, r1
    2d78:	c9 f3       	breq	.-14     	; 0x2d6c <strstr+0x18>
    2d7a:	fb 01       	movw	r30, r22
    2d7c:	41 11       	cpse	r20, r1
    2d7e:	ef cf       	rjmp	.-34     	; 0x2d5e <strstr+0xa>
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	08 95       	ret

00002d88 <__mulhi_const_10>:
    2d88:	7a e0       	ldi	r23, 0x0A	; 10
    2d8a:	97 9f       	mul	r25, r23
    2d8c:	90 2d       	mov	r25, r0
    2d8e:	87 9f       	mul	r24, r23
    2d90:	80 2d       	mov	r24, r0
    2d92:	91 0d       	add	r25, r1
    2d94:	11 24       	eor	r1, r1
    2d96:	08 95       	ret

00002d98 <sprintf>:
    2d98:	ae e0       	ldi	r26, 0x0E	; 14
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    2d9e:	f6 e1       	ldi	r31, 0x16	; 22
    2da0:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x1c>
    2da4:	0d 89       	ldd	r16, Y+21	; 0x15
    2da6:	1e 89       	ldd	r17, Y+22	; 0x16
    2da8:	86 e0       	ldi	r24, 0x06	; 6
    2daa:	8c 83       	std	Y+4, r24	; 0x04
    2dac:	1a 83       	std	Y+2, r17	; 0x02
    2dae:	09 83       	std	Y+1, r16	; 0x01
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	9f e7       	ldi	r25, 0x7F	; 127
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	ae 01       	movw	r20, r28
    2dba:	47 5e       	subi	r20, 0xE7	; 231
    2dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dbe:	6f 89       	ldd	r22, Y+23	; 0x17
    2dc0:	78 8d       	ldd	r23, Y+24	; 0x18
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <vfprintf>
    2dca:	ef 81       	ldd	r30, Y+7	; 0x07
    2dcc:	f8 85       	ldd	r31, Y+8	; 0x08
    2dce:	e0 0f       	add	r30, r16
    2dd0:	f1 1f       	adc	r31, r17
    2dd2:	10 82       	st	Z, r1
    2dd4:	2e 96       	adiw	r28, 0x0e	; 14
    2dd6:	e4 e0       	ldi	r30, 0x04	; 4
    2dd8:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x1c>

00002ddc <vfprintf>:
    2ddc:	ab e0       	ldi	r26, 0x0B	; 11
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e4 ef       	ldi	r30, 0xF4	; 244
    2de2:	f6 e1       	ldi	r31, 0x16	; 22
    2de4:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__>
    2de8:	6c 01       	movw	r12, r24
    2dea:	7b 01       	movw	r14, r22
    2dec:	8a 01       	movw	r16, r20
    2dee:	fc 01       	movw	r30, r24
    2df0:	17 82       	std	Z+7, r1	; 0x07
    2df2:	16 82       	std	Z+6, r1	; 0x06
    2df4:	83 81       	ldd	r24, Z+3	; 0x03
    2df6:	81 ff       	sbrs	r24, 1
    2df8:	cc c1       	rjmp	.+920    	; 0x3192 <vfprintf+0x3b6>
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	3c 01       	movw	r6, r24
    2e00:	f6 01       	movw	r30, r12
    2e02:	93 81       	ldd	r25, Z+3	; 0x03
    2e04:	f7 01       	movw	r30, r14
    2e06:	93 fd       	sbrc	r25, 3
    2e08:	85 91       	lpm	r24, Z+
    2e0a:	93 ff       	sbrs	r25, 3
    2e0c:	81 91       	ld	r24, Z+
    2e0e:	7f 01       	movw	r14, r30
    2e10:	88 23       	and	r24, r24
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <vfprintf+0x3a>
    2e14:	ba c1       	rjmp	.+884    	; 0x318a <vfprintf+0x3ae>
    2e16:	85 32       	cpi	r24, 0x25	; 37
    2e18:	39 f4       	brne	.+14     	; 0x2e28 <vfprintf+0x4c>
    2e1a:	93 fd       	sbrc	r25, 3
    2e1c:	85 91       	lpm	r24, Z+
    2e1e:	93 ff       	sbrs	r25, 3
    2e20:	81 91       	ld	r24, Z+
    2e22:	7f 01       	movw	r14, r30
    2e24:	85 32       	cpi	r24, 0x25	; 37
    2e26:	29 f4       	brne	.+10     	; 0x2e32 <vfprintf+0x56>
    2e28:	b6 01       	movw	r22, r12
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    2e30:	e7 cf       	rjmp	.-50     	; 0x2e00 <vfprintf+0x24>
    2e32:	91 2c       	mov	r9, r1
    2e34:	21 2c       	mov	r2, r1
    2e36:	31 2c       	mov	r3, r1
    2e38:	ff e1       	ldi	r31, 0x1F	; 31
    2e3a:	f3 15       	cp	r31, r3
    2e3c:	d8 f0       	brcs	.+54     	; 0x2e74 <vfprintf+0x98>
    2e3e:	8b 32       	cpi	r24, 0x2B	; 43
    2e40:	79 f0       	breq	.+30     	; 0x2e60 <vfprintf+0x84>
    2e42:	38 f4       	brcc	.+14     	; 0x2e52 <vfprintf+0x76>
    2e44:	80 32       	cpi	r24, 0x20	; 32
    2e46:	79 f0       	breq	.+30     	; 0x2e66 <vfprintf+0x8a>
    2e48:	83 32       	cpi	r24, 0x23	; 35
    2e4a:	a1 f4       	brne	.+40     	; 0x2e74 <vfprintf+0x98>
    2e4c:	23 2d       	mov	r18, r3
    2e4e:	20 61       	ori	r18, 0x10	; 16
    2e50:	1d c0       	rjmp	.+58     	; 0x2e8c <vfprintf+0xb0>
    2e52:	8d 32       	cpi	r24, 0x2D	; 45
    2e54:	61 f0       	breq	.+24     	; 0x2e6e <vfprintf+0x92>
    2e56:	80 33       	cpi	r24, 0x30	; 48
    2e58:	69 f4       	brne	.+26     	; 0x2e74 <vfprintf+0x98>
    2e5a:	23 2d       	mov	r18, r3
    2e5c:	21 60       	ori	r18, 0x01	; 1
    2e5e:	16 c0       	rjmp	.+44     	; 0x2e8c <vfprintf+0xb0>
    2e60:	83 2d       	mov	r24, r3
    2e62:	82 60       	ori	r24, 0x02	; 2
    2e64:	38 2e       	mov	r3, r24
    2e66:	e3 2d       	mov	r30, r3
    2e68:	e4 60       	ori	r30, 0x04	; 4
    2e6a:	3e 2e       	mov	r3, r30
    2e6c:	2a c0       	rjmp	.+84     	; 0x2ec2 <vfprintf+0xe6>
    2e6e:	f3 2d       	mov	r31, r3
    2e70:	f8 60       	ori	r31, 0x08	; 8
    2e72:	1d c0       	rjmp	.+58     	; 0x2eae <vfprintf+0xd2>
    2e74:	37 fc       	sbrc	r3, 7
    2e76:	2d c0       	rjmp	.+90     	; 0x2ed2 <vfprintf+0xf6>
    2e78:	20 ed       	ldi	r18, 0xD0	; 208
    2e7a:	28 0f       	add	r18, r24
    2e7c:	2a 30       	cpi	r18, 0x0A	; 10
    2e7e:	40 f0       	brcs	.+16     	; 0x2e90 <vfprintf+0xb4>
    2e80:	8e 32       	cpi	r24, 0x2E	; 46
    2e82:	b9 f4       	brne	.+46     	; 0x2eb2 <vfprintf+0xd6>
    2e84:	36 fc       	sbrc	r3, 6
    2e86:	81 c1       	rjmp	.+770    	; 0x318a <vfprintf+0x3ae>
    2e88:	23 2d       	mov	r18, r3
    2e8a:	20 64       	ori	r18, 0x40	; 64
    2e8c:	32 2e       	mov	r3, r18
    2e8e:	19 c0       	rjmp	.+50     	; 0x2ec2 <vfprintf+0xe6>
    2e90:	36 fe       	sbrs	r3, 6
    2e92:	06 c0       	rjmp	.+12     	; 0x2ea0 <vfprintf+0xc4>
    2e94:	8a e0       	ldi	r24, 0x0A	; 10
    2e96:	98 9e       	mul	r9, r24
    2e98:	20 0d       	add	r18, r0
    2e9a:	11 24       	eor	r1, r1
    2e9c:	92 2e       	mov	r9, r18
    2e9e:	11 c0       	rjmp	.+34     	; 0x2ec2 <vfprintf+0xe6>
    2ea0:	ea e0       	ldi	r30, 0x0A	; 10
    2ea2:	2e 9e       	mul	r2, r30
    2ea4:	20 0d       	add	r18, r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	22 2e       	mov	r2, r18
    2eaa:	f3 2d       	mov	r31, r3
    2eac:	f0 62       	ori	r31, 0x20	; 32
    2eae:	3f 2e       	mov	r3, r31
    2eb0:	08 c0       	rjmp	.+16     	; 0x2ec2 <vfprintf+0xe6>
    2eb2:	8c 36       	cpi	r24, 0x6C	; 108
    2eb4:	21 f4       	brne	.+8      	; 0x2ebe <vfprintf+0xe2>
    2eb6:	83 2d       	mov	r24, r3
    2eb8:	80 68       	ori	r24, 0x80	; 128
    2eba:	38 2e       	mov	r3, r24
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <vfprintf+0xe6>
    2ebe:	88 36       	cpi	r24, 0x68	; 104
    2ec0:	41 f4       	brne	.+16     	; 0x2ed2 <vfprintf+0xf6>
    2ec2:	f7 01       	movw	r30, r14
    2ec4:	93 fd       	sbrc	r25, 3
    2ec6:	85 91       	lpm	r24, Z+
    2ec8:	93 ff       	sbrs	r25, 3
    2eca:	81 91       	ld	r24, Z+
    2ecc:	7f 01       	movw	r14, r30
    2ece:	81 11       	cpse	r24, r1
    2ed0:	b3 cf       	rjmp	.-154    	; 0x2e38 <vfprintf+0x5c>
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	9f 7d       	andi	r25, 0xDF	; 223
    2ed6:	95 54       	subi	r25, 0x45	; 69
    2ed8:	93 30       	cpi	r25, 0x03	; 3
    2eda:	28 f4       	brcc	.+10     	; 0x2ee6 <vfprintf+0x10a>
    2edc:	0c 5f       	subi	r16, 0xFC	; 252
    2ede:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee0:	9f e3       	ldi	r25, 0x3F	; 63
    2ee2:	99 83       	std	Y+1, r25	; 0x01
    2ee4:	0d c0       	rjmp	.+26     	; 0x2f00 <vfprintf+0x124>
    2ee6:	83 36       	cpi	r24, 0x63	; 99
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <vfprintf+0x11a>
    2eea:	83 37       	cpi	r24, 0x73	; 115
    2eec:	71 f0       	breq	.+28     	; 0x2f0a <vfprintf+0x12e>
    2eee:	83 35       	cpi	r24, 0x53	; 83
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <vfprintf+0x118>
    2ef2:	59 c0       	rjmp	.+178    	; 0x2fa6 <vfprintf+0x1ca>
    2ef4:	21 c0       	rjmp	.+66     	; 0x2f38 <vfprintf+0x15c>
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	80 81       	ld	r24, Z
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	0e 5f       	subi	r16, 0xFE	; 254
    2efe:	1f 4f       	sbci	r17, 0xFF	; 255
    2f00:	88 24       	eor	r8, r8
    2f02:	83 94       	inc	r8
    2f04:	91 2c       	mov	r9, r1
    2f06:	53 01       	movw	r10, r6
    2f08:	13 c0       	rjmp	.+38     	; 0x2f30 <vfprintf+0x154>
    2f0a:	28 01       	movw	r4, r16
    2f0c:	f2 e0       	ldi	r31, 0x02	; 2
    2f0e:	4f 0e       	add	r4, r31
    2f10:	51 1c       	adc	r5, r1
    2f12:	f8 01       	movw	r30, r16
    2f14:	a0 80       	ld	r10, Z
    2f16:	b1 80       	ldd	r11, Z+1	; 0x01
    2f18:	36 fe       	sbrs	r3, 6
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <vfprintf+0x146>
    2f1c:	69 2d       	mov	r22, r9
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <vfprintf+0x14a>
    2f22:	6f ef       	ldi	r22, 0xFF	; 255
    2f24:	7f ef       	ldi	r23, 0xFF	; 255
    2f26:	c5 01       	movw	r24, r10
    2f28:	0e 94 da 18 	call	0x31b4	; 0x31b4 <strnlen>
    2f2c:	4c 01       	movw	r8, r24
    2f2e:	82 01       	movw	r16, r4
    2f30:	f3 2d       	mov	r31, r3
    2f32:	ff 77       	andi	r31, 0x7F	; 127
    2f34:	3f 2e       	mov	r3, r31
    2f36:	16 c0       	rjmp	.+44     	; 0x2f64 <vfprintf+0x188>
    2f38:	28 01       	movw	r4, r16
    2f3a:	22 e0       	ldi	r18, 0x02	; 2
    2f3c:	42 0e       	add	r4, r18
    2f3e:	51 1c       	adc	r5, r1
    2f40:	f8 01       	movw	r30, r16
    2f42:	a0 80       	ld	r10, Z
    2f44:	b1 80       	ldd	r11, Z+1	; 0x01
    2f46:	36 fe       	sbrs	r3, 6
    2f48:	03 c0       	rjmp	.+6      	; 0x2f50 <vfprintf+0x174>
    2f4a:	69 2d       	mov	r22, r9
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <vfprintf+0x178>
    2f50:	6f ef       	ldi	r22, 0xFF	; 255
    2f52:	7f ef       	ldi	r23, 0xFF	; 255
    2f54:	c5 01       	movw	r24, r10
    2f56:	0e 94 cf 18 	call	0x319e	; 0x319e <strnlen_P>
    2f5a:	4c 01       	movw	r8, r24
    2f5c:	f3 2d       	mov	r31, r3
    2f5e:	f0 68       	ori	r31, 0x80	; 128
    2f60:	3f 2e       	mov	r3, r31
    2f62:	82 01       	movw	r16, r4
    2f64:	33 fc       	sbrc	r3, 3
    2f66:	1b c0       	rjmp	.+54     	; 0x2f9e <vfprintf+0x1c2>
    2f68:	82 2d       	mov	r24, r2
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	88 16       	cp	r8, r24
    2f6e:	99 06       	cpc	r9, r25
    2f70:	b0 f4       	brcc	.+44     	; 0x2f9e <vfprintf+0x1c2>
    2f72:	b6 01       	movw	r22, r12
    2f74:	80 e2       	ldi	r24, 0x20	; 32
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    2f7c:	2a 94       	dec	r2
    2f7e:	f4 cf       	rjmp	.-24     	; 0x2f68 <vfprintf+0x18c>
    2f80:	f5 01       	movw	r30, r10
    2f82:	37 fc       	sbrc	r3, 7
    2f84:	85 91       	lpm	r24, Z+
    2f86:	37 fe       	sbrs	r3, 7
    2f88:	81 91       	ld	r24, Z+
    2f8a:	5f 01       	movw	r10, r30
    2f8c:	b6 01       	movw	r22, r12
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    2f94:	21 10       	cpse	r2, r1
    2f96:	2a 94       	dec	r2
    2f98:	21 e0       	ldi	r18, 0x01	; 1
    2f9a:	82 1a       	sub	r8, r18
    2f9c:	91 08       	sbc	r9, r1
    2f9e:	81 14       	cp	r8, r1
    2fa0:	91 04       	cpc	r9, r1
    2fa2:	71 f7       	brne	.-36     	; 0x2f80 <vfprintf+0x1a4>
    2fa4:	e8 c0       	rjmp	.+464    	; 0x3176 <vfprintf+0x39a>
    2fa6:	84 36       	cpi	r24, 0x64	; 100
    2fa8:	11 f0       	breq	.+4      	; 0x2fae <vfprintf+0x1d2>
    2faa:	89 36       	cpi	r24, 0x69	; 105
    2fac:	41 f5       	brne	.+80     	; 0x2ffe <vfprintf+0x222>
    2fae:	f8 01       	movw	r30, r16
    2fb0:	37 fe       	sbrs	r3, 7
    2fb2:	07 c0       	rjmp	.+14     	; 0x2fc2 <vfprintf+0x1e6>
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	0c 5f       	subi	r16, 0xFC	; 252
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	08 c0       	rjmp	.+16     	; 0x2fd2 <vfprintf+0x1f6>
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	07 2e       	mov	r0, r23
    2fc8:	00 0c       	add	r0, r0
    2fca:	88 0b       	sbc	r24, r24
    2fcc:	99 0b       	sbc	r25, r25
    2fce:	0e 5f       	subi	r16, 0xFE	; 254
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	f3 2d       	mov	r31, r3
    2fd4:	ff 76       	andi	r31, 0x6F	; 111
    2fd6:	3f 2e       	mov	r3, r31
    2fd8:	97 ff       	sbrs	r25, 7
    2fda:	09 c0       	rjmp	.+18     	; 0x2fee <vfprintf+0x212>
    2fdc:	90 95       	com	r25
    2fde:	80 95       	com	r24
    2fe0:	70 95       	com	r23
    2fe2:	61 95       	neg	r22
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	f0 68       	ori	r31, 0x80	; 128
    2fec:	3f 2e       	mov	r3, r31
    2fee:	2a e0       	ldi	r18, 0x0A	; 10
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	a3 01       	movw	r20, r6
    2ff4:	0e 94 21 19 	call	0x3242	; 0x3242 <__ultoa_invert>
    2ff8:	88 2e       	mov	r8, r24
    2ffa:	86 18       	sub	r8, r6
    2ffc:	45 c0       	rjmp	.+138    	; 0x3088 <vfprintf+0x2ac>
    2ffe:	85 37       	cpi	r24, 0x75	; 117
    3000:	31 f4       	brne	.+12     	; 0x300e <vfprintf+0x232>
    3002:	23 2d       	mov	r18, r3
    3004:	2f 7e       	andi	r18, 0xEF	; 239
    3006:	b2 2e       	mov	r11, r18
    3008:	2a e0       	ldi	r18, 0x0A	; 10
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	25 c0       	rjmp	.+74     	; 0x3058 <vfprintf+0x27c>
    300e:	93 2d       	mov	r25, r3
    3010:	99 7f       	andi	r25, 0xF9	; 249
    3012:	b9 2e       	mov	r11, r25
    3014:	8f 36       	cpi	r24, 0x6F	; 111
    3016:	c1 f0       	breq	.+48     	; 0x3048 <vfprintf+0x26c>
    3018:	18 f4       	brcc	.+6      	; 0x3020 <vfprintf+0x244>
    301a:	88 35       	cpi	r24, 0x58	; 88
    301c:	79 f0       	breq	.+30     	; 0x303c <vfprintf+0x260>
    301e:	b5 c0       	rjmp	.+362    	; 0x318a <vfprintf+0x3ae>
    3020:	80 37       	cpi	r24, 0x70	; 112
    3022:	19 f0       	breq	.+6      	; 0x302a <vfprintf+0x24e>
    3024:	88 37       	cpi	r24, 0x78	; 120
    3026:	21 f0       	breq	.+8      	; 0x3030 <vfprintf+0x254>
    3028:	b0 c0       	rjmp	.+352    	; 0x318a <vfprintf+0x3ae>
    302a:	e9 2f       	mov	r30, r25
    302c:	e0 61       	ori	r30, 0x10	; 16
    302e:	be 2e       	mov	r11, r30
    3030:	b4 fe       	sbrs	r11, 4
    3032:	0d c0       	rjmp	.+26     	; 0x304e <vfprintf+0x272>
    3034:	fb 2d       	mov	r31, r11
    3036:	f4 60       	ori	r31, 0x04	; 4
    3038:	bf 2e       	mov	r11, r31
    303a:	09 c0       	rjmp	.+18     	; 0x304e <vfprintf+0x272>
    303c:	34 fe       	sbrs	r3, 4
    303e:	0a c0       	rjmp	.+20     	; 0x3054 <vfprintf+0x278>
    3040:	29 2f       	mov	r18, r25
    3042:	26 60       	ori	r18, 0x06	; 6
    3044:	b2 2e       	mov	r11, r18
    3046:	06 c0       	rjmp	.+12     	; 0x3054 <vfprintf+0x278>
    3048:	28 e0       	ldi	r18, 0x08	; 8
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	05 c0       	rjmp	.+10     	; 0x3058 <vfprintf+0x27c>
    304e:	20 e1       	ldi	r18, 0x10	; 16
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <vfprintf+0x27c>
    3054:	20 e1       	ldi	r18, 0x10	; 16
    3056:	32 e0       	ldi	r19, 0x02	; 2
    3058:	f8 01       	movw	r30, r16
    305a:	b7 fe       	sbrs	r11, 7
    305c:	07 c0       	rjmp	.+14     	; 0x306c <vfprintf+0x290>
    305e:	60 81       	ld	r22, Z
    3060:	71 81       	ldd	r23, Z+1	; 0x01
    3062:	82 81       	ldd	r24, Z+2	; 0x02
    3064:	93 81       	ldd	r25, Z+3	; 0x03
    3066:	0c 5f       	subi	r16, 0xFC	; 252
    3068:	1f 4f       	sbci	r17, 0xFF	; 255
    306a:	06 c0       	rjmp	.+12     	; 0x3078 <vfprintf+0x29c>
    306c:	60 81       	ld	r22, Z
    306e:	71 81       	ldd	r23, Z+1	; 0x01
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 5f       	subi	r16, 0xFE	; 254
    3076:	1f 4f       	sbci	r17, 0xFF	; 255
    3078:	a3 01       	movw	r20, r6
    307a:	0e 94 21 19 	call	0x3242	; 0x3242 <__ultoa_invert>
    307e:	88 2e       	mov	r8, r24
    3080:	86 18       	sub	r8, r6
    3082:	fb 2d       	mov	r31, r11
    3084:	ff 77       	andi	r31, 0x7F	; 127
    3086:	3f 2e       	mov	r3, r31
    3088:	36 fe       	sbrs	r3, 6
    308a:	0d c0       	rjmp	.+26     	; 0x30a6 <vfprintf+0x2ca>
    308c:	23 2d       	mov	r18, r3
    308e:	2e 7f       	andi	r18, 0xFE	; 254
    3090:	a2 2e       	mov	r10, r18
    3092:	89 14       	cp	r8, r9
    3094:	58 f4       	brcc	.+22     	; 0x30ac <vfprintf+0x2d0>
    3096:	34 fe       	sbrs	r3, 4
    3098:	0b c0       	rjmp	.+22     	; 0x30b0 <vfprintf+0x2d4>
    309a:	32 fc       	sbrc	r3, 2
    309c:	09 c0       	rjmp	.+18     	; 0x30b0 <vfprintf+0x2d4>
    309e:	83 2d       	mov	r24, r3
    30a0:	8e 7e       	andi	r24, 0xEE	; 238
    30a2:	a8 2e       	mov	r10, r24
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <vfprintf+0x2d4>
    30a6:	b8 2c       	mov	r11, r8
    30a8:	a3 2c       	mov	r10, r3
    30aa:	03 c0       	rjmp	.+6      	; 0x30b2 <vfprintf+0x2d6>
    30ac:	b8 2c       	mov	r11, r8
    30ae:	01 c0       	rjmp	.+2      	; 0x30b2 <vfprintf+0x2d6>
    30b0:	b9 2c       	mov	r11, r9
    30b2:	a4 fe       	sbrs	r10, 4
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <vfprintf+0x2f8>
    30b6:	fe 01       	movw	r30, r28
    30b8:	e8 0d       	add	r30, r8
    30ba:	f1 1d       	adc	r31, r1
    30bc:	80 81       	ld	r24, Z
    30be:	80 33       	cpi	r24, 0x30	; 48
    30c0:	21 f4       	brne	.+8      	; 0x30ca <vfprintf+0x2ee>
    30c2:	9a 2d       	mov	r25, r10
    30c4:	99 7e       	andi	r25, 0xE9	; 233
    30c6:	a9 2e       	mov	r10, r25
    30c8:	09 c0       	rjmp	.+18     	; 0x30dc <vfprintf+0x300>
    30ca:	a2 fe       	sbrs	r10, 2
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <vfprintf+0x2fe>
    30ce:	b3 94       	inc	r11
    30d0:	b3 94       	inc	r11
    30d2:	04 c0       	rjmp	.+8      	; 0x30dc <vfprintf+0x300>
    30d4:	8a 2d       	mov	r24, r10
    30d6:	86 78       	andi	r24, 0x86	; 134
    30d8:	09 f0       	breq	.+2      	; 0x30dc <vfprintf+0x300>
    30da:	b3 94       	inc	r11
    30dc:	a3 fc       	sbrc	r10, 3
    30de:	11 c0       	rjmp	.+34     	; 0x3102 <vfprintf+0x326>
    30e0:	a0 fe       	sbrs	r10, 0
    30e2:	06 c0       	rjmp	.+12     	; 0x30f0 <vfprintf+0x314>
    30e4:	b2 14       	cp	r11, r2
    30e6:	88 f4       	brcc	.+34     	; 0x310a <vfprintf+0x32e>
    30e8:	28 0c       	add	r2, r8
    30ea:	92 2c       	mov	r9, r2
    30ec:	9b 18       	sub	r9, r11
    30ee:	0e c0       	rjmp	.+28     	; 0x310c <vfprintf+0x330>
    30f0:	b2 14       	cp	r11, r2
    30f2:	60 f4       	brcc	.+24     	; 0x310c <vfprintf+0x330>
    30f4:	b6 01       	movw	r22, r12
    30f6:	80 e2       	ldi	r24, 0x20	; 32
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    30fe:	b3 94       	inc	r11
    3100:	f7 cf       	rjmp	.-18     	; 0x30f0 <vfprintf+0x314>
    3102:	b2 14       	cp	r11, r2
    3104:	18 f4       	brcc	.+6      	; 0x310c <vfprintf+0x330>
    3106:	2b 18       	sub	r2, r11
    3108:	02 c0       	rjmp	.+4      	; 0x310e <vfprintf+0x332>
    310a:	98 2c       	mov	r9, r8
    310c:	21 2c       	mov	r2, r1
    310e:	a4 fe       	sbrs	r10, 4
    3110:	10 c0       	rjmp	.+32     	; 0x3132 <vfprintf+0x356>
    3112:	b6 01       	movw	r22, r12
    3114:	80 e3       	ldi	r24, 0x30	; 48
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    311c:	a2 fe       	sbrs	r10, 2
    311e:	17 c0       	rjmp	.+46     	; 0x314e <vfprintf+0x372>
    3120:	a1 fc       	sbrc	r10, 1
    3122:	03 c0       	rjmp	.+6      	; 0x312a <vfprintf+0x34e>
    3124:	88 e7       	ldi	r24, 0x78	; 120
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	02 c0       	rjmp	.+4      	; 0x312e <vfprintf+0x352>
    312a:	88 e5       	ldi	r24, 0x58	; 88
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	b6 01       	movw	r22, r12
    3130:	0c c0       	rjmp	.+24     	; 0x314a <vfprintf+0x36e>
    3132:	8a 2d       	mov	r24, r10
    3134:	86 78       	andi	r24, 0x86	; 134
    3136:	59 f0       	breq	.+22     	; 0x314e <vfprintf+0x372>
    3138:	a1 fe       	sbrs	r10, 1
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <vfprintf+0x364>
    313c:	8b e2       	ldi	r24, 0x2B	; 43
    313e:	01 c0       	rjmp	.+2      	; 0x3142 <vfprintf+0x366>
    3140:	80 e2       	ldi	r24, 0x20	; 32
    3142:	a7 fc       	sbrc	r10, 7
    3144:	8d e2       	ldi	r24, 0x2D	; 45
    3146:	b6 01       	movw	r22, r12
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    314e:	89 14       	cp	r8, r9
    3150:	38 f4       	brcc	.+14     	; 0x3160 <vfprintf+0x384>
    3152:	b6 01       	movw	r22, r12
    3154:	80 e3       	ldi	r24, 0x30	; 48
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    315c:	9a 94       	dec	r9
    315e:	f7 cf       	rjmp	.-18     	; 0x314e <vfprintf+0x372>
    3160:	8a 94       	dec	r8
    3162:	f3 01       	movw	r30, r6
    3164:	e8 0d       	add	r30, r8
    3166:	f1 1d       	adc	r31, r1
    3168:	80 81       	ld	r24, Z
    316a:	b6 01       	movw	r22, r12
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    3172:	81 10       	cpse	r8, r1
    3174:	f5 cf       	rjmp	.-22     	; 0x3160 <vfprintf+0x384>
    3176:	22 20       	and	r2, r2
    3178:	09 f4       	brne	.+2      	; 0x317c <vfprintf+0x3a0>
    317a:	42 ce       	rjmp	.-892    	; 0x2e00 <vfprintf+0x24>
    317c:	b6 01       	movw	r22, r12
    317e:	80 e2       	ldi	r24, 0x20	; 32
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	0e 94 e5 18 	call	0x31ca	; 0x31ca <fputc>
    3186:	2a 94       	dec	r2
    3188:	f6 cf       	rjmp	.-20     	; 0x3176 <vfprintf+0x39a>
    318a:	f6 01       	movw	r30, r12
    318c:	86 81       	ldd	r24, Z+6	; 0x06
    318e:	97 81       	ldd	r25, Z+7	; 0x07
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <vfprintf+0x3ba>
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	9f ef       	ldi	r25, 0xFF	; 255
    3196:	2b 96       	adiw	r28, 0x0b	; 11
    3198:	e2 e1       	ldi	r30, 0x12	; 18
    319a:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__>

0000319e <strnlen_P>:
    319e:	fc 01       	movw	r30, r24
    31a0:	05 90       	lpm	r0, Z+
    31a2:	61 50       	subi	r22, 0x01	; 1
    31a4:	70 40       	sbci	r23, 0x00	; 0
    31a6:	01 10       	cpse	r0, r1
    31a8:	d8 f7       	brcc	.-10     	; 0x31a0 <strnlen_P+0x2>
    31aa:	80 95       	com	r24
    31ac:	90 95       	com	r25
    31ae:	8e 0f       	add	r24, r30
    31b0:	9f 1f       	adc	r25, r31
    31b2:	08 95       	ret

000031b4 <strnlen>:
    31b4:	fc 01       	movw	r30, r24
    31b6:	61 50       	subi	r22, 0x01	; 1
    31b8:	70 40       	sbci	r23, 0x00	; 0
    31ba:	01 90       	ld	r0, Z+
    31bc:	01 10       	cpse	r0, r1
    31be:	d8 f7       	brcc	.-10     	; 0x31b6 <strnlen+0x2>
    31c0:	80 95       	com	r24
    31c2:	90 95       	com	r25
    31c4:	8e 0f       	add	r24, r30
    31c6:	9f 1f       	adc	r25, r31
    31c8:	08 95       	ret

000031ca <fputc>:
    31ca:	0f 93       	push	r16
    31cc:	1f 93       	push	r17
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	fb 01       	movw	r30, r22
    31d4:	23 81       	ldd	r18, Z+3	; 0x03
    31d6:	21 fd       	sbrc	r18, 1
    31d8:	03 c0       	rjmp	.+6      	; 0x31e0 <fputc+0x16>
    31da:	8f ef       	ldi	r24, 0xFF	; 255
    31dc:	9f ef       	ldi	r25, 0xFF	; 255
    31de:	2c c0       	rjmp	.+88     	; 0x3238 <fputc+0x6e>
    31e0:	22 ff       	sbrs	r18, 2
    31e2:	16 c0       	rjmp	.+44     	; 0x3210 <fputc+0x46>
    31e4:	46 81       	ldd	r20, Z+6	; 0x06
    31e6:	57 81       	ldd	r21, Z+7	; 0x07
    31e8:	24 81       	ldd	r18, Z+4	; 0x04
    31ea:	35 81       	ldd	r19, Z+5	; 0x05
    31ec:	42 17       	cp	r20, r18
    31ee:	53 07       	cpc	r21, r19
    31f0:	44 f4       	brge	.+16     	; 0x3202 <fputc+0x38>
    31f2:	a0 81       	ld	r26, Z
    31f4:	b1 81       	ldd	r27, Z+1	; 0x01
    31f6:	9d 01       	movw	r18, r26
    31f8:	2f 5f       	subi	r18, 0xFF	; 255
    31fa:	3f 4f       	sbci	r19, 0xFF	; 255
    31fc:	31 83       	std	Z+1, r19	; 0x01
    31fe:	20 83       	st	Z, r18
    3200:	8c 93       	st	X, r24
    3202:	26 81       	ldd	r18, Z+6	; 0x06
    3204:	37 81       	ldd	r19, Z+7	; 0x07
    3206:	2f 5f       	subi	r18, 0xFF	; 255
    3208:	3f 4f       	sbci	r19, 0xFF	; 255
    320a:	37 83       	std	Z+7, r19	; 0x07
    320c:	26 83       	std	Z+6, r18	; 0x06
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <fputc+0x6e>
    3210:	8b 01       	movw	r16, r22
    3212:	ec 01       	movw	r28, r24
    3214:	fb 01       	movw	r30, r22
    3216:	00 84       	ldd	r0, Z+8	; 0x08
    3218:	f1 85       	ldd	r31, Z+9	; 0x09
    321a:	e0 2d       	mov	r30, r0
    321c:	09 95       	icall
    321e:	89 2b       	or	r24, r25
    3220:	e1 f6       	brne	.-72     	; 0x31da <fputc+0x10>
    3222:	d8 01       	movw	r26, r16
    3224:	16 96       	adiw	r26, 0x06	; 6
    3226:	8d 91       	ld	r24, X+
    3228:	9c 91       	ld	r25, X
    322a:	17 97       	sbiw	r26, 0x07	; 7
    322c:	01 96       	adiw	r24, 0x01	; 1
    322e:	17 96       	adiw	r26, 0x07	; 7
    3230:	9c 93       	st	X, r25
    3232:	8e 93       	st	-X, r24
    3234:	16 97       	sbiw	r26, 0x06	; 6
    3236:	ce 01       	movw	r24, r28
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	08 95       	ret

00003242 <__ultoa_invert>:
    3242:	fa 01       	movw	r30, r20
    3244:	aa 27       	eor	r26, r26
    3246:	28 30       	cpi	r18, 0x08	; 8
    3248:	51 f1       	breq	.+84     	; 0x329e <__ultoa_invert+0x5c>
    324a:	20 31       	cpi	r18, 0x10	; 16
    324c:	81 f1       	breq	.+96     	; 0x32ae <__ultoa_invert+0x6c>
    324e:	e8 94       	clt
    3250:	6f 93       	push	r22
    3252:	6e 7f       	andi	r22, 0xFE	; 254
    3254:	6e 5f       	subi	r22, 0xFE	; 254
    3256:	7f 4f       	sbci	r23, 0xFF	; 255
    3258:	8f 4f       	sbci	r24, 0xFF	; 255
    325a:	9f 4f       	sbci	r25, 0xFF	; 255
    325c:	af 4f       	sbci	r26, 0xFF	; 255
    325e:	b1 e0       	ldi	r27, 0x01	; 1
    3260:	3e d0       	rcall	.+124    	; 0x32de <__ultoa_invert+0x9c>
    3262:	b4 e0       	ldi	r27, 0x04	; 4
    3264:	3c d0       	rcall	.+120    	; 0x32de <__ultoa_invert+0x9c>
    3266:	67 0f       	add	r22, r23
    3268:	78 1f       	adc	r23, r24
    326a:	89 1f       	adc	r24, r25
    326c:	9a 1f       	adc	r25, r26
    326e:	a1 1d       	adc	r26, r1
    3270:	68 0f       	add	r22, r24
    3272:	79 1f       	adc	r23, r25
    3274:	8a 1f       	adc	r24, r26
    3276:	91 1d       	adc	r25, r1
    3278:	a1 1d       	adc	r26, r1
    327a:	6a 0f       	add	r22, r26
    327c:	71 1d       	adc	r23, r1
    327e:	81 1d       	adc	r24, r1
    3280:	91 1d       	adc	r25, r1
    3282:	a1 1d       	adc	r26, r1
    3284:	20 d0       	rcall	.+64     	; 0x32c6 <__ultoa_invert+0x84>
    3286:	09 f4       	brne	.+2      	; 0x328a <__ultoa_invert+0x48>
    3288:	68 94       	set
    328a:	3f 91       	pop	r19
    328c:	2a e0       	ldi	r18, 0x0A	; 10
    328e:	26 9f       	mul	r18, r22
    3290:	11 24       	eor	r1, r1
    3292:	30 19       	sub	r19, r0
    3294:	30 5d       	subi	r19, 0xD0	; 208
    3296:	31 93       	st	Z+, r19
    3298:	de f6       	brtc	.-74     	; 0x3250 <__ultoa_invert+0xe>
    329a:	cf 01       	movw	r24, r30
    329c:	08 95       	ret
    329e:	46 2f       	mov	r20, r22
    32a0:	47 70       	andi	r20, 0x07	; 7
    32a2:	40 5d       	subi	r20, 0xD0	; 208
    32a4:	41 93       	st	Z+, r20
    32a6:	b3 e0       	ldi	r27, 0x03	; 3
    32a8:	0f d0       	rcall	.+30     	; 0x32c8 <__ultoa_invert+0x86>
    32aa:	c9 f7       	brne	.-14     	; 0x329e <__ultoa_invert+0x5c>
    32ac:	f6 cf       	rjmp	.-20     	; 0x329a <__ultoa_invert+0x58>
    32ae:	46 2f       	mov	r20, r22
    32b0:	4f 70       	andi	r20, 0x0F	; 15
    32b2:	40 5d       	subi	r20, 0xD0	; 208
    32b4:	4a 33       	cpi	r20, 0x3A	; 58
    32b6:	18 f0       	brcs	.+6      	; 0x32be <__ultoa_invert+0x7c>
    32b8:	49 5d       	subi	r20, 0xD9	; 217
    32ba:	31 fd       	sbrc	r19, 1
    32bc:	40 52       	subi	r20, 0x20	; 32
    32be:	41 93       	st	Z+, r20
    32c0:	02 d0       	rcall	.+4      	; 0x32c6 <__ultoa_invert+0x84>
    32c2:	a9 f7       	brne	.-22     	; 0x32ae <__ultoa_invert+0x6c>
    32c4:	ea cf       	rjmp	.-44     	; 0x329a <__ultoa_invert+0x58>
    32c6:	b4 e0       	ldi	r27, 0x04	; 4
    32c8:	a6 95       	lsr	r26
    32ca:	97 95       	ror	r25
    32cc:	87 95       	ror	r24
    32ce:	77 95       	ror	r23
    32d0:	67 95       	ror	r22
    32d2:	ba 95       	dec	r27
    32d4:	c9 f7       	brne	.-14     	; 0x32c8 <__ultoa_invert+0x86>
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	61 05       	cpc	r22, r1
    32da:	71 05       	cpc	r23, r1
    32dc:	08 95       	ret
    32de:	9b 01       	movw	r18, r22
    32e0:	ac 01       	movw	r20, r24
    32e2:	0a 2e       	mov	r0, r26
    32e4:	06 94       	lsr	r0
    32e6:	57 95       	ror	r21
    32e8:	47 95       	ror	r20
    32ea:	37 95       	ror	r19
    32ec:	27 95       	ror	r18
    32ee:	ba 95       	dec	r27
    32f0:	c9 f7       	brne	.-14     	; 0x32e4 <__ultoa_invert+0xa2>
    32f2:	62 0f       	add	r22, r18
    32f4:	73 1f       	adc	r23, r19
    32f6:	84 1f       	adc	r24, r20
    32f8:	95 1f       	adc	r25, r21
    32fa:	a0 1d       	adc	r26, r0
    32fc:	08 95       	ret

000032fe <__prologue_saves__>:
    32fe:	2f 92       	push	r2
    3300:	3f 92       	push	r3
    3302:	4f 92       	push	r4
    3304:	5f 92       	push	r5
    3306:	6f 92       	push	r6
    3308:	7f 92       	push	r7
    330a:	8f 92       	push	r8
    330c:	9f 92       	push	r9
    330e:	af 92       	push	r10
    3310:	bf 92       	push	r11
    3312:	cf 92       	push	r12
    3314:	df 92       	push	r13
    3316:	ef 92       	push	r14
    3318:	ff 92       	push	r15
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	ca 1b       	sub	r28, r26
    3328:	db 0b       	sbc	r29, r27
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	de bf       	out	0x3e, r29	; 62
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	cd bf       	out	0x3d, r28	; 61
    3334:	09 94       	ijmp

00003336 <__epilogue_restores__>:
    3336:	2a 88       	ldd	r2, Y+18	; 0x12
    3338:	39 88       	ldd	r3, Y+17	; 0x11
    333a:	48 88       	ldd	r4, Y+16	; 0x10
    333c:	5f 84       	ldd	r5, Y+15	; 0x0f
    333e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3340:	7d 84       	ldd	r7, Y+13	; 0x0d
    3342:	8c 84       	ldd	r8, Y+12	; 0x0c
    3344:	9b 84       	ldd	r9, Y+11	; 0x0b
    3346:	aa 84       	ldd	r10, Y+10	; 0x0a
    3348:	b9 84       	ldd	r11, Y+9	; 0x09
    334a:	c8 84       	ldd	r12, Y+8	; 0x08
    334c:	df 80       	ldd	r13, Y+7	; 0x07
    334e:	ee 80       	ldd	r14, Y+6	; 0x06
    3350:	fd 80       	ldd	r15, Y+5	; 0x05
    3352:	0c 81       	ldd	r16, Y+4	; 0x04
    3354:	1b 81       	ldd	r17, Y+3	; 0x03
    3356:	aa 81       	ldd	r26, Y+2	; 0x02
    3358:	b9 81       	ldd	r27, Y+1	; 0x01
    335a:	ce 0f       	add	r28, r30
    335c:	d1 1d       	adc	r29, r1
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	ed 01       	movw	r28, r26
    336a:	08 95       	ret

0000336c <_exit>:
    336c:	f8 94       	cli

0000336e <__stop_program>:
    336e:	ff cf       	rjmp	.-2      	; 0x336e <__stop_program>
